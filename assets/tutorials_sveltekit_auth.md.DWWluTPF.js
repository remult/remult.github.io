import{_ as a,c as n,o as l,L as o}from"./chunks/framework.BLY-PH98.js";const D=JSON.parse('{"title":"Authentication and Authorization","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/sveltekit/auth.md","filePath":"tutorials/sveltekit/auth.md","lastUpdated":1753700867000}'),e={name:"tutorials/sveltekit/auth.md"};function p(t,s,c,r,F,i){return l(),n("div",null,s[0]||(s[0]=[o(`<h1 id="authentication-and-authorization" tabindex="-1">Authentication and Authorization <a class="header-anchor" href="#authentication-and-authorization" aria-label="Permalink to &quot;Authentication and Authorization&quot;">​</a></h1><p>Our todo app is nearly functionally complete, but it still doesn&#39;t fulfill a very basic requirement - that users should log in before they can view, create or modify tasks.</p><p>Remult provides a flexible mechanism that enables placing <strong>code-based authorization rules</strong> at various levels of the application&#39;s API. To maintain high code cohesion, <strong>entity and field-level authorization code should be placed in entity classes</strong>.</p><p><strong>Remult is completely unopinionated when it comes to user authentication.</strong> You are free to use any kind of authentication mechanism. The only requirement is that you provide Remult with an object which implements the Remult <code>UserInfo</code> interface:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#BB9AF7;"> interface</span><span style="color:#C0CAF5;"> UserInfo</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#73DACA;">  id</span><span style="color:#89DDFF;">:</span><span style="color:#0DB9D7;"> string</span></span>
<span class="line"><span style="color:#73DACA;">  name</span><span style="color:#89DDFF;">?:</span><span style="color:#0DB9D7;"> string</span></span>
<span class="line"><span style="color:#73DACA;">  roles</span><span style="color:#89DDFF;">?:</span><span style="color:#0DB9D7;"> string</span><span style="color:#9ABDF5;">[]</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div><p>In this tutorial, we&#39;ll use <a href="https://authjs.dev/" target="_blank" rel="noreferrer">Auth.js</a> for authentication.</p><h2 id="tasks-crud-requires-sign-in" tabindex="-1">Tasks CRUD Requires Sign-in <a class="header-anchor" href="#tasks-crud-requires-sign-in" aria-label="Permalink to &quot;Tasks CRUD Requires Sign-in&quot;">​</a></h2><p>This rule is implemented within the <code>Task</code> <code>@Entity</code> decorator, by modifying the value of the <code>allowApiCrud</code> property. This property can be set to a function that accepts a <code>Remult</code> argument and returns a <code>boolean</code> value. Let&#39;s use the <code>Allow.authenticated</code> function from Remult.</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-Mw4jr" id="tab-xt-A0b_" checked><label data-title="src/app/shared/Task.ts" for="tab-xt-A0b_">src/app/shared/Task.ts</label><input type="radio" name="group-Mw4jr" id="tab-d68L_LU"><label data-title="sh" for="tab-d68L_LU">sh</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night has-diff vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line diff add"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">Allow</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">Entity</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">tasks</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line diff add"><span style="color:#73DACA;">    allowApiCrud</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> Allow</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">authenticated</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span></code></pre></div><p>After the browser refreshes, <strong>the list of tasks disappears</strong> and the user can no longer create new tasks.</p><details class="details custom-block"><summary>Inspect the HTTP error returned by the API using cURL</summary><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#C0CAF5;">curl</span><span style="color:#E0AF68;"> -i</span><span style="color:#9ECE6A;"> http://localhost:5173/api/tasks</span></span></code></pre></div></details></div></div><h3 id="server-side-authorization" tabindex="-1">Server-side Authorization <a class="header-anchor" href="#server-side-authorization" aria-label="Permalink to &quot;Server-side Authorization&quot;">​</a></h3><p>Open your database (<code>db/tasks.json</code>), and click on <strong>Mark All Completed</strong> and <strong>Mark All Incomplete</strong> buttons in turn. You will notice that the <code>completed</code> field is toggling.</p><p>Although client CRUD requests to <code>tasks</code> API endpoints now require a signed-in user, the API endpoint created for our <code>setAllCompleted</code> server function remains available to unauthenticated requests. Since the <code>allowApiCrud</code> rule we implemented does not affect the server-side code&#39;s ability to use the <code>Task</code> entity class for performing database CRUD operations, <strong>the <code>setAllCompleted</code> function still works as before</strong>.</p><p>To fix this, let&#39;s implement the same rule using the <code>@BackendMethod</code> decorator of the <code>setAllCompleted</code> method of <code>TasksController</code>.</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-zRM7L" id="tab-NiRVUAc" checked><label data-title="src/shared/TasksController.ts" for="tab-NiRVUAc">src/shared/TasksController.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">Allow</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">BackendMethod</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;"> allowed</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> Allow</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">authenticated</span><span style="color:#9ABDF5;"> })</span></span></code></pre></div></div></div><p>Try toggling the <code>completed</code> field and you will notice that we now require to be authenticated - even on the backend.</p><h2 id="user-authentication" tabindex="-1">User Authentication <a class="header-anchor" href="#user-authentication" aria-label="Permalink to &quot;User Authentication&quot;">​</a></h2><p>Let&#39;s set-up <code>Auth.js</code> to authenticate users to our app.</p><h3 id="backend-setup" tabindex="-1">Backend setup <a class="header-anchor" href="#backend-setup" aria-label="Permalink to &quot;Backend setup&quot;">​</a></h3><ol><li><p>Install <code>auth-core</code> and <code>auth-sveltekit</code>:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#C0CAF5;">npm</span><span style="color:#9ECE6A;"> i</span><span style="color:#9ECE6A;"> @auth/core</span><span style="color:#9ECE6A;"> @auth/sveltekit</span><span style="color:#E0AF68;"> -D</span></span></code></pre></div></li><li><p><code>Auth.js</code> requires a &quot;secret&quot; - a random string used to hash tokens, sign cookies and generate cryptographic keys.</p></li></ol><p>Create a file called <code>.env.local</code> at the root of the project, and set the secret <code>AUTH_SECRET</code> to a random string.</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-1t8FR" id="tab-9RrS8Nz" checked><label data-title=".env.local" for="tab-9RrS8Nz">.env.local</label></div><div class="blocks"><div class="language-bash active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#C0CAF5;">AUTH_SECRET</span><span style="color:#89DDFF;">=</span><span style="color:#9ECE6A;">something-secret</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can use an <a href="https://www.uuidgenerator.net/" target="_blank" rel="noreferrer">online UUID generator</a> to generate a completely random string</p></div></div></div><ol start="3"><li>In <code>+hooks.server.ts</code>, let&#39;s create two handles</li></ol><ul><li><code>handleAuth</code> to handle authentication from <code>Auth.js</code> with a list of allowed users.</li><li><code>handleRemult</code> to provide the remult context.</li></ul><p>Using Sveltekit&#39;s <code>sequence</code>, we ensure the chain of handles. The results would look like this:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-2OiOg" id="tab-UxLXmHS" checked><label data-title="src/hooks.server.ts" for="tab-UxLXmHS">src/hooks.server.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#BB9AF7;"> type</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">Handle</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">@sveltejs/kit</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">sequence</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">@sveltejs/kit/hooks</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">SvelteKitAuth</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">@auth/sveltekit</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#0DB9D7;"> Credentials</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">@auth/sveltekit/providers/credentials</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#C0CAF5;">api</span><span style="color:#89DDFF;"> as</span><span style="color:#0DB9D7;"> handleRemult</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">./server/api</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#BB9AF7;"> type</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">UserInfo</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;"> * Users that are allowed to log in.</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> validUsers</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> UserInfo</span><span style="color:#9ABDF5;">[]</span><span style="color:#89DDFF;"> =</span><span style="color:#9ABDF5;"> [</span></span>
<span class="line"><span style="color:#9ABDF5;">  {</span><span style="color:#73DACA;"> id</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#73DACA;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">Jane</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#73DACA;"> roles</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">admin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">]</span><span style="color:#9ABDF5;"> }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">  {</span><span style="color:#73DACA;"> id</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#73DACA;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">Steve</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;"> }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;"> * Handle authentication with authjs as an example</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;"> * Based on article at https://authjs.dev/reference/sveltekit</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#9D7CD8;font-style:italic;"> const</span><span style="color:#89DDFF;"> {</span><span style="color:#C0CAF5;"> handle</span><span style="color:#89DDFF;">:</span><span style="color:#BB9AF7;"> handleAuth</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> SvelteKitAuth</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#73DACA;">  trustHost</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">  providers</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> [</span></span>
<span class="line"><span style="color:#7AA2F7;">    Credentials</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#73DACA;">      credentials</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#41A6B5;">        name</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#41A6B5;">          placeholder</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">Try Steve or Jane</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">        }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">      }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#7AA2F7;">      authorize</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> (</span><span style="color:#E0AF68;">info</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span></span>
<span class="line"><span style="color:#C0CAF5;">        validUsers</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">find</span><span style="color:#9ABDF5;">((</span><span style="color:#E0AF68;">user</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#C0CAF5;"> user</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">name</span><span style="color:#BB9AF7;"> ===</span><span style="color:#C0CAF5;"> info</span><span style="color:#89DDFF;">?.</span><span style="color:#7DCFFF;">name</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> ||</span><span style="color:#FF9E64;"> null</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">    })</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">  callbacks</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#7AA2F7;">    session</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> (</span><span style="color:#89DDFF;">{</span><span style="color:#E0AF68;"> session</span><span style="color:#89DDFF;">,</span><span style="color:#E0AF68;"> token</span><span style="color:#89DDFF;"> }</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> ({</span></span>
<span class="line"><span style="color:#F7768E;font-weight:bold;">      ...</span><span style="color:#C0CAF5;">session</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#41A6B5;">      user</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> validUsers</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">find</span><span style="color:#9ABDF5;">((</span><span style="color:#E0AF68;">user</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#C0CAF5;"> user</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">id</span><span style="color:#BB9AF7;"> ===</span><span style="color:#C0CAF5;"> token</span><span style="color:#89DDFF;">?.</span><span style="color:#7DCFFF;">sub</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">    })</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#9D7CD8;font-style:italic;"> const</span><span style="color:#BB9AF7;"> handle</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> sequence</span><span style="color:#9ABDF5;">(</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  // 1. Handle authentication</span></span>
<span class="line"><span style="color:#C0CAF5;">  handleAuth</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  // 2. Handle remult server side</span></span>
<span class="line"><span style="color:#C0CAF5;">  handleRemult</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">)</span></span></code></pre></div></div></div><p>This (very) simplistic approach use Auth.js <a href="https://next-auth.js.org/providers/credentials" target="_blank" rel="noreferrer">Credentials Provider</a> to authorize users by looking up the user&#39;s name in a predefined list of valid users.</p><p>We&#39;ve configured the <code>session</code> <code>callback</code> to include the user info as part of the session data, so that Remult on the frontend will have the authorization info.</p><ol start="4"><li>Finally, add <code>getUser</code> to <code>remultApi</code> to tell remult who is connected. Inside this function, you have access to <code>event</code>, where the session was set by Auth.js before.</li></ol><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-EXc1s" id="tab-62AIj_X" checked><label data-title="src/server/api.ts" for="tab-62AIj_X">src/server/api.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night has-diff vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">remultApi</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult/remult-sveltekit</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">Task</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">../shared/Task</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">TasksController</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">../shared/TasksController</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line diff add"><span style="color:#7DCFFF;">import</span><span style="color:#BB9AF7;"> type</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">UserInfo</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#9D7CD8;font-style:italic;"> const</span><span style="color:#BB9AF7;"> api</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> remultApi</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#73DACA;">  admin</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">  entities</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> [</span><span style="color:#7DCFFF;">Task</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">  controllers</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> [</span><span style="color:#7DCFFF;">TasksController</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#7AA2F7;">  getUser</span><span style="color:#89DDFF;">:</span><span style="color:#9D7CD8;font-style:italic;"> async</span><span style="color:#9ABDF5;"> (</span><span style="color:#E0AF68;">event</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line diff add"><span style="color:#9D7CD8;font-style:italic;">    const</span><span style="color:#BB9AF7;"> auth</span><span style="color:#89DDFF;"> =</span><span style="color:#BB9AF7;font-style:italic;"> await</span><span style="color:#C0CAF5;"> event</span><span style="color:#89DDFF;">?.</span><span style="color:#7DCFFF;">locals</span><span style="color:#89DDFF;">?.</span><span style="color:#7AA2F7;">auth</span><span style="color:#9ABDF5;">() </span></span>
<span class="line diff add"><span style="color:#BB9AF7;font-style:italic;">    return</span><span style="color:#C0CAF5;"> auth</span><span style="color:#89DDFF;">?.</span><span style="color:#7DCFFF;">user</span><span style="color:#89DDFF;"> as</span><span style="color:#C0CAF5;"> UserInfo</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span></code></pre></div></div></div><h3 id="frontend-setup" tabindex="-1">Frontend setup <a class="header-anchor" href="#frontend-setup" aria-label="Permalink to &quot;Frontend setup&quot;">​</a></h3><ol><li>Create a new <code>+layout.server.ts</code> to update <code>remult.user</code></li></ol><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-4ZBSm" id="tab-U-VwRoU" checked><label data-title="src/routes/+layout.server.ts" for="tab-U-VwRoU">src/routes/+layout.server.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">remult</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#BB9AF7;"> type</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">LayoutServerLoad</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">./$types</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">redirect</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">@sveltejs/kit</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// will protect every route in the app</span></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#9D7CD8;font-style:italic;"> const</span><span style="color:#BB9AF7;"> load</span><span style="color:#89DDFF;"> =</span><span style="color:#9ABDF5;"> (</span><span style="color:#9D7CD8;font-style:italic;">async</span><span style="color:#9ABDF5;"> ()</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#BB9AF7;">  if</span><span style="color:#9ABDF5;"> (</span><span style="color:#BB9AF7;">!</span><span style="color:#C0CAF5;">remult</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">authenticated</span><span style="color:#9ABDF5;">()) {</span></span>
<span class="line"><span style="color:#BB9AF7;">    throw</span><span style="color:#7AA2F7;"> redirect</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">303</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">/auth/signin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#BB9AF7;font-style:italic;">  return</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#73DACA;">    user</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> remult</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">user</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span><span style="color:#BB9AF7;"> satisfies</span><span style="color:#C0CAF5;"> LayoutServerLoad</span></span></code></pre></div></div></div><ol start="2"><li>In our front-end (<code>+layout.svelte</code>), update the user globally.</li></ol><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-bgRC9" id="tab-n_iIcOs" checked><label data-title="src/routes/+layout.ts" for="tab-n_iIcOs">src/routes/+layout.ts</label></div><div class="blocks"><div class="language-svelte active"><button title="Copy Code" class="copy"></button><span class="lang">svelte</span><pre class="shiki tokyo-night has-diff vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BA3C97;">&lt;</span><span style="color:#F7768E;">script</span><span style="color:#BB9AF7;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line diff add"><span style="color:#7DCFFF;">  import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">remult</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#7DCFFF;">  import</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">../app.css</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BB9AF7;">  interface</span><span style="color:#C0CAF5;"> Props </span><span style="color:#9ABDF5;">{</span></span>
<span class="line"><span style="color:#73DACA;">    data</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> import</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">./$types</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">)</span><span style="color:#C0CAF5;">.LayoutData</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#73DACA;">    children</span><span style="color:#89DDFF;">?:</span><span style="color:#89DDFF;"> import</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">svelte</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">)</span><span style="color:#C0CAF5;">.Snippet</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">  let</span><span style="color:#89DDFF;"> {</span><span style="color:#BB9AF7;"> data</span><span style="color:#89DDFF;">,</span><span style="color:#BB9AF7;"> children</span><span style="color:#89DDFF;"> }:</span><span style="color:#C0CAF5;"> Props </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> $</span><span style="color:#7AA2F7;">props</span><span style="color:#9ABDF5;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#89DDFF;">  $</span><span style="color:#7AA2F7;">effect</span><span style="color:#9ABDF5;">(()</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line diff add"><span style="color:#C0CAF5;">    remult</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">user</span><span style="color:#89DDFF;"> =</span><span style="color:#C0CAF5;"> data</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">user</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#9ABDF5;">  })</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BA3C97;">&lt;/</span><span style="color:#F7768E;">script</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BA3C97;">&lt;</span><span style="color:#BB9AF7;">svelte</span><span style="color:#89DDFF;">:</span><span style="color:#F7768E;">head</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#BA3C97;">  &lt;</span><span style="color:#F7768E;">title</span><span style="color:#BA3C97;">&gt;</span><span style="color:#A9B1D6;">Remult+Sveltekit Todo App</span><span style="color:#BA3C97;">&lt;/</span><span style="color:#F7768E;">title</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#BA3C97;">&lt;/</span><span style="color:#BB9AF7;">svelte</span><span style="color:#89DDFF;">:</span><span style="color:#F7768E;">head</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ABDF5;">{</span><span style="color:#89DDFF;">@render</span><span style="color:#7AA2F7;"> children</span><span style="color:#89DDFF;">?.</span><span style="color:#9ABDF5;">()}</span></span></code></pre></div></div></div><p>The todo app now supports signing in and out, with <strong>all access restricted to signed in users only</strong>.</p><h2 id="role-based-authorization" tabindex="-1">Role-based Authorization <a class="header-anchor" href="#role-based-authorization" aria-label="Permalink to &quot;Role-based Authorization&quot;">​</a></h2><p>Usually, not all application users have the same privileges. You will notice that our <code>UserInfo</code> contains a <code>roles</code> array. Information contained in this array can be used to enforce role-based authorization.</p><p>For our todo app we need to enforce the following authorization rules:</p><ul><li>All signed in users can see the list of tasks.</li><li>All signed in users can set specific tasks as <code>completed</code>.</li><li>Only users belonging to the <code>admin</code> role can create, delete or edit the titles of tasks.</li></ul><ol><li>Modify the highlighted lines in the <code>Task</code> entity class to enforce the three authorization rules above.</li></ol><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-Ki1t_" id="tab-UIrZiBt" checked><label data-title="src/shared/Task.ts" for="tab-UIrZiBt">src/shared/Task.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">Allow</span><span style="color:#89DDFF;">,</span><span style="color:#0DB9D7;"> Entity</span><span style="color:#89DDFF;">,</span><span style="color:#0DB9D7;"> Fields</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">Entity</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C0CAF5;">Task</span><span style="color:#89DDFF;">&gt;</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">tasks</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#73DACA;">  allowApiCrud</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> Allow</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">authenticated</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">  allowApiInsert</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">admin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">  allowApiDelete</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">admin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#BB9AF7;"> class</span><span style="color:#C0CAF5;"> Task</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">id</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#73DACA;">  id</span><span style="color:#89DDFF;">!:</span><span style="color:#0DB9D7;"> string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">string</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C0CAF5;">Task</span><span style="color:#89DDFF;">&gt;</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#7AA2F7;">    validate</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> (</span><span style="color:#E0AF68;">task</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#BB9AF7;">      if</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">task</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">title</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">length</span><span style="color:#BB9AF7;"> &lt;</span><span style="color:#FF9E64;"> 3</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#BB9AF7;">        throw</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">The title must be at least 3 characters long</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#9ABDF5;">    }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">    allowApiUpdate</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">admin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">  })</span></span>
<span class="line"><span style="color:#73DACA;">  title</span><span style="color:#89DDFF;">:</span><span style="color:#0DB9D7;"> string</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">boolean</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#73DACA;">  completed</span><span style="color:#89DDFF;">:</span><span style="color:#0DB9D7;"> boolean</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9E64;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">createdAt</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#73DACA;">  completedAt</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> Date</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> Date</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div></div></div><p>In our list of users - <code>usersDB</code>; we have defined two users - Jane and Steve; with Jane being assigned an <code>admin</code> role.</p><p><strong>Sign in to the app alternating between <em>&quot;Jane&quot;</em> and <em>&quot;Steve&quot;</em> to test that the actions restricted to <code>admin</code> users are not allowed. 🔒</strong></p><h2 id="role-based-authorization-on-the-frontend" tabindex="-1">Role-based Authorization on the Frontend <a class="header-anchor" href="#role-based-authorization-on-the-frontend" aria-label="Permalink to &quot;Role-based Authorization on the Frontend&quot;">​</a></h2><p>From a user experience perspective it only makes sense that users that can&#39;t add or delete, would not see these buttons.</p><p>Let&#39;s reuse the same definitions on the Frontend.</p><p>We&#39;ll use the entity&#39;s metadata to only show the form if the user is allowed to insert</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-K8z7Q" id="tab-U-GwUd8" checked><label data-title="src/routes/+page.svelte" for="tab-U-GwUd8">src/routes/+page.svelte</label></div><div class="blocks"><div class="language-svelte active"><button title="Copy Code" class="copy"></button><span class="lang">svelte</span><pre class="shiki tokyo-night has-diff vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#BA3C97;">&lt;</span><span style="color:#F7768E;">main</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line diff add"><span style="color:#9ABDF5;">  {</span><span style="color:#89DDFF;">#</span><span style="color:#BB9AF7;">if</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Task</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">metadata</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">apiInsertAllowed</span><span style="color:#9ABDF5;">()}</span></span>
<span class="line"><span style="color:#BA3C97;">    &lt;</span><span style="color:#F7768E;">form</span><span style="color:#BB9AF7;"> onsubmit</span><span style="color:#89DDFF;">=</span><span style="color:#7DCFFF;">{</span><span style="color:#C0CAF5;">addTask</span><span style="color:#7DCFFF;">}</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#BA3C97;">      &lt;</span><span style="color:#F7768E;">input</span><span style="color:#BB9AF7;"> bind</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;">value</span><span style="color:#89DDFF;">=</span><span style="color:#7DCFFF;">{</span><span style="color:#C0CAF5;">newTaskTitle</span><span style="color:#7DCFFF;">}</span><span style="color:#BB9AF7;"> placeholder</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">What needs to be done?</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BA3C97;"> /&gt;</span></span>
<span class="line"><span style="color:#BA3C97;">      &lt;</span><span style="color:#F7768E;">button</span><span style="color:#BA3C97;">&gt;</span><span style="color:#A9B1D6;">Add</span><span style="color:#BA3C97;">&lt;/</span><span style="color:#F7768E;">button</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#BA3C97;">    &lt;/</span><span style="color:#F7768E;">form</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line diff add"><span style="color:#9ABDF5;">  {</span><span style="color:#89DDFF;">/</span><span style="color:#BB9AF7;">if</span><span style="color:#9ABDF5;">}</span></span>
<span class="line"><span style="color:#BA3C97;">&lt;/</span><span style="color:#F7768E;">main</span><span style="color:#BA3C97;">&gt;</span></span></code></pre></div></div></div><p>And let&#39;s do the same for the <code>delete</code> button:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-W0aw1" id="tab-q42LwsR" checked><label data-title="src/routes/+page.svelte" for="tab-q42LwsR">src/routes/+page.svelte</label></div><div class="blocks"><div class="language-svelte active"><button title="Copy Code" class="copy"></button><span class="lang">svelte</span><pre class="shiki tokyo-night has-diff vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BA3C97;">&lt;</span><span style="color:#F7768E;">div</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#BA3C97;">  &lt;</span><span style="color:#F7768E;">input</span></span>
<span class="line"><span style="color:#BB9AF7;">    type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">checkbox</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BB9AF7;">    checked</span><span style="color:#89DDFF;">=</span><span style="color:#7DCFFF;">{</span><span style="color:#C0CAF5;">task</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">completed}</span></span>
<span class="line"><span style="color:#BB9AF7;">    oninput</span><span style="color:#89DDFF;">=</span><span style="color:#7DCFFF;">{</span><span style="color:#9ABDF5;">(</span><span style="color:#E0AF68;">e</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#7AA2F7;"> setCompleted</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">task</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> e</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">currentTarget</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">checked</span><span style="color:#9ABDF5;">)</span><span style="color:#7DCFFF;">}</span></span>
<span class="line"><span style="color:#BA3C97;">  /&gt;</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  &lt;!-- &lt;span&gt;{task.title}&lt;/span&gt; --&gt;</span></span>
<span class="line"><span style="color:#BA3C97;">  &lt;</span><span style="color:#F7768E;">input</span><span style="color:#BB9AF7;"> name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">title</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BB9AF7;"> bind</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;">value</span><span style="color:#89DDFF;">=</span><span style="color:#7DCFFF;">{</span><span style="color:#C0CAF5;">task</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">title}</span><span style="color:#BA3C97;"> /&gt;</span></span>
<span class="line"><span style="color:#BA3C97;">  &lt;</span><span style="color:#F7768E;">button</span><span style="color:#BB9AF7;"> onclick</span><span style="color:#89DDFF;">=</span><span style="color:#7DCFFF;">{</span><span style="color:#9ABDF5;">(</span><span style="color:#E0AF68;">e</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#7AA2F7;"> saveTask</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">e</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> task</span><span style="color:#9ABDF5;">)</span><span style="color:#7DCFFF;">}</span><span style="color:#BA3C97;">&gt;</span><span style="color:#A9B1D6;">Save</span><span style="color:#BA3C97;">&lt;/</span><span style="color:#F7768E;">button</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line diff add"><span style="color:#9ABDF5;">  {</span><span style="color:#89DDFF;">#</span><span style="color:#BB9AF7;">if</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Task</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">metadata</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">apiDeleteAllowed</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">task</span><span style="color:#9ABDF5;">)}</span></span>
<span class="line"><span style="color:#BA3C97;">    &lt;</span><span style="color:#F7768E;">button</span><span style="color:#BB9AF7;"> onclick</span><span style="color:#89DDFF;">=</span><span style="color:#7DCFFF;">{</span><span style="color:#9ABDF5;">(</span><span style="color:#E0AF68;">e</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#7AA2F7;"> deleteTask</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">e</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> task</span><span style="color:#9ABDF5;">)</span><span style="color:#7DCFFF;">}</span><span style="color:#BA3C97;">&gt;</span><span style="color:#A9B1D6;">Delete</span><span style="color:#BA3C97;">&lt;/</span><span style="color:#F7768E;">button</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line diff add"><span style="color:#9ABDF5;">  {</span><span style="color:#89DDFF;">/</span><span style="color:#BB9AF7;">if</span><span style="color:#9ABDF5;">}</span></span>
<span class="line"><span style="color:#BA3C97;">&lt;/</span><span style="color:#F7768E;">div</span><span style="color:#BA3C97;">&gt;</span></span></code></pre></div></div></div><p>This way we can keep the UI consistent with the <code>api</code>&#39;s Authorization rules</p><ul><li>Note We send the <code>task</code> to the <code>apiDeleteAllowed</code> method, because the <code>apiDeleteAllowed</code> option, can be sophisticated and can also be based on the specific item&#39;s values.</li></ul>`,52)]))}const d=a(e,[["render",p]]);export{D as __pageData,d as default};
