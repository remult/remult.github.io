import{_ as e,c as t,o as a,a5 as o}from"./chunks/framework.C7bC4sbb.js";const m=JSON.parse('{"title":"Authentication and Authorization","description":"","frontmatter":{"type":"lesson","title":"Authentication and Authorization","template":"after-backend-methods","focus":"/shared/Task.ts"},"headers":[],"relativePath":"interactive/src/content/tutorial/1-basics/7-auth/1-introduction/content.md","filePath":"interactive/src/content/tutorial/1-basics/7-auth/1-introduction/content.md","lastUpdated":1723807660000}'),s={name:"interactive/src/content/tutorial/1-basics/7-auth/1-introduction/content.md"},n=o(`<h1 id="authentication-and-authorization" tabindex="-1">Authentication and Authorization <a class="header-anchor" href="#authentication-and-authorization" aria-label="Permalink to &quot;Authentication and Authorization&quot;">​</a></h1><p>Our todo app is nearly functionally complete, but it still doesn&#39;t fulfill a very basic requirement - that users should log in before they can view, create, or modify tasks.</p><p>Remult provides a flexible mechanism that enables placing <strong>code-based authorization rules</strong> at various levels of the application&#39;s API. To maintain high code cohesion, <strong>entity and field-level authorization code should be placed in entity classes</strong>.</p><p><strong>Remult is completely unopinionated when it comes to user authentication.</strong> You are free to use any kind of authentication mechanism and are only required to provide Remult with an object which implements the Remult <code>UserInfo</code> interface.</p><p>In this tutorial, we&#39;ll use <code>Express</code>&#39;s <a href="https://expressjs.com/en/resources/middleware/cookie-session.html" target="_blank" rel="noreferrer">cookie-session</a> middleware to store an authenticated user&#39;s session within a cookie. The <code>user</code> property of the session will be set by the API server upon a successful simplistic sign-in (based on username without password).</p><h2 id="tasks-crud-requires-sign-in" tabindex="-1">Tasks CRUD Requires Sign-in <a class="header-anchor" href="#tasks-crud-requires-sign-in" aria-label="Permalink to &quot;Tasks CRUD Requires Sign-in&quot;">​</a></h2><p>This rule is implemented within the <code>Task</code> <code>@Entity</code> decorator by modifying the value of the <code>allowApiCrud</code> property. This property can be set to a function that accepts a <code>Remult</code> argument and returns a <code>boolean</code> value. Let&#39;s use the <code>Allow.authenticated</code> function from Remult.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">Entity</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;tasks&quot;</span><span style="color:#D4D4D4;">, {</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">  allowApiCrud:</span><span style="color:#9CDCFE;"> remult</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">authenticated</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre></div><h3 id="code-explanation" tabindex="-1">Code Explanation <a class="header-anchor" href="#code-explanation" aria-label="Permalink to &quot;Code Explanation&quot;">​</a></h3><ul><li>We updated the <code>allowApiCrud</code> property in the <code>Task</code> entity to use <code>remult.authenticated</code>, which ensures that CRUD operations on tasks require an authenticated user.</li></ul><h2 id="try-it-out" tabindex="-1">Try It Out <a class="header-anchor" href="#try-it-out" aria-label="Permalink to &quot;Try It Out&quot;">​</a></h2><p>Try it out and see that once you make this change, no data will appear below since you are not signed in, and therefore not authenticated.</p><h3 id="authorized-server-side-code-can-still-modify-tasks" tabindex="-1">Authorized Server-side Code Can Still Modify Tasks <a class="header-anchor" href="#authorized-server-side-code-can-still-modify-tasks" aria-label="Permalink to &quot;Authorized Server-side Code Can Still Modify Tasks&quot;">​</a></h3><p>Although client CRUD requests to <code>tasks</code> API endpoints now require a signed-in user, the API endpoint created for our <code>setAllCompleted</code> server function remains available to unauthenticated requests. Since the <code>allowApiCrud</code> rule we implemented does not affect the server-side code&#39;s ability to use the <code>Task</code> entity class for performing database CRUD operations, <strong>the <code>setAllCompleted</code> function still works as before</strong>.</p><p>To fix this, let&#39;s implement the same rule using the <code>@BackendMethod</code> decorator of the <code>setAllCompleted</code> method of <code>TasksController</code>.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> TasksController</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">  @</span><span style="color:#DCDCAA;">BackendMethod</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">allowed:</span><span style="color:#9CDCFE;"> remult</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">authenticated</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line"><span style="color:#569CD6;">  static</span><span style="color:#569CD6;"> async</span><span style="color:#DCDCAA;"> setAllCompleted</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">completed</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">) {</span></span></code></pre></div><h3 id="code-explanation-1" tabindex="-1">Code Explanation <a class="header-anchor" href="#code-explanation-1" aria-label="Permalink to &quot;Code Explanation&quot;">​</a></h3><ul><li>We updated the <code>allowed</code> property in the <code>@BackendMethod</code> decorator to use <code>remult.authenticated</code>, ensuring that the <code>setAllCompleted</code> function requires an authenticated user to execute.</li></ul>`,18),i=[n];function l(r,c,d,p,u,h){return a(),t("div",null,i)}const D=e(s,[["render",l]]);export{m as __pageData,D as default};
