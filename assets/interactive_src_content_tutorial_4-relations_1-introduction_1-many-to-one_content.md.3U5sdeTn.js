import{_ as e,c as a,o as t,a5 as n}from"./chunks/framework.C7bC4sbb.js";const s="/assets/relations.vfVT13Nt.png",D=JSON.parse('{"title":"Many to One","description":"","frontmatter":{"type":"lesson","title":"Many to One","template":"relations","focus":"/shared/Order.ts"},"headers":[],"relativePath":"interactive/src/content/tutorial/4-relations/1-introduction/1-many-to-one/content.md","filePath":"interactive/src/content/tutorial/4-relations/1-introduction/1-many-to-one/content.md","lastUpdated":1729692427000}'),o={name:"interactive/src/content/tutorial/4-relations/1-introduction/1-many-to-one/content.md"},l=n('<h1 id="relations" tabindex="-1">Relations <a class="header-anchor" href="#relations" aria-label="Permalink to &quot;Relations&quot;">​</a></h1><p>In this chapter, we’ll explore how to work with entity relations in Remult using customers and orders as our example.</p><p><img src="'+s+`" alt="Relations"></p><h2 id="many-to-one-relation" tabindex="-1">Many-to-One Relation <a class="header-anchor" href="#many-to-one-relation" aria-label="Permalink to &quot;Many-to-One Relation&quot;">​</a></h2><p>To create a many-to-one relation in Remult, we use the <code>@Relations.toOne</code> decorator. This decorator establishes a connection between the <code>Order</code> entity and the <code>Customer</code> entity, where multiple orders can be associated with a single customer.</p><p>For instance, in our project, the <code>Order</code> entity includes a reference to the <code>Customer</code> entity. The highlighted lines below in <code>Order.ts</code> show how this relation is defined:</p><div class="language-file:/shared/Order.ts"><button title="Copy Code" class="copy"></button><span class="lang">file:/shared/Order.ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line highlighted"><span></span></span></code></pre></div><p>This setup creates a many-to-one relationship where each <code>Order</code> is connected to a <code>Customer</code>.</p><h3 id="seed-data" tabindex="-1">Seed Data <a class="header-anchor" href="#seed-data" aria-label="Permalink to &quot;Seed Data&quot;">​</a></h3><p>In the <code>SeedData</code> file, you can see how this relationship is leveraged. While inserting data into the <code>Order</code> table, the <code>customer</code> field is populated with a customer object that was previously inserted:</p><div class="language-file:/shared/SeedData.ts"><button title="Copy Code" class="copy"></button><span class="lang">file:/shared/SeedData.ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line highlighted"><span></span></span></code></pre></div><p>This snippet shows how orders reference existing customer objects, creating a meaningful connection between the two entities.</p><h3 id="fetching-relational-data" tabindex="-1">Fetching Relational Data <a class="header-anchor" href="#fetching-relational-data" aria-label="Permalink to &quot;Fetching Relational Data&quot;">​</a></h3><p>When querying <code>Order</code> data, we can use the <code>include</code> option to retrieve the associated customer data. By default, relations are not automatically included in queries unless explicitly requested.</p><p>Here’s how to include the <code>Customer</code> info when fetching orders:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> orders</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#DCDCAA;"> repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Order</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">({</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">  include:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">    customer:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">,</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre></div><p>This will return the <code>Order</code> data along with the related <code>Customer</code> data. If you set the <code>include</code> value to <code>false</code>, the <code>customer</code> field will be <code>undefined</code> in the result.</p><p>You can experiment by toggling the <code>include</code> value between <code>true</code> and <code>false</code> to observe how the results change.</p><h3 id="always-including-a-relation" tabindex="-1">Always Including a Relation <a class="header-anchor" href="#always-including-a-relation" aria-label="Permalink to &quot;Always Including a Relation&quot;">​</a></h3><p>If you want the related <code>Customer</code> data to be automatically included in every query, you can set the <code>defaultIncluded</code> option when defining the relation. This ensures the relation is always loaded unless explicitly excluded:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#9CDCFE;">Relations</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">toOne</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> Customer</span><span style="color:#D4D4D4;">, {</span></span>
<span class="line"><span style="color:#9CDCFE;">  defaultIncluded:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"><span style="color:#9CDCFE;">customer</span><span style="color:#D4D4D4;">?: </span><span style="color:#9CDCFE;">Customer</span></span></code></pre></div><p>This setting saves you from having to manually include the relation in each query, ensuring the related data is always available when you need it.</p><p>By using relations effectively, you can create more sophisticated and connected data models, enhancing the power and flexibility of your applications built with Remult.</p><p>Here’s a polished version of the paragraph:</p><h3 id="relations-in-remult-admin" tabindex="-1">Relations in Remult Admin <a class="header-anchor" href="#relations-in-remult-admin" aria-label="Permalink to &quot;Relations in Remult Admin&quot;">​</a></h3><p>Relations are seamlessly integrated into the <a href="https://remult.dev/docs/admin-ui" target="_blank" rel="noreferrer">Remult Admin UI</a>. To explore how relations are displayed, simply click the &quot;Remult Admin UI&quot; link at the bottom left of the interface.</p>`,26),i=[l];function r(c,d,p,h,u,y){return t(),a("div",null,i)}const g=e(o,[["render",r]]);export{D as __pageData,g as default};
