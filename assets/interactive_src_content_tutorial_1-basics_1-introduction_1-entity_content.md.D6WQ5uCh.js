import{_ as s,c as e,o as n,a5 as a}from"./chunks/framework.C7bC4sbb.js";const C=JSON.parse('{"title":"Entity","description":"","frontmatter":{"type":"lesson","title":"Entity","focus":"/shared/Task.ts","template":"before-entity"},"headers":[],"relativePath":"interactive/src/content/tutorial/1-basics/1-introduction/1-entity/content.md","filePath":"interactive/src/content/tutorial/1-basics/1-introduction/1-entity/content.md","lastUpdated":1723798349000}'),t={name:"interactive/src/content/tutorial/1-basics/1-introduction/1-entity/content.md"},o=a(`<h1 id="the-entity" tabindex="-1">The Entity <a class="header-anchor" href="#the-entity" aria-label="Permalink to &quot;The Entity&quot;">​</a></h1><p>In Remult, the core element is an <code>entity</code>. An entity represents a business object, such as an order or customer. In our tutorial, we&#39;ll use a <code>Task</code> entity for our todo application.</p><p>Here&#39;s the code for the entity we&#39;ll use:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Entity</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Fields</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult&#39;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">Entity</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;tasks&#39;</span><span style="color:#D4D4D4;">, {</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">  allowApiCrud:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">,</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">})</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> Task</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">  @</span><span style="color:#9CDCFE;">Fields</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">uuid</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#9CDCFE;">  id</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;&#39;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#D4D4D4;">  @</span><span style="color:#9CDCFE;">Fields</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">string</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#9CDCFE;">  title</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;&#39;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#D4D4D4;">  @</span><span style="color:#9CDCFE;">Fields</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">boolean</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#9CDCFE;">  completed</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#D4D4D4;">  @</span><span style="color:#9CDCFE;">Fields</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">createdAt</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#9CDCFE;">  createdAt</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">Date</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><h3 id="code-explanation" tabindex="-1">Code Explanation <a class="header-anchor" href="#code-explanation" aria-label="Permalink to &quot;Code Explanation&quot;">​</a></h3><ul><li><code>@Entity(&#39;tasks&#39;, { allowApiCrud: true })</code> defines the <code>Task</code> entity and configures it to allow all CRUD operations - later we&#39;ll restrict that using authorization.</li><li><code>@Fields.uuid()</code> generates a unique ID for each task.</li><li><code>@Fields.string()</code> and <code>@Fields.boolean()</code> define the <code>title</code> and <code>completed</code> fields, respectively.</li><li><code>@Fields.createdAt()</code> automatically sets the creation date.</li></ul><p>This entity will be used to define the database, API, frontend query language, validation, authorization, and any other definition that revolves around the <code>task</code>.</p><p>We&#39;ve placed the entity&#39;s source code in the <code>shared</code> folder to indicate that it&#39;s shared between the frontend and the backend.</p>`,8),l=[o];function p(c,i,r,d,D,y){return n(),e("div",null,l)}const u=s(t,[["render",p]]);export{C as __pageData,u as default};
