import{_ as s,c as a,o as l,a5 as e}from"./chunks/framework.QXCuR9m2.js";const u=JSON.parse('{"title":"Validation","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/sveltekit/validation.md","filePath":"tutorials/sveltekit/validation.md","lastUpdated":1699602482000}'),n={name:"tutorials/sveltekit/validation.md"},o=e(`<h1 id="validation" tabindex="-1">Validation <a class="header-anchor" href="#validation" aria-label="Permalink to &quot;Validation&quot;">​</a></h1><p>Validating user input is usually required both on the client-side and on the server-side, often causing a violation of the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_blank" rel="noreferrer">DRY</a> design principle. <strong>With Remult, validation code can be placed within the entity class, and Remult will run the validation logic on both the frontend and the relevant API requests.</strong></p><div class="warning custom-block"><p class="custom-block-title">Handling validation errors</p><p>When a validation error occurs, Remult will throw an exception.</p><p>In this tutorial, we will catch these exceptions, and alert the user.</p></div><h2 id="validate-the-title-field" tabindex="-1">Validate the Title Field <a class="header-anchor" href="#validate-the-title-field" aria-label="Permalink to &quot;Validate the Title Field&quot;">​</a></h2><p>Task titles are required. Let&#39;s add a validity check for this rule.</p><ol><li>In the <code>Task</code> entity class, modify the <code>Fields.string</code> decorator for the <code>title</code> field to include an object literal argument and set the object&#39;s <code>validate</code> property to <code>Validators.required</code>.</li></ol><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-f5abm" id="tab-vlAU2co" checked><label for="tab-vlAU2co">src/shared/Task.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Validators</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#9CDCFE;">Fields</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">string</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  validate:</span><span style="color:#9CDCFE;"> Validators</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">required</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"><span style="color:#C8C8C8;">title</span><span style="color:#D4D4D4;">: </span><span style="color:#9CDCFE;">string</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">;</span></span></code></pre></div></div></div><ol start="2"><li>In <code>+page.svelte</code>, sorround the <code>addTask</code> in a <code>try-catch</code> block to capture the error:</li></ol><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-7ceqK" id="tab-NBn4VbB" checked><label for="tab-NBn4VbB">src/routes/+page.svelte</label></div><div class="blocks"><div class="language-svelte active"><button title="Copy Code" class="copy"></button><span class="lang">svelte</span><pre class="shiki dark-plus has-diff vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">let newTaskTitle = &#39;&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">const addTask = async () =&gt; </span><span style="color:#569CD6;">{</span></span>
<span class="line diff add"><span style="color:#C586C0;">  try</span><span style="color:#D4D4D4;"> { </span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> newTask</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> remult</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">insert</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">title:</span><span style="color:#9CDCFE;"> newTaskTitle</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line"><span style="color:#9CDCFE;">    tasks</span><span style="color:#D4D4D4;"> = [...</span><span style="color:#9CDCFE;">tasks</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">newTask</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#9CDCFE;">    newTaskTitle</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;&#39;</span></span>
<span class="line diff add"><span style="color:#D4D4D4;">  } </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">) { </span></span>
<span class="line diff add"><span style="color:#DCDCAA;">    alert</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">error</span><span style="color:#C586C0;"> as</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> }).</span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">) </span></span>
<span class="line diff add"><span style="color:#D4D4D4;">  } </span></span>
<span class="line"><span style="color:#569CD6;">}</span></span></code></pre></div></div></div><p>After the browser is refreshed, try creating a new task or saving an existing one with an empty title - the &quot;<strong>Title: Should not be empty</strong>&quot; error message is displayed.</p><p>Sorround all the other functions in <code>try-catch</code> in a similar manner and notify the user accordingly.</p><h3 id="implicit-server-side-validation" tabindex="-1">Implicit server-side validation <a class="header-anchor" href="#implicit-server-side-validation" aria-label="Permalink to &quot;Implicit server-side validation&quot;">​</a></h3><p>The validation code we&#39;ve added is called by Remult on the server-side to validate any API calls attempting to modify the <code>title</code> field.</p><p>Try making the following <code>POST</code> http request to the <code>http://localhost:5173/api/tasks</code> endpoint, providing an invalid title.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">curl</span><span style="color:#569CD6;"> -i</span><span style="color:#CE9178;"> http://localhost:5173/api/tasks</span><span style="color:#569CD6;"> -d</span><span style="color:#CE9178;"> &quot;{</span><span style="color:#D7BA7D;">\\&quot;</span><span style="color:#CE9178;">title</span><span style="color:#D7BA7D;">\\&quot;</span><span style="color:#CE9178;">: </span><span style="color:#D7BA7D;">\\&quot;\\&quot;</span><span style="color:#CE9178;">}&quot;</span><span style="color:#569CD6;"> -H</span><span style="color:#CE9178;"> &quot;Content-Type: application/json&quot;</span></span></code></pre></div><p>A HTTP <strong>400 Bad Request</strong> error is returned and the validation error text is included in the body:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#C8C8C8;">  modelState</span><span style="color:#D4D4D4;">: { </span><span style="color:#C8C8C8;">title</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;Should not be empty&#39;</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#C8C8C8;">  message</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;Title: Should not be empty&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You should probably update all your code to handle these errors gracefully with <code>try-catch</code> blocks.</p></div><h2 id="custom-validation" tabindex="-1">Custom Validation <a class="header-anchor" href="#custom-validation" aria-label="Permalink to &quot;Custom Validation&quot;">​</a></h2><p>Remult accords you the ability to easly create your own validation rules.</p><p>The <code>validate</code> property allows an arrow function which accepts an instance of the entity to be validated. This function will be called to validate input on both front-end and back-end.</p><p>Try something like this and see what happens:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-TPh8A" id="tab-XpUlfI5" checked><label for="tab-XpUlfI5">src/shared/Task.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#9CDCFE;">Fields</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">string</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Task</span><span style="color:#D4D4D4;">&gt;({</span></span>
<span class="line"><span style="color:#DCDCAA;">  validate</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">title</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">throw</span><span style="color:#CE9178;"> &quot;The title must be at least 3 characters long&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"><span style="color:#9CDCFE;">title</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;&quot;</span></span></code></pre></div></div></div>`,23),t=[o];function p(c,i,r,d,D,y){return l(),a("div",null,t)}const h=s(n,[["render",p]]);export{u as __pageData,h as default};
