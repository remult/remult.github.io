import{_ as s,c as a,o as e,a5 as n}from"./chunks/framework.C7bC4sbb.js";const C=JSON.parse('{"title":"Backend Methods","description":"","frontmatter":{},"headers":[],"relativePath":"docs/backendMethods.md","filePath":"docs/backendMethods.md","lastUpdated":1714396568000}'),o={name:"docs/backendMethods.md"},t=n(`<h1 id="backend-methods" tabindex="-1">Backend Methods <a class="header-anchor" href="#backend-methods" aria-label="Permalink to &quot;Backend Methods&quot;">​</a></h1><p>Backend methods run on the backend and are used to improve performance, execute server-only code (e.g., sending emails), or perform operations not accessible through the API.</p><h2 id="static-backend-methods" tabindex="-1">Static Backend Methods <a class="header-anchor" href="#static-backend-methods" aria-label="Permalink to &quot;Static Backend Methods&quot;">​</a></h2><p>Static backend methods represent the most straightforward type, transmitting their parameters to the backend and delivering their outcome to the frontend.</p><ol><li><strong>Define the Backend Method:</strong></li></ol><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">BackendMethod</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;./Task&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> TasksController</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">  /**</span></span>
<span class="line"><span style="color:#6A9955;">   * Sets the completion status of all tasks.</span></span>
<span class="line"><span style="color:#6A9955;">   * </span><span style="color:#569CD6;">@param</span><span style="color:#4EC9B0;"> {boolean}</span><span style="color:#9CDCFE;"> completed</span><span style="color:#6A9955;"> - The completion status to set for all tasks.</span></span>
<span class="line"><span style="color:#6A9955;">   */</span></span>
<span class="line"><span style="color:#D4D4D4;">  @</span><span style="color:#DCDCAA;">BackendMethod</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">allowed:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line"><span style="color:#569CD6;">  static</span><span style="color:#569CD6;"> async</span><span style="color:#DCDCAA;"> setAll</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">completed</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> taskRepo</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> task</span><span style="color:#569CD6;"> of</span><span style="color:#C586C0;"> await</span><span style="color:#9CDCFE;"> taskRepo</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#C586C0;">      await</span><span style="color:#9CDCFE;"> taskRepo</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">save</span><span style="color:#D4D4D4;">({ ...</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">completed</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><p>Each controller can house one or more backend methods, each serving distinct purposes tailored to your application&#39;s needs. In the provided example, the <code>TasksController</code> class contains a single backend method named <code>setAll</code>, responsible for setting the completion status of all tasks.</p><p>The method name, such as <code>setAll</code>, serves as the URL for the corresponding REST endpoint on the backend server. It&#39;s worth noting that you can configure a prefix for these endpoints using the <code>apiPrefix</code> option, providing flexibility in structuring your backend API routes.</p><p>The allowed: true parameter signifies that the backend method can be invoked by anyone. Alternatively, you can customize the authorization settings for finer control over who can access the method.</p><p>For instance, setting allow: Allow.authenticated restricts access to authenticated users only, ensuring that only logged-in users can utilize the method.</p><p>Similarly, specifying allow: &#39;admin&#39; limits access to users with administrative privileges, granting access exclusively to administrators.</p><p>These options offer granular control over authorization, allowing you to tailor access permissions based on your application&#39;s specific requirements and security considerations.</p><ol start="2"><li><strong>Register the Controller:</strong></li></ol><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Register TasksController in the controllers array of the remultExpress options</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> api</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">remultExpress</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  entities:</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#9CDCFE;">  controllers:</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">TasksController</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre></div><ol start="3"><li><strong>Call from the Frontend:</strong></li></ol><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> TasksController</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setAll</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">)</span></span></code></pre></div><p>This example demonstrates how to define and use a static backend method, <code>setAll</code>, within the <code>TasksController</code> class. When called from the frontend, this method sets the completion status of all tasks to the specified value (<code>true</code> in this case). The method leverages Remult&#39;s <code>BackendMethod</code> decorator to handle the communication between the frontend and backend seamlessly.</p>`,17),l=[t];function p(c,r,i,d,D,y){return e(),a("div",null,l)}const m=s(o,[["render",p]]);export{C as __pageData,m as default};
