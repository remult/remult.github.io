import{_ as e,c as a,o as s,a5 as n}from"./chunks/framework.QXCuR9m2.js";const d=JSON.parse('{"title":"LiveQueryChangeInfo","description":"","frontmatter":{},"headers":[],"relativePath":"docs/ref_livequerychangeinfo.md","filePath":"docs/ref_livequerychangeinfo.md","lastUpdated":1711389142000}'),t={name:"docs/ref_livequerychangeinfo.md"},o=n(`<h1 id="livequerychangeinfo" tabindex="-1">LiveQueryChangeInfo <a class="header-anchor" href="#livequerychangeinfo" aria-label="Permalink to &quot;LiveQueryChangeInfo&quot;">​</a></h1><p>The <code>LiveQueryChangeInfo</code> interface represents information about changes in the results of a live query.</p><h2 id="items" tabindex="-1">items <a class="header-anchor" href="#items" aria-label="Permalink to &quot;items&quot;">​</a></h2><p>The updated array of result items.</p><h2 id="changes" tabindex="-1">changes <a class="header-anchor" href="#changes" aria-label="Permalink to &quot;changes&quot;">​</a></h2><p>The changes received in the specific message. The change types can be &quot;all&quot; (replace all), &quot;add&quot;, &quot;replace&quot;, or &quot;remove&quot;.</p><h2 id="applychanges" tabindex="-1">applyChanges <a class="header-anchor" href="#applychanges" aria-label="Permalink to &quot;applyChanges&quot;">​</a></h2><p>Applies the changes received in the message to an existing array. This method is particularly useful with React to update the component&#39;s state based on the live query changes.</p><h4 id="returns" tabindex="-1">returns: <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;returns:&quot;">​</a></h4><p>The updated array of result items after applying the changes.</p><h4 id="example" tabindex="-1">example: <a class="header-anchor" href="#example" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Using applyChanges in a React component with useEffect hook</span></span>
<span class="line"><span style="color:#DCDCAA;">useEffect</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> taskRepo</span></span>
<span class="line"><span style="color:#D4D4D4;">    .</span><span style="color:#DCDCAA;">liveQuery</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">      limit:</span><span style="color:#B5CEA8;"> 20</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">      orderBy:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">createdAt:</span><span style="color:#CE9178;"> &#39;asc&#39;</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#6A9955;">      //where: { completed: true },</span></span>
<span class="line"><span style="color:#D4D4D4;">    })</span></span>
<span class="line"><span style="color:#D4D4D4;">    .</span><span style="color:#DCDCAA;">subscribe</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">info</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#DCDCAA;"> setTasks</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">info</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">applyChanges</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;">}, []);</span></span></code></pre></div><p>Arguments:</p><ul><li><strong>prevState</strong> - The previous state of the array of result items.</li></ul>`,14),l=[o];function p(r,c,i,h,u,y){return s(),a("div",null,l)}const f=e(t,[["render",p]]);export{d as __pageData,f as default};
