import{_ as c,D as e,c as r,I as o,w as n,a5 as p,o as D,j as s,a as l}from"./chunks/framework.QXCuR9m2.js";const S=JSON.parse('{"title":"Backend only code","description":"","frontmatter":{},"headers":[],"relativePath":"docs/using-server-only-packages.md","filePath":"docs/using-server-only-packages.md","lastUpdated":1708339588000}'),i={name:"docs/using-server-only-packages.md"},y=p(`<h1 id="backend-only-code" tabindex="-1">Backend only code <a class="header-anchor" href="#backend-only-code" aria-label="Permalink to &quot;Backend only code&quot;">​</a></h1><p>One of the main advantages of remult is that you write code once, and it runs both on the server and in the browser.</p><p>However, if you are using a library that only works on the server, the fact that the same code is bundled to the frontend can cause problems. For example, when you build an Angular project, you&#39;ll get <code>Module not found</code> errors.</p><p>This article will walk through such a scenario and how it can be solved.</p><p>For this example, our customer would like us to document each call to the <code>updatePriceOnBackend</code> method in a log file.</p><p>Our first instinct would be to add in the <code>products.controller.ts</code> file an import to <code>fs</code> (Node JS file system component) and write the following code:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line highlighted"><span style="color:#C586C0;">import</span><span style="color:#569CD6;"> *</span><span style="color:#C586C0;"> as</span><span style="color:#9CDCFE;"> fs</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;fs&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">.....</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">BackendMethod</span><span style="color:#D4D4D4;">({</span><span style="color:#9CDCFE;">allowed:</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">})</span></span>
<span class="line"><span style="color:#9CDCFE;">static</span><span style="color:#9CDCFE;"> async</span><span style="color:#DCDCAA;"> updatePriceOnBackend</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">priceToUpdate</span><span style="color:#D4D4D4;">:</span><span style="color:#9CDCFE;">number</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;">?:</span><span style="color:#9CDCFE;">Remult</span><span style="color:#D4D4D4;">){</span></span>
<span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> products</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> remult</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Products</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#C586C0;">  for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> p</span><span style="color:#569CD6;"> of</span><span style="color:#9CDCFE;"> products</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">      p</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">price</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> += </span><span style="color:#9CDCFE;">priceToUpdate</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">      await</span><span style="color:#9CDCFE;"> p</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">save</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">  fs</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">appendFileSync</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;./logs/log.txt&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Date</span><span style="color:#D4D4D4;">() + </span><span style="color:#CE9178;">&quot; &quot;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">&quot; update price</span><span style="color:#D7BA7D;">\\n</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">Error</p><p>As soon as we do that, we&#39;ll get the following errors on the <code>ng-serve</code> terminal</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">ERROR</span><span style="color:#CE9178;"> in</span><span style="color:#CE9178;"> ./src/app/products/products.controller.ts</span></span>
<span class="line"><span style="color:#DCDCAA;">Module</span><span style="color:#CE9178;"> not</span><span style="color:#CE9178;"> found:</span><span style="color:#CE9178;"> Error:</span><span style="color:#CE9178;"> Can&#39;t resolve &#39;fs&#39; in &#39;C:</span><span style="color:#D7BA7D;">\\t</span><span style="color:#CE9178;">ry</span><span style="color:#D7BA7D;">\\t</span><span style="color:#CE9178;">est19</span><span style="color:#D7BA7D;">\\m</span><span style="color:#CE9178;">y-project</span><span style="color:#D7BA7D;">\\s</span><span style="color:#CE9178;">rc</span><span style="color:#D7BA7D;">\\a</span><span style="color:#CE9178;">pp</span><span style="color:#D7BA7D;">\\p</span><span style="color:#CE9178;">roducts&#39;</span></span>
<span class="line"><span style="color:#CE9178;">i ｢wdm｣: Failed to compile.</span></span></code></pre></div></div><p>We get this error because the <code>fs</code> module on which we rely here is only relevant in the remult of a <code>Node JS</code> server and not in the context of the browser.</p><p>There are two ways to handle this:</p><h2 id="solution-1-exclude-from-bundler" tabindex="-1">Solution 1 - exclude from bundler <a class="header-anchor" href="#solution-1-exclude-from-bundler" aria-label="Permalink to &quot;Solution 1 - exclude from bundler&quot;">​</a></h2>`,11),d=s("h3",{id:"option-1-exclude-in-vite-config",tabindex:"-1"},[l("Option 1 - exclude in "),s("code",null,"vite.config"),l(),s("a",{class:"header-anchor",href:"#option-1-exclude-in-vite-config","aria-label":'Permalink to "Option 1 - exclude in `vite.config`"'},"​")],-1),C=s("p",null,[l("Instruct vite to exclude the "),s("code",null,"server-only"),l(" packages from the bundle")],-1),u=s("div",{class:"language-ts"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"ts"),s("pre",{class:"shiki dark-plus has-diff vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#C586C0"}},"import"),s("span",{style:{color:"#D4D4D4"}}," { "),s("span",{style:{color:"#9CDCFE"}},"defineConfig"),s("span",{style:{color:"#D4D4D4"}}," } "),s("span",{style:{color:"#C586C0"}},"from"),s("span",{style:{color:"#CE9178"}}," 'vite'")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#C586C0"}},"import"),s("span",{style:{color:"#9CDCFE"}}," react"),s("span",{style:{color:"#C586C0"}}," from"),s("span",{style:{color:"#CE9178"}}," '@vitejs/plugin-react'")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A9955"}},"// https://vitejs.dev/config/")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#C586C0"}},"export"),s("span",{style:{color:"#C586C0"}}," default"),s("span",{style:{color:"#DCDCAA"}}," defineConfig"),s("span",{style:{color:"#D4D4D4"}},"({")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#9CDCFE"}},"  plugins:"),s("span",{style:{color:"#D4D4D4"}}," ["),s("span",{style:{color:"#DCDCAA"}},"react"),s("span",{style:{color:"#D4D4D4"}},"()],")]),l(`
`),s("span",{class:"line diff add"},[s("span",{style:{color:"#9CDCFE"}},"  build:"),s("span",{style:{color:"#D4D4D4"}}," {    ")]),l(`
`),s("span",{class:"line diff add"},[s("span",{style:{color:"#9CDCFE"}},"    rollupOptions:"),s("span",{style:{color:"#D4D4D4"}}," {      ")]),l(`
`),s("span",{class:"line diff add"},[s("span",{style:{color:"#9CDCFE"}},"      external:"),s("span",{style:{color:"#D4D4D4"}}," ["),s("span",{style:{color:"#CE9178"}},"'fs'"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#CE9178"}},"'nodemailer'"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#CE9178"}},"'node-fetch'"),s("span",{style:{color:"#D4D4D4"}},"], ")]),l(`
`),s("span",{class:"line diff add"},[s("span",{style:{color:"#D4D4D4"}},"    }, ")]),l(`
`),s("span",{class:"line diff add"},[s("span",{style:{color:"#D4D4D4"}},"  }, ")]),l(`
`),s("span",{class:"line diff add"},[s("span",{style:{color:"#9CDCFE"}},"  optimizeDeps:"),s("span",{style:{color:"#D4D4D4"}}," {    ")]),l(`
`),s("span",{class:"line diff add"},[s("span",{style:{color:"#9CDCFE"}},"    exclude:"),s("span",{style:{color:"#D4D4D4"}}," ["),s("span",{style:{color:"#CE9178"}},"'fs'"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#CE9178"}},"'nodemailer'"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#CE9178"}},"'node-fetch'"),s("span",{style:{color:"#D4D4D4"}},"], ")]),l(`
`),s("span",{class:"line diff add"},[s("span",{style:{color:"#D4D4D4"}},"  }, ")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"})")])])])],-1),h=s("h3",{id:"option-2-vite-plugin-stripper",tabindex:"-1"},[l("Option 2 - "),s("code",null,"vite-plugin-stripper"),l(),s("a",{class:"header-anchor",href:"#option-2-vite-plugin-stripper","aria-label":'Permalink to "Option 2 - `vite-plugin-stripper`"'},"​")],-1),f=s("p",null,[s("a",{href:"https://www.kitql.dev/docs/tools/07_vite-plugin-stripper",target:"_blank",rel:"noreferrer"},"vite-plugin-stripper"),l(" is a "),s("code",null,"vite"),l(" plugin that can be used to remove contents of methods with the "),s("code",null,"@BackendMethod"),l(" decorator.")],-1),E=s("div",{class:"language-bash"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"bash"),s("pre",{class:"shiki dark-plus vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#DCDCAA"}},"npm"),s("span",{style:{color:"#CE9178"}}," i"),s("span",{style:{color:"#569CD6"}}," --save-dev"),s("span",{style:{color:"#CE9178"}}," vite-plugin-stripper")])])])],-1),g=s("div",{class:"language-ts"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"ts"),s("pre",{class:"shiki dark-plus has-diff vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#C586C0"}},"import"),s("span",{style:{color:"#D4D4D4"}}," { "),s("span",{style:{color:"#9CDCFE"}},"defineConfig"),s("span",{style:{color:"#D4D4D4"}}," } "),s("span",{style:{color:"#C586C0"}},"from"),s("span",{style:{color:"#CE9178"}}," 'vite'")]),l(`
`),s("span",{class:"line diff add"},[s("span",{style:{color:"#C586C0"}},"import"),s("span",{style:{color:"#D4D4D4"}}," { "),s("span",{style:{color:"#9CDCFE"}},"stripper"),s("span",{style:{color:"#D4D4D4"}}," } "),s("span",{style:{color:"#C586C0"}},"from"),s("span",{style:{color:"#CE9178"}}," 'vite-plugin-stripper'")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#C586C0"}},"export"),s("span",{style:{color:"#C586C0"}}," default"),s("span",{style:{color:"#DCDCAA"}}," defineConfig"),s("span",{style:{color:"#D4D4D4"}},"({")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#9CDCFE"}},"  plugins:"),s("span",{style:{color:"#D4D4D4"}}," [")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#DCDCAA"}},"    react"),s("span",{style:{color:"#D4D4D4"}},"(),")]),l(`
`),s("span",{class:"line diff add"},[s("span",{style:{color:"#DCDCAA"}},"    stripper"),s("span",{style:{color:"#D4D4D4"}},"({ "),s("span",{style:{color:"#9CDCFE"}},"decorators:"),s("span",{style:{color:"#D4D4D4"}}," ["),s("span",{style:{color:"#CE9178"}},"'BackendMethod'"),s("span",{style:{color:"#D4D4D4"}},"] }), ")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"  ],")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"})")])])])],-1),m=s("p",null,[l("Instruct "),s("code",null,"webpack"),l(" not to include the "),s("code",null,"fs"),l(" package in the "),s("code",null,"frontend"),l(" bundle by adding the following JSON to the main section of the project's "),s("code",null,"package.json"),l(" file. "),s("em",null,"package.json")],-1),F=s("div",{class:"language-json"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"json"),s("pre",{class:"shiki dark-plus vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#CE9178"}},'"browser"'),s("span",{style:{color:"#D4D4D4"}},": {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#9CDCFE"}},'   "jsonwebtoken"'),s("span",{style:{color:"#D4D4D4"}},": "),s("span",{style:{color:"#569CD6"}},"false")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")])])])],-1),b=s("ul",null,[s("li",null,"note that you'll need to restart the react/angular dev server.")],-1),v=s("ol",null,[s("li",null,[s("p",null,[l("You'll need to either remove "),s("code",null,"types"),l(" entry in the "),s("code",null,"tsconfig.app.json"),l(" or add the types you need to that types array.")])]),s("li",null,[s("p",null,[l("In "),s("code",null,"angular.json"),l(" you'll need to add an entry called "),s("code",null,"externalDependencies"),l(" to the "),s("code",null,"architect/build/options"),l(" key for your project")]),s("div",{class:"language-json"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"json"),s("pre",{class:"shiki dark-plus vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A9955"}},"// angular.json")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"{")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#9CDCFE"}},'  "$schema"'),s("span",{style:{color:"#D4D4D4"}},": "),s("span",{style:{color:"#CE9178"}},'"./node_modules/@angular/cli/lib/config/schema.json"'),s("span",{style:{color:"#D4D4D4"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#9CDCFE"}},'  "version"'),s("span",{style:{color:"#D4D4D4"}},": "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#9CDCFE"}},'  "newProjectRoot"'),s("span",{style:{color:"#D4D4D4"}},": "),s("span",{style:{color:"#CE9178"}},'"projects"'),s("span",{style:{color:"#D4D4D4"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#9CDCFE"}},'  "projects"'),s("span",{style:{color:"#D4D4D4"}},": {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#9CDCFE"}},'    "remult-angular-todo"'),s("span",{style:{color:"#D4D4D4"}},": {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#9CDCFE"}},'      "projectType"'),s("span",{style:{color:"#D4D4D4"}},": "),s("span",{style:{color:"#CE9178"}},'"application"'),s("span",{style:{color:"#D4D4D4"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#9CDCFE"}},'      "schematics"'),s("span",{style:{color:"#D4D4D4"}},": {},")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#9CDCFE"}},'      "root"'),s("span",{style:{color:"#D4D4D4"}},": "),s("span",{style:{color:"#CE9178"}},'""'),s("span",{style:{color:"#D4D4D4"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#9CDCFE"}},'      "sourceRoot"'),s("span",{style:{color:"#D4D4D4"}},": "),s("span",{style:{color:"#CE9178"}},'"src"'),s("span",{style:{color:"#D4D4D4"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#9CDCFE"}},'      "prefix"'),s("span",{style:{color:"#D4D4D4"}},": "),s("span",{style:{color:"#CE9178"}},'"app"'),s("span",{style:{color:"#D4D4D4"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#9CDCFE"}},'      "architect"'),s("span",{style:{color:"#D4D4D4"}},": {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#9CDCFE"}},'        "build"'),s("span",{style:{color:"#D4D4D4"}},": {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#9CDCFE"}},'          "builder"'),s("span",{style:{color:"#D4D4D4"}},": "),s("span",{style:{color:"#CE9178"}},'"@angular-devkit/build-angular:application"'),s("span",{style:{color:"#D4D4D4"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#9CDCFE"}},'          "options"'),s("span",{style:{color:"#D4D4D4"}},": {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#9CDCFE"}},'            "outputPath"'),s("span",{style:{color:"#D4D4D4"}},": "),s("span",{style:{color:"#CE9178"}},'"dist/remult-angular-todo"'),s("span",{style:{color:"#D4D4D4"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#9CDCFE"}},'            "index"'),s("span",{style:{color:"#D4D4D4"}},": "),s("span",{style:{color:"#CE9178"}},'"src/index.html"'),s("span",{style:{color:"#D4D4D4"}},",")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#9CDCFE"}},'            "browser"'),s("span",{style:{color:"#D4D4D4"}},": "),s("span",{style:{color:"#CE9178"}},'"src/main.ts"'),s("span",{style:{color:"#D4D4D4"}},",")]),l(`
`),s("span",{class:"line highlighted"},[s("span",{style:{color:"#9CDCFE"}},'            "externalDependencies"'),s("span",{style:{color:"#D4D4D4"}},": [")]),l(`
`),s("span",{class:"line highlighted"},[s("span",{style:{color:"#CE9178"}},'              "fs"')]),l(`
`),s("span",{class:"line highlighted"},[s("span",{style:{color:"#D4D4D4"}},"            ],")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#9CDCFE"}},'            "polyfills"'),s("span",{style:{color:"#D4D4D4"}},": [")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#CE9178"}},'              "zone.js"')]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"            ],")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A9955"}},"            //...")])])])])])],-1),w=p(`<h2 id="solution-2-abstract-the-call" tabindex="-1">Solution 2 - abstract the call <a class="header-anchor" href="#solution-2-abstract-the-call" aria-label="Permalink to &quot;Solution 2 - abstract the call&quot;">​</a></h2><p>Abstract the call and separate it to backend only files and <code>inject</code> it only when we are running on the server.</p><p><strong>Step 1</strong>, abstract the call - We&#39;ll remove the import to <code>fs,</code> and instead of calling specific <code>fs</code> methods, we&#39;ll define and call a method <code>writeToLog</code> that describes what we are trying to do:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus has-diff vp-code" tabindex="0"><code><span class="line diff remove"><span style="color:#C586C0;">import</span><span style="color:#569CD6;"> *</span><span style="color:#C586C0;"> as</span><span style="color:#9CDCFE;"> fs</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;fs&#39;</span><span style="color:#D4D4D4;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// We&#39;ll define an abstract \`writeTiLog\` function and use it in our code</span></span>
<span class="line diff add"><span style="color:#9CDCFE;">static</span><span style="color:#C8C8C8;"> writeToLog</span><span style="color:#D4D4D4;">:(</span><span style="color:#9CDCFE;">textToWrite</span><span style="color:#D4D4D4;">:</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">=&gt;void</span><span style="color:#D4D4D4;">; </span></span>
<span class="line"><span style="color:#D4D4D4;">.....</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">BackendMethod</span><span style="color:#D4D4D4;">({</span><span style="color:#9CDCFE;">allowed:</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">})</span></span>
<span class="line"><span style="color:#9CDCFE;">static</span><span style="color:#9CDCFE;"> async</span><span style="color:#DCDCAA;"> updatePriceOnBackend</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">priceToUpdate</span><span style="color:#D4D4D4;">:</span><span style="color:#9CDCFE;">number</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;">?:</span><span style="color:#9CDCFE;">Remult</span><span style="color:#D4D4D4;">){</span></span>
<span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> products</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> remult</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Products</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#C586C0;">  for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> p</span><span style="color:#569CD6;"> of</span><span style="color:#9CDCFE;"> products</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">      p</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">price</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> += </span><span style="color:#9CDCFE;">priceToUpdate</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">      await</span><span style="color:#9CDCFE;"> p</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">save</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line diff remove"><span style="color:#9CDCFE;">  fs</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">appendFileSync</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;./logs/log.txt&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Date</span><span style="color:#D4D4D4;">() + </span><span style="color:#CE9178;">&quot; &quot;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">&quot; update price</span><span style="color:#D7BA7D;">\\n</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">);  </span></span>
<span class="line diff add"><span style="color:#9CDCFE;">  ProductsController</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">writeToLog</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Date</span><span style="color:#D4D4D4;">() + </span><span style="color:#CE9178;">&quot; &quot;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">&quot; update price</span><span style="color:#D7BA7D;">\\n</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">); </span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><p>The method <code>writeToLog</code> that we&#39;ve defined serves as a place holder which we&#39;ll assign to in the remult of the server. It receives one parameter of type <code>string</code> and returns <code>void</code>.</p><p><strong>Step 2</strong>, implement the method: In the <code>/src/app/server</code> folder, we&#39;ll add a file called <code>log-writer.ts</code> with the following code:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#569CD6;"> *</span><span style="color:#C586C0;"> as</span><span style="color:#9CDCFE;"> fs</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;fs&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">ProductsController</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;../products/products.controller&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">ProductsController</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">writeToLog</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">what</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#9CDCFE;"> fs</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">appendFileSync</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;./logs/log.txt&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">what</span><span style="color:#D4D4D4;">);</span></span></code></pre></div><p>Here we set the implementation of the <code>writeToLog</code> method with the actual call to the <code>fs</code> module. This file is intended to only run on the server, so it&#39;ll not present us with any problem.</p><p><strong>Step 3</strong>, load the <code>log-writer.ts</code> file: In the <code>/src/app/server/server-init.ts</code> file, load the <code>log-writer.ts</code> file using an <code>import</code> statement</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#CE9178;"> &#39;../app.module&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line highlighted"><span style="color:#C586C0;">import</span><span style="color:#CE9178;"> &#39;./log-writer&#39;</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">//load the log-writer.ts file</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Pool</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;pg&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">config</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;dotenv&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">PostgresDataProvider</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">PostgresSchemaBuilder</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;@remult/server-postgres&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#569CD6;"> *</span><span style="color:#C586C0;"> as</span><span style="color:#9CDCFE;"> passwordHash</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;password-hash&#39;</span><span style="color:#D4D4D4;">;</span></span></code></pre></div><p>That&#39;s it - it&#39;ll work now.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you&#39;re still getting an error - check that you have a <code>logs</code> folder on your project 😃</p></div><h2 id="additional-resources" tabindex="-1">Additional Resources <a class="header-anchor" href="#additional-resources" aria-label="Permalink to &quot;Additional Resources&quot;">​</a></h2><p>Check out this <a href="https://www.youtube.com/watch?v=9lWQwAUcKEM&amp;t=1035s" target="_blank" rel="noreferrer">YouTube video</a> where I implemented a similar solution when running into the same problem using <code>bcrypt</code></p>`,14);function A(_,k,x,T,P,j){const a=e("PluginTabsTab"),t=e("PluginTabs");return D(),r("div",null,[y,o(t,null,{default:n(()=>[o(a,{label:"vite"},{default:n(()=>[d,C,u,h,f,E,g]),_:1}),o(a,{label:"Webpack and Angular version <=16"},{default:n(()=>[m,F,b]),_:1}),o(a,{label:"Angular 17"},{default:n(()=>[v]),_:1})]),_:1}),w])}const q=c(i,[["render",A]]);export{S as __pageData,q as default};
