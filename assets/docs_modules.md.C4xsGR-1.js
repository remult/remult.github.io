import{_ as o,c as a,o as l,L as e}from"./chunks/framework.BLY-PH98.js";const u=JSON.parse('{"title":"Modules","description":"","frontmatter":{},"headers":[],"relativePath":"docs/modules.md","filePath":"docs/modules.md","lastUpdated":1752082233000}'),n={name:"docs/modules.md"};function t(p,s,c,r,i,d){return l(),a("div",null,s[0]||(s[0]=[e(`<h1 id="modules" tabindex="-1">Modules <a class="header-anchor" href="#modules" aria-label="Permalink to &quot;Modules&quot;">​</a></h1><p>The module system arrived in <code>remult@3.0.6</code>, the idea is to pack features in a single place. Like this, it will be possible to share features between projects in a more convinient way.</p><p>Here is the <a href="/docs/ref_remultserveroptions#modules">definition</a>.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Come on Discord to share your ideas around modules!</p></div><h2 id="styles" tabindex="-1">Styles <a class="header-anchor" href="#styles" aria-label="Permalink to &quot;Styles&quot;">​</a></h2><h3 id="local-modules" tabindex="-1">Local modules <a class="header-anchor" href="#local-modules" aria-label="Permalink to &quot;Local modules&quot;">​</a></h3><p>Essentially, a local module is a way to organize your own code into a single place. You still have the full control of the code, and you can use the full power of <code>remult</code> in it.</p><p>You can also move this folder to a different project without many hassle!</p><h3 id="library-modules" tabindex="-1">Library modules <a class="header-anchor" href="#library-modules" aria-label="Permalink to &quot;Library modules&quot;">​</a></h3><p>Here, you use a module via a library, you install it and enjoy it. This library will probably allow you some configuration &amp; you can tweak things.</p><p>When you have a great improvement idea, you should report it to the library author and follow the process.</p><h3 id="cloned-modules" tabindex="-1">Cloned modules <a class="header-anchor" href="#cloned-modules" aria-label="Permalink to &quot;Cloned modules&quot;">​</a></h3><p>It&#39;s a bit of a mix of the two previous styles. You clone a module from a repository and use it in your project, now you &quot;own&quot; it. Like this, you can tweak it to your needs.</p><h2 id="some-conventions" tabindex="-1">Some conventions <a class="header-anchor" href="#some-conventions" aria-label="Permalink to &quot;Some conventions&quot;">​</a></h2><h3 id="folder-structure" tabindex="-1">Folder structure <a class="header-anchor" href="#folder-structure" aria-label="Permalink to &quot;Folder structure&quot;">​</a></h3><p>In <code>src</code>, we like to have a <code>modules</code> folder. You will find all your local modules here.</p><p>In a module, the first level of folder is for the client, and we have a <code>server</code> folder for the server side code. Like this:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;">|</span><span style="color:#89DDFF;">-</span><span style="color:#C0CAF5;"> modules</span></span>
<span class="line"><span style="color:#BB9AF7;">	|</span><span style="color:#89DDFF;">-</span><span style="color:#C0CAF5;"> myModule</span></span>
<span class="line"><span style="color:#BB9AF7;">		|</span><span style="color:#89DDFF;">-</span><span style="color:#C0CAF5;"> index</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">ts</span><span style="color:#51597D;font-style:italic;">                 // client side code (Role_MyModule, ...)</span></span>
<span class="line"><span style="color:#BB9AF7;">		|</span><span style="color:#89DDFF;">-</span><span style="color:#C0CAF5;"> myModuleEntities</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">ts</span><span style="color:#51597D;font-style:italic;">      // entities</span></span>
<span class="line"><span style="color:#BB9AF7;">		|</span><span style="color:#89DDFF;">-</span><span style="color:#C0CAF5;"> myModuleController</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">ts</span><span style="color:#51597D;font-style:italic;">    // controllers</span></span>
<span class="line"><span style="color:#BB9AF7;">		|</span><span style="color:#89DDFF;">-</span><span style="color:#C0CAF5;"> server</span></span>
<span class="line"><span style="color:#BB9AF7;">			|</span><span style="color:#89DDFF;">-</span><span style="color:#C0CAF5;"> index</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">ts</span><span style="color:#51597D;font-style:italic;">             // server side code</span></span>
<span class="line"><span style="color:#BB9AF7;">   |</span><span style="color:#89DDFF;">-</span><span style="color:#F7768E;font-weight:bold;"> ...</span></span>
<span class="line"><span style="color:#BB9AF7;">|</span><span style="color:#89DDFF;">-</span><span style="color:#F7768E;font-weight:bold;"> ...</span></span></code></pre></div><h3 id="alias" tabindex="-1">Alias <a class="header-anchor" href="#alias" aria-label="Permalink to &quot;Alias&quot;">​</a></h3><p>With alias, you can access your modules in a more convinient way.</p><p>Depending on your framework, it can vary, but essentially, you will have a <code>tsconfig.json</code> file in your project that look like this:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#9ABDF5;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#7AA2F7;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#0DB9D7;">paths</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">      &quot;</span><span style="color:#7DCFFF;">$modules</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">./src/modules</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">      &quot;</span><span style="color:#7DCFFF;">$modules/*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">./src/modules/*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">]</span></span>
<span class="line"><span style="color:#9ABDF5;">    }</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div><p>You will then be able to access your modules like this:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">myModule</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">$module/myModule/server</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><h3 id="roles" tabindex="-1">Roles <a class="header-anchor" href="#roles" aria-label="Permalink to &quot;Roles&quot;">​</a></h3><p>To manage well <a href="/docs/access-control">Access Control</a> of our app, we use a lot <code>remult.user.roles</code> that contains the list of roles of the user.</p><p>In the end, <code>roles</code> is just an array of strings, but as we want to have a better DX, we use a <code>Roles</code> object to manage them. Like this, no typo, no missing role, etc.</p><p>Based on that, it&#39;s recommended to have a <code>Roles.ts</code> having the list of all the roles of the app <em>(including all modules roles)</em>.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// Roles.ts</span></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#9D7CD8;font-style:italic;"> const</span><span style="color:#BB9AF7;"> Roles</span><span style="color:#89DDFF;"> =</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  // app roles</span></span>
<span class="line"><span style="color:#73DACA;">  Admin</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">admin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">  CanStrartProcess_007</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">canStrartProcess_007</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  // modules roles</span></span>
<span class="line"><span style="color:#F7768E;font-weight:bold;">  ...</span><span style="color:#C0CAF5;">Roles_Auth</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span><span style="color:#89DDFF;"> as</span><span style="color:#9D7CD8;font-style:italic;"> const</span></span></code></pre></div><p>To be use like <code>Roles.Admin</code>, <code>Roles.CanStrartProcess_007</code>, <code>Roles.MyModule_Admin</code>, etc.</p><p>In a module, you will also have a file <code>Roles_MyModule.ts</code> <em>(client side)</em> having the list of all the roles of the module.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#9D7CD8;font-style:italic;"> const</span><span style="color:#BB9AF7;"> Roles_MyModule</span><span style="color:#89DDFF;"> =</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#73DACA;">  MyModule_Admin</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">MyModule.Admin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  // MyModule_Read_Stuff: &quot;MyModule.Read_Stuff&quot;,</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span><span style="color:#89DDFF;"> as</span><span style="color:#9D7CD8;font-style:italic;"> const</span></span></code></pre></div><p>Like this, module users will be able to get all these roles in their Roles object.</p>`,33)]))}const F=o(n,[["render",t]]);export{u as __pageData,F as default};
