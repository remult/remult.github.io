import{_ as s,c as a,o as e,a5 as n}from"./chunks/framework.ChN904aB.js";const h=JSON.parse('{"title":"ApiClient","description":"","frontmatter":{},"headers":[],"relativePath":"docs/ref_apiclient.md","filePath":"docs/ref_apiclient.md","lastUpdated":1725292791000}'),l={name:"docs/ref_apiclient.md"},o=n(`<h1 id="apiclient" tabindex="-1">ApiClient <a class="header-anchor" href="#apiclient" aria-label="Permalink to &quot;ApiClient&quot;">​</a></h1><p>Interface for configuring the API client used by Remult to perform HTTP calls to the backend.</p><h2 id="httpclient" tabindex="-1">httpClient <a class="header-anchor" href="#httpclient" aria-label="Permalink to &quot;httpClient&quot;">​</a></h2><p>The HTTP client to use when making API calls. It can be set to a function with the <code>fetch</code> signature or an object that has <code>post</code>, <code>put</code>, <code>delete</code>, and <code>get</code> methods. This can also be used to inject logic before each HTTP call, such as adding authorization headers.</p><h4 id="example" tabindex="-1">example: <a class="header-anchor" href="#example" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Using Axios</span></span>
<span class="line"><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">apiClient</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">httpClient</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">axios</span><span style="color:#D4D4D4;">;</span></span></code></pre></div><h4 id="example-1" tabindex="-1">example: <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Using Angular HttpClient</span></span>
<span class="line"><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">apiClient</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">httpClient</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">httpClient</span><span style="color:#D4D4D4;">;</span></span></code></pre></div><h4 id="see" tabindex="-1">see: <a class="header-anchor" href="#see" aria-label="Permalink to &quot;see:&quot;">​</a></h4><p>If you want to add headers using angular httpClient, see: <a href="https://medium.com/angular-shots/shot-3-how-to-add-http-headers-to-every-request-in-angular-fab3d10edc26" target="_blank" rel="noreferrer">https://medium.com/angular-shots/shot-3-how-to-add-http-headers-to-every-request-in-angular-fab3d10edc26</a></p><h4 id="example-2" tabindex="-1">example: <a class="header-anchor" href="#example-2" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Using fetch (default)</span></span>
<span class="line"><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">apiClient</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">httpClient</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">fetch</span><span style="color:#D4D4D4;">;</span></span></code></pre></div><h4 id="example-3" tabindex="-1">example: <a class="header-anchor" href="#example-3" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Adding bearer token authorization</span></span>
<span class="line"><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">apiClient</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">httpClient</span><span style="color:#D4D4D4;"> = (</span></span>
<span class="line"><span style="color:#9CDCFE;">  input</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">RequestInfo</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">URL</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  init</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">RequestInit</span></span>
<span class="line"><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#DCDCAA;"> fetch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">input</span><span style="color:#D4D4D4;">, {</span></span>
<span class="line"><span style="color:#D4D4D4;">    ...</span><span style="color:#9CDCFE;">init</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    headers:</span><span style="color:#9CDCFE;"> authToken</span></span>
<span class="line"><span style="color:#D4D4D4;">      ? {</span></span>
<span class="line"><span style="color:#D4D4D4;">          ...</span><span style="color:#9CDCFE;">init</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">headers</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">          authorization:</span><span style="color:#CE9178;"> &#39;Bearer &#39;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">authToken</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">      : </span><span style="color:#9CDCFE;">init</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">headers</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">    cache:</span><span style="color:#CE9178;"> &#39;no-store&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><h2 id="url" tabindex="-1">url <a class="header-anchor" href="#url" aria-label="Permalink to &quot;url&quot;">​</a></h2><p>The base URL for making API calls. By default, it is set to &#39;/api&#39;. It can be modified to be relative or to use a different domain for the server.</p><h4 id="example-4" tabindex="-1">example: <a class="header-anchor" href="#example-4" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Relative URL</span></span>
<span class="line"><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">apiClient</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">url</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;./api&#39;</span><span style="color:#D4D4D4;">;</span></span></code></pre></div><h4 id="example-5" tabindex="-1">example: <a class="header-anchor" href="#example-5" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Different domain</span></span>
<span class="line"><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">apiClient</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">url</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;https://example.com/api&#39;</span><span style="color:#D4D4D4;">;</span></span></code></pre></div><h2 id="subscriptionclient" tabindex="-1">subscriptionClient <a class="header-anchor" href="#subscriptionclient" aria-label="Permalink to &quot;subscriptionClient&quot;">​</a></h2><p>The subscription client used for real-time data updates. By default, it is set to use Server-Sent Events (SSE). It can be set to any subscription provider as illustrated in the Remult tutorial for deploying to a serverless environment.</p><h4 id="see-1" tabindex="-1">see: <a class="header-anchor" href="#see-1" aria-label="Permalink to &quot;see:&quot;">​</a></h4><p><a href="https://remult.dev/tutorials/react-next/deployment.html#deploying-to-a-serverless-environment" target="_blank" rel="noreferrer">https://remult.dev/tutorials/react-next/deployment.html#deploying-to-a-serverless-environment</a></p><h2 id="wrapmessagehandling" tabindex="-1">wrapMessageHandling <a class="header-anchor" href="#wrapmessagehandling" aria-label="Permalink to &quot;wrapMessageHandling&quot;">​</a></h2><p>A function that wraps message handling for subscriptions. This is useful for executing some code before or after any message arrives from the subscription. For example, in Angular, to refresh a specific part of the UI, you can call the <code>NgZone</code> run method at this time.</p><h4 id="example-6" tabindex="-1">example: <a class="header-anchor" href="#example-6" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Angular example</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Component</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">NgZone</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;@angular/core&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;remult&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> AppComponent</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  constructor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">zone</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">NgZone</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">    remult</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">apiClient</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">wrapMessageHandling</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">handler</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#9CDCFE;"> zone</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">run</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> handler</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div>`,28),p=[o];function t(r,c,i,D,d,y){return e(),a("div",null,p)}const u=s(l,[["render",t]]);export{h as __pageData,u as default};
