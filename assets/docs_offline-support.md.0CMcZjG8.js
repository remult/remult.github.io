import{_ as a,c as n,o,L as e}from"./chunks/framework.DdPzwmCl.js";const D=JSON.parse('{"title":"Offline Support","description":"","frontmatter":{},"headers":[],"relativePath":"docs/offline-support.md","filePath":"docs/offline-support.md","lastUpdated":1728821550000}'),l={name:"docs/offline-support.md"};function t(p,s,r,c,i,y){return o(),n("div",null,s[0]||(s[0]=[e(`<h1 id="offline-support" tabindex="-1">Offline Support <a class="header-anchor" href="#offline-support" aria-label="Permalink to &quot;Offline Support&quot;">​</a></h1><p>In modern web applications, providing a seamless user experience often involves enabling offline functionality. This ensures that users can continue to interact with the application even without an active internet connection. Remult supports several offline databases that can be used to store data in the browser for offline scenarios, enhancing the application&#39;s resilience and usability.</p><h2 id="using-local-database-for-specific-calls" tabindex="-1">Using Local Database for Specific Calls <a class="header-anchor" href="#using-local-database-for-specific-calls" aria-label="Permalink to &quot;Using Local Database for Specific Calls&quot;">​</a></h2><p>To utilize a local database for a specific call, you can pass the <code>dataProvider</code> as a second parameter to the <code>repo</code> function. This allows you to specify which database should be used for that particular operation.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">localDb</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">./some-file.ts</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C0CAF5;">console</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">table</span><span style="color:#9ABDF5;">(</span><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Task</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> localDb</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">find</span><span style="color:#9ABDF5;">())</span></span></code></pre></div><p>In this example, <code>localDb</code> is used as the data provider for the <code>Task</code> repository, enabling data fetching from the local database.</p><h2 id="json-in-localstorage-sessionstorage" tabindex="-1">JSON in LocalStorage / SessionStorage <a class="header-anchor" href="#json-in-localstorage-sessionstorage" aria-label="Permalink to &quot;JSON in LocalStorage / SessionStorage&quot;">​</a></h2><p>For simple data storage needs, you can use JSON data providers that leverage the browser&#39;s <code>localStorage</code> or <code>sessionStorage</code>.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">JsonDataProvider</span><span style="color:#89DDFF;">,</span><span style="color:#0DB9D7;"> Remult</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#9D7CD8;font-style:italic;"> const</span><span style="color:#BB9AF7;"> remultLocalStorage</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> Remult</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">new</span><span style="color:#7AA2F7;"> JsonDataProvider</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">localStorage</span><span style="color:#9ABDF5;">))</span></span></code></pre></div><p>This approach is straightforward and suitable for small datasets that need to persist across sessions or page reloads.</p><h2 id="json-storage-in-indexeddb" tabindex="-1">JSON Storage in IndexedDB <a class="header-anchor" href="#json-storage-in-indexeddb" aria-label="Permalink to &quot;JSON Storage in IndexedDB&quot;">​</a></h2><p>For more complex offline storage needs, such as larger datasets and structured queries, <code>IndexedDB</code> provides a robust solution. Using Remult’s <code>JsonEntityIndexedDbStorage</code>, you can store entities in <code>IndexedDB</code>, which is supported across all major browsers. This allows for efficient offline data management while offering support for larger volumes of data compared to <code>localStorage</code> or <code>sessionStorage</code>.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">JsonDataProvider</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">JsonEntityIndexedDbStorage</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// Initialize the JsonEntityIndexedDbStorage</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> db</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> JsonDataProvider</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">new</span><span style="color:#7AA2F7;"> JsonEntityIndexedDbStorage</span><span style="color:#9ABDF5;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// Use the local IndexedDB to store and fetch tasks</span></span>
<span class="line"><span style="color:#C0CAF5;">console</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">table</span><span style="color:#9ABDF5;">(</span><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Task</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> db</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">find</span><span style="color:#9ABDF5;">())</span></span></code></pre></div><p>In this example, <code>JsonEntityIndexedDbStorage</code> is used to persist the data to <code>IndexedDB</code>. This method is ideal for applications with large data sets or those requiring more complex interactions with the stored data in offline mode.</p><h2 id="json-storage-in-opfs-origin-private-file-system" tabindex="-1">JSON Storage in OPFS (Origin Private File System) <a class="header-anchor" href="#json-storage-in-opfs-origin-private-file-system" aria-label="Permalink to &quot;JSON Storage in OPFS (Origin Private File System)&quot;">​</a></h2><p>Origin Private File System (OPFS) is a modern browser feature supported by Chrome and Safari, allowing for more structured and efficient data storage in the frontend.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">JsonDataProvider</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">JsonEntityOpfsStorage</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> localDb</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> JsonDataProvider</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">new</span><span style="color:#7AA2F7;"> JsonEntityOpfsStorage</span><span style="color:#9ABDF5;">())</span></span></code></pre></div><p>Using OPFS with Remult&#39;s <code>JsonDataProvider</code> provides a robust solution for storing entities in the frontend, especially for applications requiring more complex data handling than what <code>localStorage</code> or <code>sessionStorage</code> can offer.</p><p>Certainly! Here&#39;s the adjusted section on <code>sql.js</code> with an enriched code sample:</p><h2 id="sql-js-a-sqlite-implementation-for-the-frontend" tabindex="-1"><code>sql.js</code>: A SQLite Implementation for the Frontend <a class="header-anchor" href="#sql-js-a-sqlite-implementation-for-the-frontend" aria-label="Permalink to &quot;\`sql.js\`: A SQLite Implementation for the Frontend&quot;">​</a></h2><p>For applications requiring advanced database functionality, <a href="https://sql.js.org/" target="_blank" rel="noreferrer"><code>sql.js</code></a> provides a SQLite implementation that runs entirely in the frontend. This allows you to use SQL queries and transactions, offering a powerful and flexible data management solution for offline scenarios.</p><p>Before using <code>sql.js</code> in your project, you need to install the package and its TypeScript definitions. Run the following commands in your terminal:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#C0CAF5;">npm</span><span style="color:#9ECE6A;"> install</span><span style="color:#9ECE6A;"> sql.js</span></span>
<span class="line"><span style="color:#C0CAF5;">npm</span><span style="color:#9ECE6A;"> install</span><span style="color:#9ECE6A;"> @types/sql.js</span><span style="color:#E0AF68;"> --save-dev</span></span></code></pre></div><p>After installing the necessary packages, you can use the following code sample in your project:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">SqlDatabase</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">SqlJsDataProvider</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult/remult-sql-js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#0DB9D7;"> initSqlJs</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">sql.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#BB9AF7;"> sqlDb</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> Database</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// Initialize the SqlJsDataProvider with a new database instance</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> sqlJsDataProvider</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> SqlJsDataProvider</span><span style="color:#9ABDF5;">(</span></span>
<span class="line"><span style="color:#7AA2F7;">  initSqlJs</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#7AA2F7;">    locateFile</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> (</span><span style="color:#E0AF68;">file</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#89DDFF;"> \`</span><span style="color:#9ECE6A;">https://sql.js.org/dist/</span><span style="color:#7DCFFF;">\${</span><span style="color:#C0CAF5;">file</span><span style="color:#7DCFFF;">}</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span><span style="color:#51597D;font-style:italic;"> // for complete offline support, change this to a url that is available offline</span></span>
<span class="line"><span style="color:#9ABDF5;">  })</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">then</span><span style="color:#9ABDF5;">((</span><span style="color:#E0AF68;">x</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">    // Load the database from localStorage if it exists</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">    const</span><span style="color:#BB9AF7;"> dbData</span><span style="color:#89DDFF;"> =</span><span style="color:#C0CAF5;"> localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">getItem</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">sqljs-db</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#BB9AF7;">    if</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">dbData</span><span style="color:#9ABDF5;">) {</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">      const</span><span style="color:#BB9AF7;"> buffer</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> Uint8Array</span><span style="color:#9ABDF5;">(</span><span style="color:#0DB9D7;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">parse</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">dbData</span><span style="color:#9ABDF5;">))</span></span>
<span class="line"><span style="color:#BB9AF7;font-style:italic;">      return</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">sqlDb</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">Database</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">buffer</span><span style="color:#9ABDF5;">))</span></span>
<span class="line"><span style="color:#9ABDF5;">    }</span></span>
<span class="line"><span style="color:#BB9AF7;font-style:italic;">    return</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">sqlDb</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">Database</span><span style="color:#9ABDF5;">())</span></span>
<span class="line"><span style="color:#9ABDF5;">  })</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// Set up an afterMutation hook to save the database to localStorage after any mutation</span></span>
<span class="line"><span style="color:#C0CAF5;">sqlJsDataProvider</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">afterMutation</span><span style="color:#89DDFF;"> =</span><span style="color:#9D7CD8;font-style:italic;"> async</span><span style="color:#9ABDF5;"> ()</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">  const</span><span style="color:#BB9AF7;"> db</span><span style="color:#89DDFF;"> =</span><span style="color:#C0CAF5;"> sqlDb</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">  const</span><span style="color:#BB9AF7;"> buffer</span><span style="color:#89DDFF;"> =</span><span style="color:#C0CAF5;"> db</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">export</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C0CAF5;">  localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">setItem</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">sqljs-db</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#0DB9D7;"> JSON</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">stringify</span><span style="color:#9ABDF5;">([</span><span style="color:#F7768E;font-weight:bold;">...</span><span style="color:#7DCFFF;">buffer</span><span style="color:#9ABDF5;">]))</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> localDb</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> SqlDatabase</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">sqlJsDataProvider</span><span style="color:#9ABDF5;">)</span></span></code></pre></div><p>This code sets up a SQLite database using <code>sql.js</code> in your Remult project, with support for saving to and loading from <code>localStorage</code>.</p><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><p>Remult&#39;s support for various offline databases empowers developers to create web applications that provide a seamless user experience, even in offline scenarios. Whether using simple JSON storage in <code>localStorage</code> or more advanced solutions like OPFS or <code>sql.js</code>, Remult offers the flexibility to choose the right data storage solution for your application&#39;s needs. By leveraging these offline capabilities, you can ensure that your application remains functional and responsive, regardless of the user&#39;s connectivity status.</p>`,28)]))}const d=a(l,[["render",t]]);export{D as __pageData,d as default};
