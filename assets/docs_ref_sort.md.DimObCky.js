import{_ as e,c as t,o as r,a5 as a}from"./chunks/framework.C7bC4sbb.js";const y=JSON.parse('{"title":"Sort","description":"","frontmatter":{},"headers":[],"relativePath":"docs/ref_sort.md","filePath":"docs/ref_sort.md","lastUpdated":1724738315000}'),o={name:"docs/ref_sort.md"},n=a('<h1 id="sort" tabindex="-1">Sort <a class="header-anchor" href="#sort" aria-label="Permalink to &quot;Sort&quot;">​</a></h1><p>The <code>Sort</code> class is used to describe sorting criteria for queries. It is mainly used internally, but it provides a few useful functions for working with sorting.</p><h2 id="toentityorderby" tabindex="-1">toEntityOrderBy <a class="header-anchor" href="#toentityorderby" aria-label="Permalink to &quot;toEntityOrderBy&quot;">​</a></h2><p>Translates the current <code>Sort</code> instance into an <code>EntityOrderBy</code> object.</p><h4 id="returns" tabindex="-1">returns: <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;returns:&quot;">​</a></h4><p>An <code>EntityOrderBy</code> object representing the sort criteria.</p><h2 id="constructor" tabindex="-1">constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;constructor&quot;">​</a></h2><p>Constructs a <code>Sort</code> instance with the provided sort segments.</p><p>Arguments:</p><ul><li><strong>segments</strong> - The sort segments to be included in the sort criteria.</li></ul><h2 id="segments" tabindex="-1">Segments <a class="header-anchor" href="#segments" aria-label="Permalink to &quot;Segments&quot;">​</a></h2><p>The segments of the sort criteria.</p><h2 id="reverse" tabindex="-1">reverse <a class="header-anchor" href="#reverse" aria-label="Permalink to &quot;reverse&quot;">​</a></h2><p>Reverses the sort order of the current sort criteria.</p><h4 id="returns-1" tabindex="-1">returns: <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;returns:&quot;">​</a></h4><p>A new <code>Sort</code> instance with the reversed sort order.</p><h2 id="compare" tabindex="-1">compare <a class="header-anchor" href="#compare" aria-label="Permalink to &quot;compare&quot;">​</a></h2><p>Compares two objects based on the current sort criteria.</p><h4 id="returns-2" tabindex="-1">returns: <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;returns:&quot;">​</a></h4><p>A negative value if <code>a</code> should come before <code>b</code>, a positive value if <code>a</code> should come after <code>b</code>, or zero if they are equal.</p><p>Arguments:</p><ul><li><strong>a</strong> - The first object to compare.</li><li><strong>b</strong> - The second object to compare.</li><li><strong>getFieldKey</strong> - An optional function to get the field key for comparison.</li></ul><h2 id="translateorderbytosort" tabindex="-1">translateOrderByToSort <a class="header-anchor" href="#translateorderbytosort" aria-label="Permalink to &quot;translateOrderByToSort&quot;">​</a></h2><p>Translates an <code>EntityOrderBy</code> to a <code>Sort</code> instance.</p><h4 id="returns-3" tabindex="-1">returns: <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;returns:&quot;">​</a></h4><p>A <code>Sort</code> instance representing the translated order by.</p><p>Arguments:</p><ul><li><strong>entityDefs</strong> - The metadata of the entity associated with the order by.</li><li><strong>orderBy</strong> - The <code>EntityOrderBy</code> to be translated.</li></ul><h2 id="createuniquesort" tabindex="-1">createUniqueSort <a class="header-anchor" href="#createuniquesort" aria-label="Permalink to &quot;createUniqueSort&quot;">​</a></h2><p>Creates a unique <code>Sort</code> instance based on the provided <code>Sort</code> and the entity metadata. This ensures that the sort criteria result in a unique ordering of entities.</p><h4 id="returns-4" tabindex="-1">returns: <a class="header-anchor" href="#returns-4" aria-label="Permalink to &quot;returns:&quot;">​</a></h4><p>A <code>Sort</code> instance representing the unique sort criteria.</p><p>Arguments:</p><ul><li><strong>entityMetadata</strong> - The metadata of the entity associated with the sort.</li><li><strong>orderBy</strong> - The <code>Sort</code> instance to be made unique.</li></ul><h2 id="createuniqueentityorderby" tabindex="-1">createUniqueEntityOrderBy <a class="header-anchor" href="#createuniqueentityorderby" aria-label="Permalink to &quot;createUniqueEntityOrderBy&quot;">​</a></h2><p>Creates a unique <code>EntityOrderBy</code> based on the provided <code>EntityOrderBy</code> and the entity metadata. This ensures that the order by criteria result in a unique ordering of entities.</p><h4 id="returns-5" tabindex="-1">returns: <a class="header-anchor" href="#returns-5" aria-label="Permalink to &quot;returns:&quot;">​</a></h4><p>An <code>EntityOrderBy</code> representing the unique order by criteria.</p><p>Arguments:</p><ul><li><strong>entityMetadata</strong> - The metadata of the entity associated with the order by.</li><li><strong>orderBy</strong> - The <code>EntityOrderBy</code> to be made unique.</li></ul>',40),s=[n];function i(d,c,h,u,l,p){return r(),t("div",null,s)}const m=e(o,[["render",i]]);export{y as __pageData,m as default};
