import{_ as s,c as n,o as a,a5 as l}from"./chunks/framework.ChN904aB.js";const u=JSON.parse('{"title":"Authentication and Authorization","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/solid-start/auth.md","filePath":"tutorials/solid-start/auth.md","lastUpdated":1713693049000}'),o={name:"tutorials/solid-start/auth.md"},p=l(`<h1 id="authentication-and-authorization" tabindex="-1">Authentication and Authorization <a class="header-anchor" href="#authentication-and-authorization" aria-label="Permalink to &quot;Authentication and Authorization&quot;">​</a></h1><p>Our todo app is nearly functionally complete, but it still doesn&#39;t fulfill a very basic requirement - that users should log in before they can view, create or modify tasks.</p><p>Remult provides a flexible mechanism that enables placing <strong>code-based authorization rules</strong> at various levels of the application&#39;s API. To maintain high code cohesion, <strong>entity and field-level authorization code should be placed in entity classes</strong>.</p><p><strong>Remult is completely unopinionated when it comes to user authentication.</strong> You are free to use any kind of authentication mechanism, and only required to provide Remult with an object which implements the Remult <code>UserInfo</code> interface.</p><p>In this tutorial, we&#39;ll use method outlined in the <a href="https://start.solidjs.com/advanced/session/" target="_blank" rel="noreferrer">Authentication</a> article of <code>SolidStart</code></p><h2 id="tasks-crud-requires-sign-in" tabindex="-1">Tasks CRUD Requires Sign-in <a class="header-anchor" href="#tasks-crud-requires-sign-in" aria-label="Permalink to &quot;Tasks CRUD Requires Sign-in&quot;">​</a></h2><p>This rule is implemented within the <code>Task</code> <code>@Entity</code> decorator, by modifying the value of the <code>allowApiCrud</code> property. This property can be set to a function that accepts a <code>Remult</code> argument and returns a <code>boolean</code> value. Let&#39;s use the <code>Allow.authenticated</code> function from Remult.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/app/shared/Task.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">Entity</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;tasks&quot;</span><span style="color:#D4D4D4;">, {</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">    allowApiCrud:</span><span style="color:#9CDCFE;"> Allow</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">authenticated</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">Import Allow</p><p>This code requires adding an import of <code>Allow</code> from <code>remult</code>.</p></div><p>After the browser refreshes, <strong>the list of tasks disappeared</strong> and the user can no longer create new tasks.</p><details class="details custom-block"><summary>Inspect the HTTP error returned by the API using cURL</summary><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">curl</span><span style="color:#569CD6;"> -i</span><span style="color:#CE9178;"> http://localhost:3000/api/tasks</span></span></code></pre></div></details><div class="danger custom-block"><p class="custom-block-title">Authorized server-side code can still modify tasks</p><p>Although client CRUD requests to <code>tasks</code> API endpoints now require a signed-in user, the API endpoint created for our <code>setAllCompleted</code> server function remains available to unauthenticated requests. Since the <code>allowApiCrud</code> rule we implemented does not affect the server-side code&#39;s ability to use the <code>Task</code> entity class for performing database CRUD operations, <strong>the <code>setAllCompleted</code> function still works as before</strong>.</p><p>To fix this, let&#39;s implement the same rule using the <code>@BackendMethod</code> decorator of the <code>setAllCompleted</code> method of <code>TasksController</code>.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/shared/TasksController.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">BackendMethod</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">allowed:</span><span style="color:#9CDCFE;"> Allow</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">authenticated</span><span style="color:#D4D4D4;"> })</span></span></code></pre></div><p><strong>This code requires adding an import of <code>Allow</code> from <code>remult</code>.</strong></p></div><h2 id="user-authentication" tabindex="-1">User Authentication <a class="header-anchor" href="#user-authentication" aria-label="Permalink to &quot;User Authentication&quot;">​</a></h2><p>Let&#39;s set-up <code>SolidStart</code> authentication to authenticate users to our app.</p><h3 id="backend-setup" tabindex="-1">Backend setup <a class="header-anchor" href="#backend-setup" aria-label="Permalink to &quot;Backend setup&quot;">​</a></h3><ol><li><p>Create an <code>auth.ts</code> file in the <code>src</code> folder with the following code.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/auth.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">action</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">redirect</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;@solidjs/router&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">useSession</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;vinxi/http&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#C586C0;">type</span><span style="color:#9CDCFE;"> UserInfo</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> validUsers</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">UserInfo</span><span style="color:#D4D4D4;">[] = [</span></span>
<span class="line"><span style="color:#D4D4D4;">  { </span><span style="color:#9CDCFE;">id:</span><span style="color:#CE9178;"> &#39;1&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &#39;Jane&#39;</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#D4D4D4;">  { </span><span style="color:#9CDCFE;">id:</span><span style="color:#CE9178;"> &#39;2&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &#39;Steve&#39;</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#D4D4D4;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> async</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> getSession</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#CE9178;">  &#39;use server&#39;</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#C586C0;"> await</span><span style="color:#DCDCAA;"> useSession</span><span style="color:#D4D4D4;">&lt;{ </span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">UserInfo</span><span style="color:#D4D4D4;"> }&gt;({</span></span>
<span class="line"><span style="color:#9CDCFE;">    password:</span></span>
<span class="line"><span style="color:#9CDCFE;">      process</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">env</span><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">&#39;SESSION_SECRET&#39;</span><span style="color:#D4D4D4;">] ||</span></span>
<span class="line"><span style="color:#CE9178;">      &#39;Something secret used for development only&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> loginAction</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">action</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">formData</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">FormData</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#CE9178;">  &#39;use server&#39;</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> username</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">String</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">formData</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;username&#39;</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#C586C0;">  try</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> session</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#DCDCAA;"> getSession</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> user</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">validUsers</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> x</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">username</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">throw</span><span style="color:#DCDCAA;"> Error</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Invalid user, try &#39;Steve&#39; or &#39;Jane&#39;&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">    await</span><span style="color:#9CDCFE;"> session</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">update</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line"><span style="color:#D4D4D4;">  } </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> err</span><span style="color:#C586C0;"> as</span><span style="color:#4EC9B0;"> Error</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#C586C0;">  throw</span><span style="color:#DCDCAA;"> redirect</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;/&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}, </span><span style="color:#CE9178;">&#39;login&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> async</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> logout</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#CE9178;">  &#39;use server&#39;</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> session</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#DCDCAA;"> getSession</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#C586C0;">  await</span><span style="color:#9CDCFE;"> session</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">update</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">user:</span><span style="color:#569CD6;"> null</span><span style="color:#D4D4D4;">! })</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> async</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> getUser</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#CE9178;">  &#39;use server&#39;</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> session</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#DCDCAA;"> getSession</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> session</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">user</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><ul><li><p>The (very) simplistic <code>loginAction</code> endpoint accepts a <code>FormData</code> with a <code>username</code> property, looks it up in a predefined dictionary of valid users and, if found, sets the user&#39;s information to the <code>user</code> property of the request&#39;s <code>session</code>.</p></li><li><p>The <code>logout</code> function clears the <code>user</code> value from the current session.</p></li><li><p>The <code>getUser</code> function extracts the value of the current user from the session and returns it.</p></li></ul></li><li><p>Create a <code>src/routes/login.tsx</code> file, and place the following code to it:</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/routes/login.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">useSubmission</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;@solidjs/router&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">loginAction</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;../auth.js&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Show</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;solid-js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> Home</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> sub</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useSubmission</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">loginAction</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#808080;">    &lt;&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Login</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">main</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">form</span><span style="color:#9CDCFE;"> action</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">loginAction</span><span style="color:#569CD6;">}</span><span style="color:#9CDCFE;"> method</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;post&quot;</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">          &lt;</span><span style="color:#569CD6;">input</span></span>
<span class="line"><span style="color:#9CDCFE;">            type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;text&quot;</span></span>
<span class="line"><span style="color:#9CDCFE;">            name</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;username&quot;</span></span>
<span class="line"><span style="color:#9CDCFE;">            placeholder</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;Username, try Steve or Jane&quot;</span></span>
<span class="line"><span style="color:#808080;">          /&gt;</span></span>
<span class="line"><span style="color:#808080;">          &lt;</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Sign in</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">        &lt;/</span><span style="color:#569CD6;">form</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#4EC9B0;">Show</span><span style="color:#9CDCFE;"> when</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">sub</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">message</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">sub</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">message</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#4EC9B0;">Show</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;/</span><span style="color:#569CD6;">main</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">  )</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div></li><li><p>Replace the content of the <code>src/routes/index.tsx</code> file with the following code:</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/routes/index.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">getUser</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">logout</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;../auth.js&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">useNavigate</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;@solidjs/router&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Show</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">createSignal</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">onMount</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;solid-js&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> Todo</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;../components/Todo.jsx&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> Home</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#D4D4D4;"> [</span><span style="color:#4FC1FF;">authenticated</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">setAuthenticated</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">createSignal</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> navigate</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useNavigate</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">  onMount</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    remult</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#DCDCAA;"> getUser</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">authenticated</span><span style="color:#D4D4D4;">()) </span><span style="color:#DCDCAA;">setAuthenticated</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">    else</span><span style="color:#DCDCAA;"> navigate</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;/login&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#4EC9B0;">Show</span><span style="color:#9CDCFE;"> when</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#DCDCAA;">authenticated</span><span style="color:#D4D4D4;">()</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Todos</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">header</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">        Hello </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">name</span><span style="color:#569CD6;">}</span></span>
<span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">button</span></span>
<span class="line"><span style="color:#9CDCFE;">          onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{async</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> logout</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> navigate</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;/login&#39;</span><span style="color:#D4D4D4;">))</span><span style="color:#569CD6;">}</span></span>
<span class="line"><span style="color:#808080;">        &gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">          Logout</span></span>
<span class="line"><span style="color:#808080;">        &lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;/</span><span style="color:#569CD6;">header</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#4EC9B0;">Todo</span><span style="color:#808080;"> /&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#4EC9B0;">Show</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">  )</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><ul><li>We use the <code>onMount</code> hook the update the <code>remult.user</code> in the <code>frontend</code>, based on the user from the current session. That user info can then be used in the front-end for user roles based content</li></ul></li></ol><div class="warning custom-block"><p class="custom-block-title">Solid Hydration error or page not found</p><p>As we were working on this tutorial with the rc version of solid start we got this error - we found that <strong>hard refreshing the site (Ctrl F5) solves it</strong>.</p></div><h3 id="connect-remult-solid-start-on-the-backend" tabindex="-1">Connect remult-solid-start On the Backend <a class="header-anchor" href="#connect-remult-solid-start-on-the-backend" aria-label="Permalink to &quot;Connect remult-solid-start On the Backend&quot;">​</a></h3><p>Once an authentication flow is established, integrating it with Remult in the backend is as simple as providing Remult with a <code>getUser</code> function from the <code>src/auth.ts</code></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/api.ts</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">getUser</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;./auth.js&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> api</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">remultSolidStart</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#6A9955;">  //...</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">  getUser</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"><span style="color:#6A9955;">//...</span></span></code></pre></div><p>The todo app now supports signing in and out, with <strong>all access restricted to signed in users only</strong>.</p><h2 id="role-based-authorization" tabindex="-1">Role-based Authorization <a class="header-anchor" href="#role-based-authorization" aria-label="Permalink to &quot;Role-based Authorization&quot;">​</a></h2><p>Usually, not all application users have the same privileges. Let&#39;s define an <code>admin</code> role for our todo app, and enforce the following authorization rules:</p><ul><li>All signed in users can see the list of tasks.</li><li>All signed in users can set specific tasks as <code>completed</code>.</li><li>Only users belonging to the <code>admin</code> role can create, delete or edit the titles of tasks.</li></ul><ol><li>Modify the highlighted lines in the <code>Task</code> entity class to reflect the top three authorization rules.</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/shared/Task.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Allow</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Entity</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Fields</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;remult&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">Entity</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Task</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#CE9178;">&quot;tasks&quot;</span><span style="color:#D4D4D4;">, {</span></span>
<span class="line"><span style="color:#9CDCFE;">  allowApiCrud:</span><span style="color:#9CDCFE;"> Allow</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">authenticated</span><span style="color:#D4D4D4;">,</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">  allowApiInsert:</span><span style="color:#CE9178;"> &quot;admin&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">  allowApiDelete:</span><span style="color:#CE9178;"> &quot;admin&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> Task</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  @</span><span style="color:#9CDCFE;">Fields</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">uuid</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#9CDCFE;">  id</span><span style="color:#D4D4D4;">!: </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  @</span><span style="color:#9CDCFE;">Fields</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">string</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#DCDCAA;">    validate</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> task</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">title</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> &gt; </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;"> || </span><span style="color:#CE9178;">&quot;Too Short&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    allowApiUpdate:</span><span style="color:#CE9178;"> &quot;admin&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">  title</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  @</span><span style="color:#9CDCFE;">Fields</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">boolean</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#9CDCFE;">  completed</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><ol start="2"><li>Let&#39;s give the user <em>&quot;Jane&quot;</em> the <code>admin</code> role by modifying the <code>roles</code> array of her <code>validUsers</code> entry.</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/auth.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> validUsers</span><span style="color:#D4D4D4;"> = [</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">  { </span><span style="color:#9CDCFE;">id:</span><span style="color:#CE9178;"> &quot;1&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &quot;Jane&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">roles:</span><span style="color:#D4D4D4;"> [</span><span style="color:#CE9178;">&quot;admin&quot;</span><span style="color:#D4D4D4;">] },</span></span>
<span class="line"><span style="color:#D4D4D4;">  { </span><span style="color:#9CDCFE;">id:</span><span style="color:#CE9178;"> &quot;2&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &quot;Steve&quot;</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#D4D4D4;">]</span></span></code></pre></div><p><strong>Sign in to the app as <em>&quot;Steve&quot;</em> to test that the actions restricted to <code>admin</code> users are not allowed. 🔒</strong></p><h2 id="role-based-authorization-on-the-frontend" tabindex="-1">Role-based Authorization on the Frontend <a class="header-anchor" href="#role-based-authorization-on-the-frontend" aria-label="Permalink to &quot;Role-based Authorization on the Frontend&quot;">​</a></h2><p>From a user experience perspective it only makes sense that users that can&#39;t add or delete, would not see these buttons.</p><p>Let&#39;s reuse the same definitions on the Frontend.</p><p>We&#39;ll use the entity&#39;s metadata to only show the form if the user is allowed to insert</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/components/Todo.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">main</span><span style="color:#808080;">&gt;</span></span>
<span class="line highlighted"><span style="color:#808080;">  &lt;</span><span style="color:#4EC9B0;">Show</span><span style="color:#9CDCFE;"> when</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">taskRepo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">metadata</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">apiInsertAllowed</span><span style="color:#D4D4D4;">()</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">form</span><span style="color:#9CDCFE;"> onSubmit</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">addTask</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">input</span></span>
<span class="line"><span style="color:#9CDCFE;">        value</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#DCDCAA;">newTaskTitle</span><span style="color:#D4D4D4;">()</span><span style="color:#569CD6;">}</span></span>
<span class="line"><span style="color:#9CDCFE;">        placeholder</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;What needs to be done?&quot;</span></span>
<span class="line"><span style="color:#9CDCFE;">        onInput</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> setNewTaskTitle</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">currentTarget</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span></span>
<span class="line"><span style="color:#808080;">      /&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Add</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">form</span><span style="color:#808080;">&gt;</span></span>
<span class="line highlighted"><span style="color:#808080;">  &lt;/</span><span style="color:#4EC9B0;">Show</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">  ...</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">main</span><span style="color:#808080;">&gt;</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">Import Show</p><p>This code requires adding an import of <code>Show</code> from <code>solid-js</code>.</p></div><p>And let&#39;s do the same for the <code>delete</code> button:</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/components/Todo.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">input</span></span>
<span class="line"><span style="color:#9CDCFE;">      type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;checkbox&quot;</span></span>
<span class="line"><span style="color:#9CDCFE;">      checked</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">completed</span><span style="color:#569CD6;">}</span></span>
<span class="line"><span style="color:#9CDCFE;">      oninput</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> setCompleted</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">checked</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span></span>
<span class="line"><span style="color:#808080;">    /&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">input</span></span>
<span class="line"><span style="color:#9CDCFE;">      value</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">title</span><span style="color:#569CD6;">}</span></span>
<span class="line"><span style="color:#9CDCFE;">      onInput</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> setTasks</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">i</span><span style="color:#D4D4D4;">(), </span><span style="color:#CE9178;">&quot;title&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span></span>
<span class="line"><span style="color:#808080;">    /&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">saveTask</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Save</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line highlighted"><span style="color:#808080;">    &lt;</span><span style="color:#4EC9B0;">Show</span><span style="color:#9CDCFE;"> when</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">taskRepo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">metadata</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">apiDeleteAllowed</span><span style="color:#D4D4D4;">()</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">deleteTask</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Delete</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line highlighted"><span style="color:#808080;">    &lt;/</span><span style="color:#4EC9B0;">Show</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></code></pre></div><p>This way we can keep the frontend consistent with the <code>api</code>&#39;s Authorization rules</p><ul><li>Note We send the <code>task</code> to the <code>apiDeleteAllowed</code> method, because the <code>apiDeleteAllowed</code> option, can be sophisticated and can also be based on the specific item&#39;s values.</li></ul>`,39),e=[p];function t(c,r,D,y,i,C){return a(),n("div",null,e)}const h=s(o,[["render",t]]);export{u as __pageData,h as default};
