import{_ as e,c as s,o as a,a5 as o}from"./chunks/framework.C7bC4sbb.js";const y=JSON.parse('{"title":"Refactor to Backend","description":"","frontmatter":{"type":"lesson","title":"Refactor to Backend","focus":"/shared/TasksController.ts"},"headers":[],"relativePath":"interactive/src/content/tutorial/1-basics/6-backend-methods/2-refactor-to-backend/content.md","filePath":"interactive/src/content/tutorial/1-basics/6-backend-methods/2-refactor-to-backend/content.md","lastUpdated":1723795207000}'),t={name:"interactive/src/content/tutorial/1-basics/6-backend-methods/2-refactor-to-backend/content.md"},n=o(`<h1 id="refactor-from-frontend-to-backend" tabindex="-1">Refactor from Frontend to Backend <a class="header-anchor" href="#refactor-from-frontend-to-backend" aria-label="Permalink to &quot;Refactor from Frontend to Backend&quot;">​</a></h1><p>To improve performance, let&#39;s refactor the frontend code and move it to the backend.</p><h2 id="step-1-create-the-backend-method" tabindex="-1">Step 1: Create the Backend Method <a class="header-anchor" href="#step-1-create-the-backend-method" aria-label="Permalink to &quot;Step 1: Create the Backend Method&quot;">​</a></h2><p>We&#39;ll add a <code>shared/TasksController.ts</code> file with the following code:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">BackendMethod</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;./Task.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> TasksController</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">  @</span><span style="color:#DCDCAA;">BackendMethod</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">allowed:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line highlighted"><span style="color:#569CD6;">  static</span><span style="color:#569CD6;"> async</span><span style="color:#DCDCAA;"> setAllCompleted</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">completed</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line highlighted"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> taskRepo</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">)</span></span>
<span class="line highlighted"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> task</span><span style="color:#569CD6;"> of</span><span style="color:#C586C0;"> await</span><span style="color:#9CDCFE;"> taskRepo</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line highlighted"><span style="color:#C586C0;">      await</span><span style="color:#9CDCFE;"> taskRepo</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">update</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">completed</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">    }</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><h3 id="code-explanation" tabindex="-1">Code Explanation <a class="header-anchor" href="#code-explanation" aria-label="Permalink to &quot;Code Explanation&quot;">​</a></h3><ul><li>We created a <code>TasksController</code> class to contain backend methods.</li><li>The <code>setAllCompleted</code> method is decorated with <code>@BackendMethod({ allowed: true })</code>, making it accessible from the frontend.</li><li>Inside <code>setAllCompleted</code>, we get the repository for <code>Task</code> using <code>remult.repo(Task)</code>.</li><li>We iterate through the tasks and update each one with the new <code>completed</code> status.</li><li>Previously, in the frontend, the <code>taskRepo</code> repository performed HTTP calls to the backend. Now that we&#39;re on the backend, the <code>taskRepo</code> repository makes direct API calls to the database.</li><li>An advantage of this approach is that using the <code>taskRepo</code> repository allows us to use the same coding style for both the frontend and backend, making it easier for us as developers to switch back and forth.</li></ul><h2 id="step-2-register-the-controller" tabindex="-1">Step 2: Register the Controller <a class="header-anchor" href="#step-2-register-the-controller" aria-label="Permalink to &quot;Step 2: Register the Controller&quot;">​</a></h2><p>Head over to the <code>backend/index.ts</code> file and register the controller:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> api</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">remultExpress</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  entities:</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">],</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">  controllers:</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">TasksController</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#DCDCAA;">  initApi</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> async</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">    //...</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre></div><h3 id="code-explanation-1" tabindex="-1">Code Explanation <a class="header-anchor" href="#code-explanation-1" aria-label="Permalink to &quot;Code Explanation&quot;">​</a></h3><ul><li>By adding <code>controllers: [TasksController]</code>, we make the <code>TasksController</code> available for API calls from the frontend.</li></ul><h2 id="step-3-adjust-the-frontend" tabindex="-1">Step 3: Adjust the Frontend <a class="header-anchor" href="#step-3-adjust-the-frontend" aria-label="Permalink to &quot;Step 3: Adjust the Frontend&quot;">​</a></h2><p>Adjust the <code>frontend/Todo.tsx</code> component to call the backend method:</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">async</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> setAllCompleted</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">completed</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">  await</span><span style="color:#9CDCFE;"> TasksController</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setAllCompleted</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">completed</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><h3 id="code-explanation-2" tabindex="-1">Code Explanation <a class="header-anchor" href="#code-explanation-2" aria-label="Permalink to &quot;Code Explanation&quot;">​</a></h3><ul><li>We removed the <code>for</code> loop and the direct update calls from the frontend.</li><li>We now call <code>TasksController.setAllCompleted(completed)</code> to perform the updates on the backend.</li><li>After the backend method completes, we refresh the task list by calling <code>taskRepo.find().then(setTasks)</code>.</li><li>An advantage of this approach is that the call to <code>setAllCompleted</code> is strongly typed, protecting us from spelling or typing mistakes using TypeScript.</li></ul><h3 id="try-it-out" tabindex="-1">Try It Out <a class="header-anchor" href="#try-it-out" aria-label="Permalink to &quot;Try It Out&quot;">​</a></h3><p>Click the &quot;Set All Completed&quot; and &quot;Set All Uncompleted&quot; buttons to see the improved performance with the backend method handling the updates.</p>`,19),l=[n];function p(c,r,d,i,D,h){return a(),s("div",null,l)}const u=e(t,[["render",p]]);export{y as __pageData,u as default};
