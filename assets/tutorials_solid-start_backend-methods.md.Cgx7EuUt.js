import{_ as o,c as a,o as e,L as n}from"./chunks/framework.DdPzwmCl.js";const F=JSON.parse('{"title":"Backend methods","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/solid-start/backend-methods.md","filePath":"tutorials/solid-start/backend-methods.md","lastUpdated":1713690814000}'),l={name:"tutorials/solid-start/backend-methods.md"};function t(p,s,c,r,d,i){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="backend-methods" tabindex="-1">Backend methods <a class="header-anchor" href="#backend-methods" aria-label="Permalink to &quot;Backend methods&quot;">​</a></h1><p>When performing operations on multiple entity objects, performance considerations may necessitate running them on the server. <strong>With Remult, moving client-side logic to run on the server is a simple refactoring</strong>.</p><h2 id="set-all-tasks-as-un-completed" tabindex="-1">Set All Tasks as Un/completed <a class="header-anchor" href="#set-all-tasks-as-un-completed" aria-label="Permalink to &quot;Set All Tasks as Un/completed&quot;">​</a></h2><p>Let&#39;s add two buttons to the todo app: &quot;Set all as completed&quot; and &quot;Set all as uncompleted&quot;.</p><ol><li><p>Add a <code>setAllCompleted</code> async function to the <code>Todo</code> function component, which accepts a <code>completed</code> boolean argument and sets the value of the <code>completed</code> field of all the tasks accordingly.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// src/components/Todo.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">async</span><span style="color:#BB9AF7;"> function</span><span style="color:#7AA2F7;"> setAllCompleted</span><span style="color:#9ABDF5;">(</span><span style="color:#E0AF68;">completed</span><span style="color:#89DDFF;">:</span><span style="color:#0DB9D7;"> boolean</span><span style="color:#9ABDF5;">)</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#BB9AF7;">  for</span><span style="color:#9ABDF5;"> (</span><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> task</span><span style="color:#89DDFF;"> of</span><span style="color:#BB9AF7;font-style:italic;"> await</span><span style="color:#C0CAF5;"> taskRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">find</span><span style="color:#9ABDF5;">()) {</span></span>
<span class="line"><span style="color:#BB9AF7;font-style:italic;">    await</span><span style="color:#C0CAF5;"> taskRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">save</span><span style="color:#9ABDF5;">({ </span><span style="color:#F7768E;font-weight:bold;">...</span><span style="color:#C0CAF5;">task</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> completed</span><span style="color:#9ABDF5;"> })</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div><p>The <code>for</code> loop iterates the array of <code>Task</code> objects returned from the backend, and saves each task back to the backend with a modified value in the <code>completed</code> field.</p></li><li><p>Add the two buttons to the return section of the <code>Todo</code> component, just before the closing <code>&lt;/main&gt;</code> tag. Both of the buttons&#39; <code>onClick</code> events will call the <code>setAllCompleted</code> method with the appropriate value of the <code>completed</code> argument.</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// src/components/Todo.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BA3C97;">&lt;</span><span style="color:#F7768E;">div</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#BA3C97;">  &lt;</span><span style="color:#F7768E;">button</span><span style="color:#BB9AF7;"> onClick</span><span style="color:#89DDFF;">=</span><span style="color:#7DCFFF;">{</span><span style="color:#9ABDF5;">()</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#7AA2F7;"> setAllCompleted</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">true</span><span style="color:#9ABDF5;">)</span><span style="color:#7DCFFF;">}</span><span style="color:#BA3C97;">&gt;</span><span style="color:#9AA5CE;">Set All Completed</span><span style="color:#BA3C97;">&lt;/</span><span style="color:#F7768E;">button</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#BA3C97;">  &lt;</span><span style="color:#F7768E;">button</span><span style="color:#BB9AF7;"> onClick</span><span style="color:#89DDFF;">=</span><span style="color:#7DCFFF;">{</span><span style="color:#9ABDF5;">()</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#7AA2F7;"> setAllCompleted</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">false</span><span style="color:#9ABDF5;">)</span><span style="color:#7DCFFF;">}</span><span style="color:#BA3C97;">&gt;</span><span style="color:#9AA5CE;">Set All Uncompleted</span><span style="color:#BA3C97;">&lt;/</span><span style="color:#F7768E;">button</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#BA3C97;">&lt;/</span><span style="color:#F7768E;">div</span><span style="color:#BA3C97;">&gt;</span></span></code></pre></div></li></ol><p>Make sure the buttons are working as expected before moving on to the next step.</p><h2 id="refactor-from-front-end-to-back-end" tabindex="-1">Refactor from Front-end to Back-end <a class="header-anchor" href="#refactor-from-front-end-to-back-end" aria-label="Permalink to &quot;Refactor from Front-end to Back-end&quot;">​</a></h2><p>With the current state of the <code>setAllCompleted</code> function, each modified task being saved causes an API <code>PUT</code> request handled separately by the server. As the number of tasks in the todo list grows, this may become a performance issue.</p><p>A simple way to prevent this is to expose an API endpoint for <code>setAllCompleted</code> requests, and run the same logic on the server instead of the client.</p><ol><li>Create a new <code>TasksController</code> class, in the <code>shared</code> folder, and refactor the <code>for</code> loop from the <code>setAllCompleted</code> function of the <code>Todo</code>function component into a new,<code>static</code>, <code>setAllCompleted</code>method in the<code>TasksController</code> class, which will run on the server.</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// src/shared/TasksController.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">BackendMethod</span><span style="color:#89DDFF;">,</span><span style="color:#0DB9D7;"> repo</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">Task</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">./Task</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#BB9AF7;"> class</span><span style="color:#C0CAF5;"> TasksController</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#7AA2F7;">BackendMethod</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;"> allowed</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> true</span><span style="color:#9ABDF5;"> })</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">  static</span><span style="color:#9D7CD8;font-style:italic;"> async</span><span style="color:#7AA2F7;"> setAllCompleted</span><span style="color:#9ABDF5;">(</span><span style="color:#E0AF68;">completed</span><span style="color:#89DDFF;">:</span><span style="color:#0DB9D7;"> boolean</span><span style="color:#9ABDF5;">)</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">    const</span><span style="color:#BB9AF7;"> taskRepo</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Task</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#BB9AF7;">    for</span><span style="color:#9ABDF5;"> (</span><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> task</span><span style="color:#89DDFF;"> of</span><span style="color:#BB9AF7;font-style:italic;"> await</span><span style="color:#C0CAF5;"> taskRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">find</span><span style="color:#9ABDF5;">()) {</span></span>
<span class="line"><span style="color:#BB9AF7;font-style:italic;">      await</span><span style="color:#C0CAF5;"> taskRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">save</span><span style="color:#9ABDF5;">({ </span><span style="color:#F7768E;font-weight:bold;">...</span><span style="color:#C0CAF5;">task</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> completed</span><span style="color:#9ABDF5;"> })</span></span>
<span class="line"><span style="color:#9ABDF5;">    }</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div><p>The <code>@BackendMethod</code> decorator tells Remult to expose the method as an API endpoint (the <code>allowed</code> property will be discussed later on in this tutorial).</p><p><strong>Unlike the front-end <code>Remult</code> object, the server implementation interacts directly with the database.</strong></p><ol start="2"><li>Register <code>TasksController</code> by adding it to the <code>controllers</code> array of the <code>options</code> object passed to <code>createRemultServer()</code>, in the server&#39;s <code>api</code> module:</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// src/api.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">//...</span></span>
<span class="line highlighted"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">TasksController</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">./shared/TasksController.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#9D7CD8;font-style:italic;"> const</span><span style="color:#BB9AF7;"> api</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> remultSolidStart</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  //...</span></span>
<span class="line highlighted"><span style="color:#73DACA;">  controllers</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> [</span><span style="color:#7DCFFF;">TasksController</span><span style="color:#9ABDF5;">]</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span></code></pre></div><ol start="3"><li>Replace the <code>for</code> iteration in the <code>setAllCompleted</code> function of the <code>Todo</code>component with a call to the<code>setAllCompleted</code>method in the<code>TasksController</code>.</li></ol><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// src/components/Todo.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">async</span><span style="color:#BB9AF7;"> function</span><span style="color:#7AA2F7;"> setAllCompleted</span><span style="color:#9ABDF5;">(</span><span style="color:#E0AF68;">completed</span><span style="color:#89DDFF;">:</span><span style="color:#0DB9D7;"> boolean</span><span style="color:#9ABDF5;">)</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line highlighted"><span style="color:#BB9AF7;font-style:italic;">  await</span><span style="color:#C0CAF5;"> TasksController</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">setAllCompleted</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">completed</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">Import TasksController</p><p>Remember to add an import of <code>TasksController</code> in <code>src/components/Todo.tsx</code>.</p></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>With Remult backend methods, argument types are compile-time checked. 👍</p></div><p>After the browser refreshed, the <em>&quot;Set all...&quot;</em> buttons function exactly the same, but much faster.</p>`,20)]))}const A=o(l,[["render",t]]);export{F as __pageData,A as default};
