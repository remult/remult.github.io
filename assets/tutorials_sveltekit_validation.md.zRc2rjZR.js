import{_ as a,c as l,o as n,L as o}from"./chunks/framework.DxxKE4lP.js";const F=JSON.parse('{"title":"Validation","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/sveltekit/validation.md","filePath":"tutorials/sveltekit/validation.md","lastUpdated":1731248646000}'),e={name:"tutorials/sveltekit/validation.md"};function t(p,s,c,r,i,d){return n(),l("div",null,s[0]||(s[0]=[o(`<h1 id="validation" tabindex="-1">Validation <a class="header-anchor" href="#validation" aria-label="Permalink to &quot;Validation&quot;">​</a></h1><p>Validating user input is usually required both on the client-side and on the server-side, often causing a violation of the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_blank" rel="noreferrer">DRY</a> design principle. <strong>With Remult, validation code can be placed within the entity class, and Remult will run the validation logic on both the frontend and the relevant API requests.</strong></p><div class="warning custom-block"><p class="custom-block-title">Handling validation errors</p><p>When a validation error occurs, Remult will throw an exception.</p><p>In this tutorial, we will catch these exceptions, and alert the user.</p></div><h2 id="validate-the-title-field" tabindex="-1">Validate the Title Field <a class="header-anchor" href="#validate-the-title-field" aria-label="Permalink to &quot;Validate the Title Field&quot;">​</a></h2><p>Task titles are required. Let&#39;s add a validity check for this rule.</p><ol><li>In the <code>Task</code> entity class, modify the <code>Fields.string</code> decorator for the <code>title</code> field to include an object literal argument and set the object&#39;s <code>validate</code> property to <code>Validators.required</code>.</li></ol><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-gjuxg" id="tab-afqqAem" checked><label data-title="src/shared/Task.ts" for="tab-afqqAem">src/shared/Task.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">Validators</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">string</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#73DACA;">  validate</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> Validators</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">required</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span>
<span class="line"><span style="color:#C0CAF5;">title</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> string</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div></div></div><ol start="2"><li>In <code>+page.svelte</code>, sorround the <code>addTask</code> in a <code>try-catch</code> block to capture the error:</li></ol><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-9ayB0" id="tab-5M66YR_" checked><label data-title="src/routes/+page.svelte" for="tab-5M66YR_">src/routes/+page.svelte</label></div><div class="blocks"><div class="language-svelte active"><button title="Copy Code" class="copy"></button><span class="lang">svelte</span><pre class="shiki tokyo-night has-diff vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#A9B1D6;">let newTaskTitle = $state(&quot;&quot;);</span></span>
<span class="line"><span style="color:#A9B1D6;">const addTask = async (event: Event) =&gt; </span><span style="color:#7DCFFF;">{</span></span>
<span class="line"><span style="color:#C0CAF5;">  event</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">preventDefault</span><span style="color:#9ABDF5;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#BB9AF7;">  try</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">    const</span><span style="color:#BB9AF7;"> newTask</span><span style="color:#89DDFF;"> =</span><span style="color:#BB9AF7;font-style:italic;"> await</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Task</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">insert</span><span style="color:#9ABDF5;">({ </span><span style="color:#73DACA;">title</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> newTaskTitle</span><span style="color:#9ABDF5;"> })</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C0CAF5;">    tasks</span><span style="color:#89DDFF;"> =</span><span style="color:#9ABDF5;"> [</span><span style="color:#F7768E;font-weight:bold;">...</span><span style="color:#7DCFFF;">tasks</span><span style="color:#89DDFF;">,</span><span style="color:#7DCFFF;"> newTask</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C0CAF5;">    newTaskTitle</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &quot;&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#9ABDF5;">  }</span><span style="color:#BB9AF7;"> catch</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">error</span><span style="color:#9ABDF5;">)</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line diff add"><span style="color:#7AA2F7;">    alert</span><span style="color:#9ABDF5;">((</span><span style="color:#C0CAF5;">error</span><span style="color:#89DDFF;"> as</span><span style="color:#9ABDF5;"> { </span><span style="color:#73DACA;">message</span><span style="color:#89DDFF;">:</span><span style="color:#0DB9D7;"> string</span><span style="color:#9ABDF5;"> })</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">message</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#7DCFFF;">}</span><span style="color:#A9B1D6;">;</span></span></code></pre></div></div></div><p>After the browser is refreshed, try creating a new task or saving an existing one with an empty title - the &quot;<strong>Title: Should not be empty</strong>&quot; error message is displayed.</p><p>Sorround all the other functions in <code>try-catch</code> in a similar manner and notify the user accordingly.</p><h3 id="implicit-server-side-validation" tabindex="-1">Implicit server-side validation <a class="header-anchor" href="#implicit-server-side-validation" aria-label="Permalink to &quot;Implicit server-side validation&quot;">​</a></h3><p>The validation code we&#39;ve added is called by Remult on the server-side to validate any API calls attempting to modify the <code>title</code> field.</p><p>Try making the following <code>POST</code> http request to the <code>http://localhost:5173/api/tasks</code> endpoint, providing an invalid title.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#C0CAF5;">curl</span><span style="color:#E0AF68;"> -i</span><span style="color:#9ECE6A;"> http://localhost:5173/api/tasks</span><span style="color:#E0AF68;"> -d</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">{</span><span style="color:#89DDFF;">\\&quot;</span><span style="color:#9ECE6A;">title</span><span style="color:#89DDFF;">\\&quot;</span><span style="color:#9ECE6A;">: </span><span style="color:#89DDFF;">\\&quot;\\&quot;</span><span style="color:#9ECE6A;">}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#E0AF68;"> -H</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">Content-Type: application/json</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>A HTTP <strong>400 Bad Request</strong> error is returned and the validation error text is included in the body:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#9ABDF5;">{</span></span>
<span class="line"><span style="color:#73DACA;">  modelState</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> { </span><span style="color:#73DACA;">title</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">Should not be empty</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;"> }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">  message</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">Title: Should not be empty</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You should probably update all your code to handle these errors gracefully with <code>try-catch</code> blocks.</p></div><h2 id="custom-validation" tabindex="-1">Custom Validation <a class="header-anchor" href="#custom-validation" aria-label="Permalink to &quot;Custom Validation&quot;">​</a></h2><p>Remult accords you the ability to easly create your own validation rules.</p><p>The <code>validate</code> property allows an arrow function which accepts an instance of the entity to be validated. This function will be called to validate input on both front-end and back-end.</p><p>Try something like this and see what happens:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-TUDAk" id="tab-b65TVPx" checked><label data-title="src/shared/Task.ts" for="tab-b65TVPx">src/shared/Task.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">string</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C0CAF5;">Task</span><span style="color:#89DDFF;">&gt;</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#7AA2F7;">  validate</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> (</span><span style="color:#E0AF68;">task</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#BB9AF7;">    if</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">task</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">title</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">length</span><span style="color:#BB9AF7;"> &lt;</span><span style="color:#FF9E64;"> 3</span><span style="color:#9ABDF5;">) </span><span style="color:#BB9AF7;">throw</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">The title must be at least 3 characters long</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span>
<span class="line"><span style="color:#C0CAF5;">title</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &quot;&quot;</span></span></code></pre></div></div></div>`,23)]))}const D=a(e,[["render",t]]);export{F as __pageData,D as default};
