import{_ as s,o as n,c as a,R as l}from"./chunks/framework.UFCy2Zbw.js";const u=JSON.parse('{"title":"Authentication and Authorization","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/react-next/auth.md","filePath":"tutorials/react-next/auth.md","lastUpdated":1717234846000}'),o={name:"tutorials/react-next/auth.md"},e=l(`<h1 id="authentication-and-authorization" tabindex="-1">Authentication and Authorization <a class="header-anchor" href="#authentication-and-authorization" aria-label="Permalink to &quot;Authentication and Authorization&quot;">​</a></h1><p>Our todo app is nearly functionally complete, but it still doesn&#39;t fulfill a very basic requirement - that users should log in before they can view, create or modify tasks.</p><p>Remult provides a flexible mechanism that enables placing <strong>code-based authorization rules</strong> at various levels of the application&#39;s API. To maintain high code cohesion, <strong>entity and field-level authorization code should be placed in entity classes</strong>.</p><p><strong>Remult is completely unopinionated when it comes to user authentication.</strong> You are free to use any kind of authentication mechanism, and only required to provide Remult with an object which implements the Remult <code>UserInfo</code> interface.</p><p>In this tutorial, we&#39;ll use <a href="https://next-auth.js.org/" target="_blank" rel="noreferrer">NextAuth.js</a> for authentication.</p><h2 id="tasks-crud-requires-sign-in" tabindex="-1">Tasks CRUD Requires Sign-in <a class="header-anchor" href="#tasks-crud-requires-sign-in" aria-label="Permalink to &quot;Tasks CRUD Requires Sign-in&quot;">​</a></h2><p>This rule is implemented within the <code>Task</code> <code>@Entity</code> decorator, by modifying the value of the <code>allowApiCrud</code> property. This property can be set to a function that accepts a <code>Remult</code> argument and returns a <code>boolean</code> value. Let&#39;s use the <code>Allow.authenticated</code> function from Remult.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">// src/app/shared/Task.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">Entity</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;tasks&quot;</span><span style="color:#D4D4D4;">, {</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">    allowApiCrud:</span><span style="color:#9CDCFE;"> Allow</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">authenticated</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">Import Allow</p><p>This code requires adding an import of <code>Allow</code> from <code>remult</code>.</p></div><p>After the browser refreshes, <strong>the list of tasks disappeared</strong> and the user can no longer create new tasks.</p><details class="details custom-block"><summary>Inspect the HTTP error returned by the API using cURL</summary><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#DCDCAA;">curl</span><span style="color:#569CD6;"> -i</span><span style="color:#CE9178;"> http://localhost:3000/api/tasks</span></span></code></pre></div></details><div class="danger custom-block"><p class="custom-block-title">Authorized server-side code can still modify tasks</p><p>Although client CRUD requests to <code>tasks</code> API endpoints now require a signed-in user, the API endpoint created for our <code>setAllCompleted</code> server function remains available to unauthenticated requests. Since the <code>allowApiCrud</code> rule we implemented does not affect the server-side code&#39;s ability to use the <code>Task</code> entity class for performing database CRUD operations, <strong>the <code>setAllCompleted</code> function still works as before</strong>.</p><p>To fix this, let&#39;s implement the same rule using the <code>@BackendMethod</code> decorator of the <code>setAllCompleted</code> method of <code>TasksController</code>.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">// src/shared/TasksController.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">BackendMethod</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">allowed:</span><span style="color:#9CDCFE;"> Allow</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">authenticated</span><span style="color:#D4D4D4;"> })</span></span></code></pre></div><p><strong>This code requires adding an import of <code>Allow</code> from <code>remult</code>.</strong></p></div><h2 id="user-authentication" tabindex="-1">User Authentication <a class="header-anchor" href="#user-authentication" aria-label="Permalink to &quot;User Authentication&quot;">​</a></h2><p>Let&#39;s set-up <code>NextAuth.js</code> to authenticate users to our app.</p><h3 id="backend-setup" tabindex="-1">Backend setup <a class="header-anchor" href="#backend-setup" aria-label="Permalink to &quot;Backend setup&quot;">​</a></h3><ol><li><p>Install <code>next-auth</code>:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#DCDCAA;">npm</span><span style="color:#CE9178;"> i</span><span style="color:#CE9178;"> next-auth</span></span></code></pre></div></li><li><p><code>NextAuth</code> requires a &quot;secret&quot; used to encrypt the NextAuth.js JWT, see <a href="https://next-auth.js.org/configuration/options#nextauth_secret" target="_blank" rel="noreferrer">Options | NextAuth.js</a> for more info.</p><p>Create a file called <code>.env.local</code> and set the <code>NEXTAUTH_SECRET</code> to a random string.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dark-plus vp-code"><code><span class="line"><span>// .env.local</span></span>
<span class="line"><span></span></span>
<span class="line"><span>NEXTAUTH_SECRET=something-secret</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>you can use an <a href="https://www.uuidgenerator.net/" target="_blank" rel="noreferrer">online UUID generator</a> to generate a completely random string</p></div></li><li><p>Create an <code>auth</code> folder within the &#39;api&#39; folder, and inside it, create a <code>[...nextauth]</code> subdirectory. Inside the <code>app/api/auth/[...nextauth]</code> directory, craft an <code>auth.ts</code> file with the following code.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">// src/auth.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> NextAuth</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">getServerSession</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;next-auth/next&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> Credentials</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;next-auth/providers/credentials&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">UserInfo</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> validUsers</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">UserInfo</span><span style="color:#D4D4D4;">[] = [</span></span>
<span class="line"><span style="color:#D4D4D4;">  { </span><span style="color:#9CDCFE;">id:</span><span style="color:#CE9178;"> &#39;1&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &#39;Jane&#39;</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#D4D4D4;">  { </span><span style="color:#9CDCFE;">id:</span><span style="color:#CE9178;"> &#39;2&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &#39;Steve&#39;</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> findUser</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">null</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> validUsers</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> user</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> auth</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">NextAuth</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  providers:</span><span style="color:#D4D4D4;"> [</span></span>
<span class="line"><span style="color:#DCDCAA;">    Credentials</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">      credentials:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">        name:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">          placeholder:</span><span style="color:#CE9178;"> &#39;Try Steve or Jane&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">        },</span></span>
<span class="line"><span style="color:#D4D4D4;">      },</span></span>
<span class="line"><span style="color:#DCDCAA;">      authorize</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">credentials</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> findUser</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">credentials</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) || </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    }),</span></span>
<span class="line"><span style="color:#D4D4D4;">  ],</span></span>
<span class="line"><span style="color:#9CDCFE;">  callbacks:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">    session</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> ({ </span><span style="color:#9CDCFE;">session</span><span style="color:#D4D4D4;"> }) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span>
<span class="line"><span style="color:#D4D4D4;">      ...</span><span style="color:#9CDCFE;">session</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">      user:</span><span style="color:#DCDCAA;"> findUser</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">session</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">    }),</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> async</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> getUserOnServer</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> session</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#DCDCAA;"> getServerSession</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#DCDCAA;"> findUser</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">session</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><p>This (very) simplistic NextAuth.js <a href="https://next-auth.js.org/providers/credentials" target="_blank" rel="noreferrer">Credentials</a> authorizes users by looking up the user&#39;s name in a predefined list of valid users.</p><p>We&#39;ve configured the <code>session</code> <code>callback</code> to include the user info as part of the session info, so that remult on the frontend will have the authorization info.</p></li><li><p>Create an <code>auth</code> folder within the &#39;api&#39; folder, and inside it, create a <code>[...nextauth]</code> subdirectory. Inside the <code>app/api/auth/[...nextauth]</code> directory, craft a <code>route.ts</code> file with the following code.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">// src/app/api/auth/[...nextauth]/route.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">auth</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;../../../../auth&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">auth</span><span style="color:#C586C0;"> as</span><span style="color:#9CDCFE;"> GET</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">auth</span><span style="color:#C586C0;"> as</span><span style="color:#9CDCFE;"> POST</span><span style="color:#D4D4D4;"> }</span></span></code></pre></div></li></ol><h3 id="frontend-setup" tabindex="-1">Frontend setup <a class="header-anchor" href="#frontend-setup" aria-label="Permalink to &quot;Frontend setup&quot;">​</a></h3><ol><li><p>Create a <code>src/components/auth.tsx</code> file, and place the following code to it:</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">// src/components/auth.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">signIn</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">signOut</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">useSession</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;next-auth/react&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">useEffect</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;react&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">UserInfo</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> Todo</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;./todo&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> Auth</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> session</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useSession</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#9CDCFE;">  remult</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">session</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">user</span><span style="color:#C586C0;"> as</span><span style="color:#4EC9B0;"> UserInfo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">  useEffect</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">session</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">status</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&#39;unauthenticated&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#DCDCAA;">signIn</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">  }, [</span><span style="color:#9CDCFE;">session</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">session</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">status</span><span style="color:#D4D4D4;"> !== </span><span style="color:#CE9178;">&#39;authenticated&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#808080;"> &lt;&gt;&lt;/&gt;</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">      Hello </span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">name</span><span style="color:#569CD6;">}{</span><span style="color:#CE9178;">&#39; &#39;</span><span style="color:#569CD6;">}</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> signOut</span><span style="color:#D4D4D4;">()</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Sign Out</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#4EC9B0;">Todo</span><span style="color:#808080;"> /&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">  )</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div></li><li><p>Update the <code>src/app/page.tsx</code> with the highlighted changes:</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">// src/app/page.tsx</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#CE9178;">&quot;use client&quot;</span></span>
<span class="line highlighted"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">SessionProvider</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;next-auth/react&quot;</span></span>
<span class="line highlighted"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> Auth</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &quot;../components/auth&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> Home</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line highlighted"><span style="color:#808080;">    &lt;</span><span style="color:#4EC9B0;">SessionProvider</span><span style="color:#808080;">&gt;</span></span>
<span class="line highlighted"><span style="color:#808080;">      &lt;</span><span style="color:#4EC9B0;">Auth</span><span style="color:#808080;"> /&gt;</span></span>
<span class="line highlighted"><span style="color:#808080;">    &lt;/</span><span style="color:#4EC9B0;">SessionProvider</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">  )</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div></li></ol><h3 id="connect-remult-next-on-the-backend" tabindex="-1">Connect Remult-Next On the Backend <a class="header-anchor" href="#connect-remult-next-on-the-backend" aria-label="Permalink to &quot;Connect Remult-Next On the Backend&quot;">​</a></h3><p>Once an authentication flow is established, integrating it with Remult in the backend is as simple as providing Remult with a <code>getUser</code> function that uses the <code>getUserOnServer</code> function we&#39;ve created in <code>src/auth.ts</code></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">// src/api.ts</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">getUserOnServer</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;./auth&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> api</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">remultNextApp</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#6A9955;">  //...</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">  getUser:</span><span style="color:#9CDCFE;"> getUserOnServer</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"><span style="color:#6A9955;">//...</span></span></code></pre></div><p>The todo app now supports signing in and out, with <strong>all access restricted to signed in users only</strong>.</p><h2 id="role-based-authorization" tabindex="-1">Role-based Authorization <a class="header-anchor" href="#role-based-authorization" aria-label="Permalink to &quot;Role-based Authorization&quot;">​</a></h2><p>Usually, not all application users have the same privileges. Let&#39;s define an <code>admin</code> role for our todo app, and enforce the following authorization rules:</p><ul><li>All signed in users can see the list of tasks.</li><li>All signed in users can set specific tasks as <code>completed</code>.</li><li>Only users belonging to the <code>admin</code> role can create, delete or edit the titles of tasks.</li></ul><ol><li>Modify the highlighted lines in the <code>Task</code> entity class to reflect the top three authorization rules.</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">// src/shared/Task.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Allow</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Entity</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Fields</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;remult&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">Entity</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Task</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#CE9178;">&quot;tasks&quot;</span><span style="color:#D4D4D4;">, {</span></span>
<span class="line"><span style="color:#9CDCFE;">  allowApiCrud:</span><span style="color:#9CDCFE;"> Allow</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">authenticated</span><span style="color:#D4D4D4;">,</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">  allowApiInsert:</span><span style="color:#CE9178;"> &quot;admin&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">  allowApiDelete:</span><span style="color:#CE9178;"> &quot;admin&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> Task</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  @</span><span style="color:#9CDCFE;">Fields</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">uuid</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#9CDCFE;">  id</span><span style="color:#D4D4D4;">!: </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  @</span><span style="color:#9CDCFE;">Fields</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">string</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#DCDCAA;">    validate</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">      if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">title</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">throw</span><span style="color:#CE9178;"> &quot;Too Short&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">    allowApiUpdate</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;admin&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#9CDCFE;">  title</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  @</span><span style="color:#9CDCFE;">Fields</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">boolean</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#9CDCFE;">  completed</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><ol start="2"><li>Let&#39;s give the user <em>&quot;Jane&quot;</em> the <code>admin</code> role by modifying the <code>roles</code> array of her <code>validUsers</code> entry.</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">// src/auth.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> validUsers</span><span style="color:#D4D4D4;"> = [</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">  { </span><span style="color:#9CDCFE;">id:</span><span style="color:#CE9178;"> &quot;1&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &quot;Jane&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">roles:</span><span style="color:#D4D4D4;"> [</span><span style="color:#CE9178;">&quot;admin&quot;</span><span style="color:#D4D4D4;">] },</span></span>
<span class="line"><span style="color:#D4D4D4;">  { </span><span style="color:#9CDCFE;">id:</span><span style="color:#CE9178;"> &quot;2&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &quot;Steve&quot;</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#D4D4D4;">]</span></span></code></pre></div><p><strong>Sign in to the app as <em>&quot;Steve&quot;</em> to test that the actions restricted to <code>admin</code> users are not allowed. 🔒</strong></p><h2 id="role-based-authorization-on-the-frontend" tabindex="-1">Role-based Authorization on the Frontend <a class="header-anchor" href="#role-based-authorization-on-the-frontend" aria-label="Permalink to &quot;Role-based Authorization on the Frontend&quot;">​</a></h2><p>From a user experience perspective it only makes sense that users that can&#39;t add or delete, would not see these buttons.</p><p>Let&#39;s reuse the same definitions on the Frontend.</p><p>We&#39;ll use the entity&#39;s metadata to only show the form if the user is allowed to insert</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">// src/components/todo.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">main</span><span style="color:#808080;">&gt;</span></span>
<span class="line highlighted"><span style="color:#569CD6;">  {</span><span style="color:#9CDCFE;">taskRepo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">metadata</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">apiInsertAllowed</span><span style="color:#D4D4D4;">() &amp;&amp; (</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">form</span><span style="color:#9CDCFE;"> onSubmit</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">addTask</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">input</span></span>
<span class="line"><span style="color:#9CDCFE;">        value</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">newTaskTitle</span><span style="color:#569CD6;">}</span></span>
<span class="line"><span style="color:#9CDCFE;">        placeholder</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;What needs to be done?&quot;</span></span>
<span class="line"><span style="color:#9CDCFE;">        onChange</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">e</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#DCDCAA;"> setNewTaskTitle</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span></span>
<span class="line"><span style="color:#808080;">      /&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Add</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">form</span><span style="color:#808080;">&gt;</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">  )</span><span style="color:#569CD6;">}</span></span>
<span class="line"><span style="color:#D4D4D4;">  ...</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">main</span><span style="color:#808080;">&gt;</span></span></code></pre></div><p>And let&#39;s do the same for the <code>delete</code> button:</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">// src/components/todo.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">div</span><span style="color:#9CDCFE;"> key</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">id</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">input</span></span>
<span class="line"><span style="color:#9CDCFE;">      type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;checkbox&quot;</span></span>
<span class="line"><span style="color:#9CDCFE;">      checked</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">completed</span><span style="color:#569CD6;">}</span></span>
<span class="line"><span style="color:#9CDCFE;">      onChange</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">e</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#DCDCAA;"> setCompleted</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">checked</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span></span>
<span class="line"><span style="color:#808080;">    /&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">input</span><span style="color:#9CDCFE;"> value</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">title</span><span style="color:#569CD6;">}</span><span style="color:#9CDCFE;"> onChange</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">e</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#DCDCAA;"> setTitle</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span><span style="color:#808080;"> /&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">saveTask</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Save</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line highlighted"><span style="color:#569CD6;">    {</span><span style="color:#9CDCFE;">taskRepo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">metadata</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">apiDeleteAllowed</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">) &amp;&amp; (</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">deleteTask</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Delete</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">    )</span><span style="color:#569CD6;">}</span></span>
<span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span></code></pre></div><p>This way we can keep the frontend consistent with the <code>api</code>&#39;s Authorization rules</p><ul><li>Note We send the <code>task</code> to the <code>apiDeleteAllowed</code> method, because the <code>apiDeleteAllowed</code> option, can be sophisticated and can also be based on the specific item&#39;s values.</li></ul>`,39),p=[e];function t(c,r,D,i,y,C){return n(),a("div",null,p)}const h=s(o,[["render",t]]);export{u as __pageData,h as default};
