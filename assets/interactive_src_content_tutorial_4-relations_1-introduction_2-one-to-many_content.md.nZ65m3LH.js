import{_ as e,c as t,o,a5 as a}from"./chunks/framework.C7bC4sbb.js";const s="/assets/to-many-in-the-admin.BE5O4b_n.png",D=JSON.parse('{"title":"One to Many","description":"","frontmatter":{"type":"lesson","title":"One to Many","template":"relations","focus":"/shared/Customer.ts"},"headers":[],"relativePath":"interactive/src/content/tutorial/4-relations/1-introduction/2-one-to-many/content.md","filePath":"interactive/src/content/tutorial/4-relations/1-introduction/2-one-to-many/content.md","lastUpdated":1729692427000}'),n={name:"interactive/src/content/tutorial/4-relations/1-introduction/2-one-to-many/content.md"},r=a(`<h1 id="one-to-many" tabindex="-1">One to Many <a class="header-anchor" href="#one-to-many" aria-label="Permalink to &quot;One to Many&quot;">​</a></h1><p>In this lesson, we&#39;ll explore how to set up and work with a one-to-many relation in Remult, where one <code>Customer</code> can have many <code>Order</code> records.</p><h2 id="defining-the-relation" tabindex="-1">Defining the Relation <a class="header-anchor" href="#defining-the-relation" aria-label="Permalink to &quot;Defining the Relation&quot;">​</a></h2><p>We begin by setting the relation in the <code>shared/Customer.ts</code> file. This one-to-many relation will allow a customer to be linked to multiple orders.</p><div class="language-file:/shared/Customer.ts"><button title="Copy Code" class="copy"></button><span class="lang">file:/shared/Customer.ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line highlighted"><span></span></span></code></pre></div><p>This creates a one-to-many relation where each <code>Customer</code> can have multiple <code>Order</code> records. The <code>orders</code> field is now an array of <code>Order</code> objects.</p><h2 id="fetching-related-data" tabindex="-1">Fetching Related Data <a class="header-anchor" href="#fetching-related-data" aria-label="Permalink to &quot;Fetching Related Data&quot;">​</a></h2><p>Just like with many-to-one relations, you can use the <code>include</code> option in the <code>find</code> method to fetch related <code>Order</code> data for each <code>Customer</code>. This ensures that the associated orders are included in your query results.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> customers</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#DCDCAA;"> repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Customer</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">({</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">  include:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">    orders:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">,</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre></div><p>This query fetches customers and includes their related orders.</p><p>You can experiment by toggling the <code>include</code> value between <code>true</code> and <code>false</code> to observe how the results change.</p><h2 id="inserting-child-entities-orders-into-a-parent-customer" tabindex="-1">Inserting Child Entities (Orders) into a Parent (Customer) <a class="header-anchor" href="#inserting-child-entities-orders-into-a-parent-customer" aria-label="Permalink to &quot;Inserting Child Entities (Orders) into a Parent (Customer)&quot;">​</a></h2><p>You can also insert related <code>Order</code> items directly into a <code>Customer</code> repository. For example, in the <code>shared/SeedData.ts</code> file, you can insert customer records and their corresponding orders as shown below:</p><div class="language-file:/shared/SeedData.ts"><button title="Copy Code" class="copy"></button><span class="lang">file:/shared/SeedData.ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span></span></span></code></pre></div><p>Here’s what’s happening:</p><ul><li>First, we create three customer records using <code>cRepo.insert()</code>.</li><li>Then, we use <code>cRepo.relations(c1).orders.insert()</code> to insert orders related to <code>Customer 1</code>.</li><li>Similarly, we insert related orders for <code>Customer 2</code> and <code>Customer 3</code>.</li></ul><p>By using the <code>relations</code> method provided by the repository, you can easily manage the insertion of related child entities (in this case, orders) directly into their parent (customer).</p><h2 id="repository-methods-for-relations" tabindex="-1">Repository Methods for Relations <a class="header-anchor" href="#repository-methods-for-relations" aria-label="Permalink to &quot;Repository Methods for Relations&quot;">​</a></h2><p>Most repository methods, such as <code>find</code>, <code>insert</code>, <code>update</code>, <code>updateMany</code>, <code>delete</code>, and <code>deleteMany</code>, can be used in this way through the <code>relations</code> method. This allows you to perform various operations on related entities within the context of their parent entity.</p><p>For example, you can retrieve all orders related to a customer:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> ordersForCustomer</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> cRepo</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">relations</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">customer</span><span style="color:#D4D4D4;">).</span><span style="color:#9CDCFE;">orders</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">()</span></span></code></pre></div><p>This flexibility makes it easy to manage related data within Remult, simplifying many common data manipulation tasks.</p><hr><p>In this lesson, we&#39;ve learned how to define a one-to-many relation between <code>Customer</code> and <code>Order</code>, and how to query and insert related data using Remult. These techniques give you the power to effectively model and work with complex data relationships in your applications.</p><p>Here’s a polished version of the text:</p><hr><h3 id="relations-in-remult-admin" tabindex="-1">Relations in Remult Admin <a class="header-anchor" href="#relations-in-remult-admin" aria-label="Permalink to &quot;Relations in Remult Admin&quot;">​</a></h3><p>In the Remult Admin UI, <code>one-to-many</code> relations are displayed directly within the table view. For example, you can see all the orders associated with a customer right from the <code>Customer</code> table view.</p><p><img src="`+s+'" alt="Customers and their orders"></p><p>To explore how this works, click the &quot;Remult Admin UI&quot; link at the bottom left of the interface.</p>',30),i=[r];function l(d,c,p,h,u,m){return o(),t("div",null,i)}const C=e(n,[["render",l]]);export{D as __pageData,C as default};
