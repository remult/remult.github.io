import{_ as s,c as a,o as n,a5 as l}from"./chunks/framework.QXCuR9m2.js";const u=JSON.parse('{"title":"Authentication and Authorization","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/sveltekit/auth.md","filePath":"tutorials/sveltekit/auth.md","lastUpdated":1719513096000}'),o={name:"tutorials/sveltekit/auth.md"},e=l(`<h1 id="authentication-and-authorization" tabindex="-1">Authentication and Authorization <a class="header-anchor" href="#authentication-and-authorization" aria-label="Permalink to &quot;Authentication and Authorization&quot;">​</a></h1><p>Our todo app is nearly functionally complete, but it still doesn&#39;t fulfill a very basic requirement - that users should log in before they can view, create or modify tasks.</p><p>Remult provides a flexible mechanism that enables placing <strong>code-based authorization rules</strong> at various levels of the application&#39;s API. To maintain high code cohesion, <strong>entity and field-level authorization code should be placed in entity classes</strong>.</p><p><strong>Remult is completely unopinionated when it comes to user authentication.</strong> You are free to use any kind of authentication mechanism. The only requirement is that you provide Remult with an object which implements the Remult <code>UserInfo</code> interface:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> interface</span><span style="color:#4EC9B0;"> UserInfo</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">  id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#9CDCFE;">  name</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#9CDCFE;">  roles</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">[]</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><p>In this tutorial, we&#39;ll use <a href="https://authjs.dev/" target="_blank" rel="noreferrer">Auth.js</a> for authentication.</p><h2 id="tasks-crud-requires-sign-in" tabindex="-1">Tasks CRUD Requires Sign-in <a class="header-anchor" href="#tasks-crud-requires-sign-in" aria-label="Permalink to &quot;Tasks CRUD Requires Sign-in&quot;">​</a></h2><p>This rule is implemented within the <code>Task</code> <code>@Entity</code> decorator, by modifying the value of the <code>allowApiCrud</code> property. This property can be set to a function that accepts a <code>Remult</code> argument and returns a <code>boolean</code> value. Let&#39;s use the <code>Allow.authenticated</code> function from Remult.</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-Ob-am" id="tab-7gAjxXN" checked><label for="tab-7gAjxXN">src/app/shared/Task.ts</label><input type="radio" name="group-Ob-am" id="tab-hEyhpUr"><label for="tab-hEyhpUr">sh</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus has-diff vp-code" tabindex="0"><code><span class="line diff add"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Allow</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">Entity</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;tasks&quot;</span><span style="color:#D4D4D4;">, {</span></span>
<span class="line diff add"><span style="color:#9CDCFE;">    allowApiCrud:</span><span style="color:#9CDCFE;"> Allow</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">authenticated</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre></div><p>After the browser refreshes, <strong>the list of tasks disappears</strong> and the user can no longer create new tasks.</p><details class="details custom-block"><summary>Inspect the HTTP error returned by the API using cURL</summary><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">curl</span><span style="color:#569CD6;"> -i</span><span style="color:#CE9178;"> http://localhost:5173/api/tasks</span></span></code></pre></div></details></div></div><h3 id="server-side-authorization" tabindex="-1">Server-side Authorization <a class="header-anchor" href="#server-side-authorization" aria-label="Permalink to &quot;Server-side Authorization&quot;">​</a></h3><p>Open your database (<code>db/tasks.json</code>), and click on <strong>Mark All Completed</strong> and <strong>Mark All Incomplete</strong> buttons in turn. You will notice that the <code>completed</code> field is toggling.</p><p>Although client CRUD requests to <code>tasks</code> API endpoints now require a signed-in user, the API endpoint created for our <code>setAllCompleted</code> server function remains available to unauthenticated requests. Since the <code>allowApiCrud</code> rule we implemented does not affect the server-side code&#39;s ability to use the <code>Task</code> entity class for performing database CRUD operations, <strong>the <code>setAllCompleted</code> function still works as before</strong>.</p><p>To fix this, let&#39;s implement the same rule using the <code>@BackendMethod</code> decorator of the <code>setAllCompleted</code> method of <code>TasksController</code>.</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-UIf3z" id="tab-fTQ95Qa" checked><label for="tab-fTQ95Qa">src/shared/TasksController.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Allow</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">BackendMethod</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">allowed:</span><span style="color:#9CDCFE;"> Allow</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">authenticated</span><span style="color:#D4D4D4;"> })</span></span></code></pre></div></div></div><p>Try toggling the <code>completed</code> field and you will notice that we now require to be authenticated - even on the backend.</p><h2 id="user-authentication" tabindex="-1">User Authentication <a class="header-anchor" href="#user-authentication" aria-label="Permalink to &quot;User Authentication&quot;">​</a></h2><p>Let&#39;s set-up <code>Auth.js</code> to authenticate users to our app.</p><h3 id="backend-setup" tabindex="-1">Backend setup <a class="header-anchor" href="#backend-setup" aria-label="Permalink to &quot;Backend setup&quot;">​</a></h3><ol><li><p>Install <code>auth-core</code> and <code>auth-sveltekit</code>:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npm</span><span style="color:#CE9178;"> i</span><span style="color:#CE9178;"> @auth/core</span><span style="color:#CE9178;"> @auth/sveltekit</span></span></code></pre></div></li><li><p><code>Auth.js</code> requires a &quot;secret&quot; - a random string used to hash tokens, sign cookies and generate cryptographic keys.</p></li></ol><p>Create a file called <code>.env.local</code> at the root of the project, and set the secret <code>AUTH_SECRET</code> to a random string.</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-kCjMT" id="tab-_ll6w1Y" checked><label for="tab-_ll6w1Y">.env.local</label></div><div class="blocks"><div class="language-bash active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">AUTH_SECRET</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">something-secret</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can use an <a href="https://www.uuidgenerator.net/" target="_blank" rel="noreferrer">online UUID generator</a> to generate a completely random string</p></div></div></div><ol start="3"><li>In <code>+hooks.server.ts</code>, let&#39;s create two handles</li></ol><ul><li><code>handleAuth</code> to handle authentication from <code>Auth.js</code> with a list of allowed users.</li><li><code>handleRemult</code> to provide the remult context.</li></ul><p>Using Sveltekit&#39;s <code>sequence</code>, we ensure the chain of handles. The results would look like this:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-CWoXk" id="tab-5IPnngK" checked><label for="tab-5IPnngK">src/hooks.server.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#C586C0;"> type</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Handle</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;@sveltejs/kit&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">sequence</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;@sveltejs/kit/hooks&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">SvelteKitAuth</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;@auth/sveltekit&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> Credentials</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;@auth/sveltekit/providers/credentials&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">_api</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;./routes/api/[...remult]/+server&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#C586C0;"> type</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">UserInfo</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;"> * Users that are allowed to log in.</span></span>
<span class="line"><span style="color:#6A9955;"> */</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> validUsers</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">UserInfo</span><span style="color:#D4D4D4;">[] = [</span></span>
<span class="line"><span style="color:#D4D4D4;">  { </span><span style="color:#9CDCFE;">id:</span><span style="color:#CE9178;"> &#39;1&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &#39;Jane&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">roles:</span><span style="color:#D4D4D4;"> [</span><span style="color:#CE9178;">&#39;admin&#39;</span><span style="color:#D4D4D4;">] },</span></span>
<span class="line"><span style="color:#D4D4D4;">  { </span><span style="color:#9CDCFE;">id:</span><span style="color:#CE9178;"> &#39;2&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &#39;Steve&#39;</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#D4D4D4;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;"> * Handle authentication with authjs as an example</span></span>
<span class="line"><span style="color:#6A9955;"> * Based on article at https://authjs.dev/reference/sveltekit</span></span>
<span class="line"><span style="color:#6A9955;"> */</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">handle</span><span style="color:#D4D4D4;">: </span><span style="color:#4FC1FF;">handleAuth</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">SvelteKitAuth</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  trustHost:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  providers:</span><span style="color:#D4D4D4;"> [</span></span>
<span class="line"><span style="color:#DCDCAA;">    Credentials</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">      credentials:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">        name:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">          placeholder:</span><span style="color:#CE9178;"> &#39;Try Steve or Jane&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">        },</span></span>
<span class="line"><span style="color:#D4D4D4;">      },</span></span>
<span class="line"><span style="color:#DCDCAA;">      authorize</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">info</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span></span>
<span class="line"><span style="color:#9CDCFE;">        validUsers</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> user</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">info</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) || </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    }),</span></span>
<span class="line"><span style="color:#D4D4D4;">  ],</span></span>
<span class="line"><span style="color:#9CDCFE;">  callbacks:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">    session</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> ({ </span><span style="color:#9CDCFE;">session</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">token</span><span style="color:#D4D4D4;"> }) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span>
<span class="line"><span style="color:#D4D4D4;">      ...</span><span style="color:#9CDCFE;">session</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">      user:</span><span style="color:#9CDCFE;"> validUsers</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> user</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">token</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">sub</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">    }),</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;"> * Handle remult server side</span></span>
<span class="line"><span style="color:#6A9955;"> */</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> handleRemult</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Handle</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> ({ </span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;"> }) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#C586C0;"> await</span><span style="color:#9CDCFE;"> _api</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">withRemult</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#C586C0;"> await</span><span style="color:#DCDCAA;"> resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> handle</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">sequence</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#6A9955;">  // 1. Handle authentication</span></span>
<span class="line"><span style="color:#9CDCFE;">  handleAuth</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#6A9955;">  // 2. Handle remult server side</span></span>
<span class="line"><span style="color:#9CDCFE;">  handleRemult</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span></code></pre></div></div></div><p>This (very) simplistic approach use Auth.js <a href="https://next-auth.js.org/providers/credentials" target="_blank" rel="noreferrer">Credentials Provider</a> to authorize users by looking up the user&#39;s name in a predefined list of valid users.</p><p>We&#39;ve configured the <code>session</code> <code>callback</code> to include the user info as part of the session data, so that Remult on the frontend will have the authorization info.</p><ol start="4"><li>Finally, add <code>getUser</code> to <code>remultSveltekit</code> to tell remult who is connected. Inside this function, you have access to <code>event</code>, where the session was set by Auth.js before.</li></ol><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-Qiv5N" id="tab-pzBXnim" checked><label for="tab-pzBXnim">src/routes/api/[...remult]/+server.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus has-diff vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">remultSveltekit</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult/remult-sveltekit&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;./shared/Task&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">TasksController</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;./shared/TasksController&#39;</span></span>
<span class="line diff add"><span style="color:#C586C0;">import</span><span style="color:#C586C0;"> type</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">UserInfo</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> _api</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">remultSveltekit</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  entities:</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#9CDCFE;">  controllers:</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">TasksController</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#DCDCAA;">  getUser</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> async</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line diff add"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> auth</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> event</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">locals</span><span style="color:#D4D4D4;">?.</span><span style="color:#DCDCAA;">auth</span><span style="color:#D4D4D4;">() </span></span>
<span class="line diff add"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> auth</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">user</span><span style="color:#C586C0;"> as</span><span style="color:#4EC9B0;"> UserInfo</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre></div></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In a real life application, you will need to <code>authorize</code> your users going to the database. As Auth is done before remult, the remult object is not available yet. Of course, there is a way, use <code>withRemult</code> as follows</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// old code</span></span>
<span class="line"><span style="color:#6A9955;">// authorize: (info) =&gt; validUsers.find((user) =&gt; user.name === info?.name) || null,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// new code</span></span>
<span class="line"><span style="color:#C8C8C8;">authorize</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">info</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">request</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> res</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> _api</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">withRemult</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">request</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">as</span><span style="color:#4EC9B0;"> any</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">    // remult object is now available</span></span>
<span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> user</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> remult</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">User</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">findFirst</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#6A9955;">      //... getting your  user based on \`info\`</span></span>
<span class="line"><span style="color:#D4D4D4;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#6A9955;">      // Don&#39;t return everything, just what is needed in the frontend</span></span>
<span class="line"><span style="color:#C586C0;">      return</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">        id:</span><span style="color:#9CDCFE;"> user</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">        name:</span><span style="color:#9CDCFE;"> user</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">        roles:</span><span style="color:#9CDCFE;"> user</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">roles</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">      }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    // No user found</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> null</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> res</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div></div><h3 id="frontend-setup" tabindex="-1">Frontend setup <a class="header-anchor" href="#frontend-setup" aria-label="Permalink to &quot;Frontend setup&quot;">​</a></h3><ol><li>Create a new <code>+layout.server.ts</code> to update <code>remult.user</code></li></ol><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-IZ8ye" id="tab-LjLFUD8" checked><label for="tab-LjLFUD8">src/routes/+layout.server.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#C586C0;"> type</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">LayoutServerLoad</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;./$types&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">redirect</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;@sveltejs/kit&quot;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;remult&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// will protect every route in the app</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#DCDCAA;"> load</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">authenticated</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#C586C0;">    throw</span><span style="color:#DCDCAA;"> redirect</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">303</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;/auth/signin&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    user:</span><span style="color:#9CDCFE;"> remult</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">} </span><span style="color:#C586C0;">satisfies</span><span style="color:#4EC9B0;"> LayoutServerLoad</span></span></code></pre></div></div></div><ol start="2"><li>In our front-end (<code>+layout.svelte</code>), update the user globally.</li></ol><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-k6nDr" id="tab-umIKia4" checked><label for="tab-umIKia4">src/routes/+layout.ts</label></div><div class="blocks"><div class="language-svelte active"><button title="Copy Code" class="copy"></button><span class="lang">svelte</span><pre class="shiki dark-plus has-diff vp-code" tabindex="0"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> lang</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;ts&quot;</span><span style="color:#808080;">&gt;</span></span>
<span class="line diff add"><span style="color:#C586C0;">  import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult&#39;</span></span>
<span class="line diff add"><span style="color:#C586C0;">  import</span><span style="color:#C586C0;"> type</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">LayoutData</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;./$types&#39;</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#C586C0;">  export</span><span style="color:#569CD6;"> let</span><span style="color:#9CDCFE;"> data</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">LayoutData</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#C8C8C8;">  $</span><span style="color:#D4D4D4;">: </span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">user</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#C586C0;">svelte</span><span style="color:#D4D4D4;">:</span><span style="color:#569CD6;">head</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">title</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Remult - SvelteKit</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">title</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#C586C0;">svelte</span><span style="color:#D4D4D4;">:</span><span style="color:#569CD6;">head</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#C586C0;">slot</span><span style="color:#808080;"> /&gt;</span></span></code></pre></div></div></div><p>The todo app now supports signing in and out, with <strong>all access restricted to signed in users only</strong>.</p><h2 id="role-based-authorization" tabindex="-1">Role-based Authorization <a class="header-anchor" href="#role-based-authorization" aria-label="Permalink to &quot;Role-based Authorization&quot;">​</a></h2><p>Usually, not all application users have the same privileges. You will notice that our <code>UserInfo</code> contains a <code>roles</code> array. Information contained in this array can be used to enforce role-based authorization.</p><p>For our todo app we need to enforce the following authorization rules:</p><ul><li>All signed in users can see the list of tasks.</li><li>All signed in users can set specific tasks as <code>completed</code>.</li><li>Only users belonging to the <code>admin</code> role can create, delete or edit the titles of tasks.</li></ul><ol><li>Modify the highlighted lines in the <code>Task</code> entity class to enforce the three authorization rules above.</li></ol><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-Q5xLF" id="tab-_meZ-_2" checked><label for="tab-_meZ-_2">src/shared/Task.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Allow</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Entity</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Fields</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">Entity</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Task</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#CE9178;">&#39;tasks&#39;</span><span style="color:#D4D4D4;">, {</span></span>
<span class="line"><span style="color:#9CDCFE;">  allowApiCrud:</span><span style="color:#9CDCFE;"> Allow</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">authenticated</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  allowApiInsert:</span><span style="color:#CE9178;"> &#39;admin&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  allowApiDelete:</span><span style="color:#CE9178;"> &#39;admin&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> Task</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  @</span><span style="color:#9CDCFE;">Fields</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">cuid</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#9CDCFE;">  id</span><span style="color:#D4D4D4;">!: </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  @</span><span style="color:#9CDCFE;">Fields</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">string</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#DCDCAA;">    validate</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">      if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">title</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">        throw</span><span style="color:#CE9178;"> &#39;The title must be at least 3 characters long&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">    },</span></span>
<span class="line"><span style="color:#9CDCFE;">    allowApiUpdate:</span><span style="color:#CE9178;"> &#39;admin&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#9CDCFE;">  title</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  @</span><span style="color:#9CDCFE;">Fields</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">boolean</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#9CDCFE;">  completed</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  @</span><span style="color:#9CDCFE;">Fields</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">createdAt</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#9CDCFE;">  completedAt</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Date</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Date</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div></div></div><p>In our list of users - <code>usersDB</code>; we have defined two users - Jane and Steve; with Jane being assigned an <code>admin</code> role.</p><p><strong>Sign in to the app alternating between <em>&quot;Jane&quot;</em> and <em>&quot;Steve&quot;</em> to test that the actions restricted to <code>admin</code> users are not allowed. 🔒</strong></p><h2 id="role-based-authorization-on-the-frontend" tabindex="-1">Role-based Authorization on the Frontend <a class="header-anchor" href="#role-based-authorization-on-the-frontend" aria-label="Permalink to &quot;Role-based Authorization on the Frontend&quot;">​</a></h2><p>From a user experience perspective it only makes sense that users that can&#39;t add or delete, would not see these buttons.</p><p>Let&#39;s reuse the same definitions on the Frontend.</p><p>We&#39;ll use the entity&#39;s metadata to only show the form if the user is allowed to insert</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-dg3M8" id="tab-T2Xe56y" checked><label for="tab-T2Xe56y">src/routes/+page.svelte</label></div><div class="blocks"><div class="language-svelte active"><button title="Copy Code" class="copy"></button><span class="lang">svelte</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">main</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">	{#</span><span style="color:#C586C0;">if</span><span style="color:#9CDCFE;"> taskRepo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">metadata</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">apiInsertAllowed</span><span style="color:#D4D4D4;">()}</span></span>
<span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#569CD6;">form</span><span style="color:#C586C0;"> on</span><span style="color:#D4D4D4;">:</span><span style="color:#4EC9B0;">submit</span><span style="color:#D4D4D4;">|</span><span style="color:#DCDCAA;">preventDefault</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">addTask</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">			&lt;</span><span style="color:#569CD6;">input</span><span style="color:#C586C0;"> bind</span><span style="color:#D4D4D4;">:</span><span style="color:#4EC9B0;">value</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">newTaskTitle</span><span style="color:#569CD6;">}</span><span style="color:#9CDCFE;"> placeholder</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;What needs to be done?&quot;</span><span style="color:#808080;"> /&gt;</span></span>
<span class="line"><span style="color:#808080;">			&lt;</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Add</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">		&lt;/</span><span style="color:#569CD6;">form</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">	{/</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">main</span><span style="color:#808080;">&gt;</span></span></code></pre></div></div></div><p>And let&#39;s do the same for the <code>delete</code> button:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-2Sw9c" id="tab-goSB9QV" checked><label for="tab-goSB9QV">src/routes/+page.svelte</label></div><div class="blocks"><div class="language-svelte active"><button title="Copy Code" class="copy"></button><span class="lang">svelte</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">input</span></span>
<span class="line"><span style="color:#9CDCFE;">		type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;checkbox&quot;</span></span>
<span class="line"><span style="color:#C586C0;">		bind</span><span style="color:#D4D4D4;">:</span><span style="color:#4EC9B0;">checked</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">completed</span><span style="color:#569CD6;">}</span></span>
<span class="line"><span style="color:#C586C0;">		on</span><span style="color:#D4D4D4;">:</span><span style="color:#4EC9B0;">click</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> setCompleted</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">checked</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span></span>
<span class="line"><span style="color:#808080;">	/&gt;</span></span>
<span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">input</span><span style="color:#9CDCFE;"> name</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;title&quot;</span><span style="color:#C586C0;"> bind</span><span style="color:#D4D4D4;">:</span><span style="color:#4EC9B0;">value</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">title</span><span style="color:#569CD6;">}</span><span style="color:#808080;"> /&gt;</span></span>
<span class="line"><span style="color:#808080;">	&lt;</span><span style="color:#569CD6;">button</span><span style="color:#C586C0;"> on</span><span style="color:#D4D4D4;">:</span><span style="color:#4EC9B0;">click</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> saveTask</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Save</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	{#</span><span style="color:#C586C0;">if</span><span style="color:#9CDCFE;"> taskRepo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">metadata</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">apiDeleteAllowed</span><span style="color:#D4D4D4;">()}</span></span>
<span class="line"><span style="color:#808080;">		&lt;</span><span style="color:#569CD6;">button</span><span style="color:#C586C0;"> on</span><span style="color:#D4D4D4;">:</span><span style="color:#4EC9B0;">click</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> deleteTask</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Delete</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">	{/</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span></code></pre></div></div></div><p>This way we can keep the UI consistent with the <code>api</code>&#39;s Authorization rules</p><ul><li>Note We send the <code>task</code> to the <code>apiDeleteAllowed</code> method, because the <code>apiDeleteAllowed</code> option, can be sophisticated and can also be based on the specific item&#39;s values.</li></ul>`,53),p=[e];function t(c,r,D,i,y,C){return n(),a("div",null,p)}const h=s(o,[["render",t]]);export{u as __pageData,h as default};
