import{_ as s,c as a,o as e,a5 as n}from"./chunks/framework.C7bC4sbb.js";const u=JSON.parse('{"title":"Realtime Updates","description":"","frontmatter":{"type":"lesson","title":"Realtime Updates","focus":"/frontend/Todo.tsx"},"headers":[],"relativePath":"interactive/src/content/tutorial/1-basics/5-live-query/2-realtime-updates/content.md","filePath":"interactive/src/content/tutorial/1-basics/5-live-query/2-realtime-updates/content.md","lastUpdated":1723795207000}'),l={name:"interactive/src/content/tutorial/1-basics/5-live-query/2-realtime-updates/content.md"},o=n(`<h1 id="realtime-updates" tabindex="-1">Realtime Updates <a class="header-anchor" href="#realtime-updates" aria-label="Permalink to &quot;Realtime Updates&quot;">​</a></h1><p>To enable real-time updates, we&#39;ll modify the <code>useEffect</code> hook to use <code>liveQuery</code>.</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">useEffect</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line highlighted"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> taskRepo</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">liveQuery</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">subscribe</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">info</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> setTasks</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">info</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">applyChanges</span><span style="color:#D4D4D4;">))</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">}, [])</span></span></code></pre></div><h3 id="code-explanation" tabindex="-1">Code Explanation <a class="header-anchor" href="#code-explanation" aria-label="Permalink to &quot;Code Explanation&quot;">​</a></h3><ul><li>We use the <code>liveQuery</code> method from <code>taskRepo</code> to subscribe to real-time updates for tasks.</li><li>The <code>subscribe</code> method listens for changes and updates the state with <code>info.applyChanges</code>.</li><li>We return the result of <code>subscribe</code> from the <code>useEffect</code> hook, so that once the component unmounts, it will automatically unsubscribe from the updates.</li></ul><h3 id="try-it-out" tabindex="-1">Try It Out <a class="header-anchor" href="#try-it-out" aria-label="Permalink to &quot;Try It Out&quot;">​</a></h3><p>Try making changes as <code>user-a</code> in the preview and see the effect on <code>user-b</code>. You&#39;ll notice that changes made by one user are immediately reflected for the other user without the need to reload the page.</p><h3 id="implementation-details" tabindex="-1">Implementation Details <a class="header-anchor" href="#implementation-details" aria-label="Permalink to &quot;Implementation Details&quot;">​</a></h3><ul><li>The real-time updates implementation is adapter-based. The default implementation used for development and up to several hundreds of users uses Server-Sent Events (SSE).</li><li>There are multiple adapters available to use other technologies, including third-party providers such as Ably.</li></ul><h3 id="simplifying-state-management" tabindex="-1">Simplifying State Management <a class="header-anchor" href="#simplifying-state-management" aria-label="Permalink to &quot;Simplifying State Management&quot;">​</a></h3><p>Now that we can rely on <code>liveQuery</code>, we no longer need to manually update the <code>tasks</code> state, as <code>liveQuery</code> will handle that for us.</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">async</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> addTask</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">FormEvent</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">  e</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">preventDefault</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#C586C0;">  try</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> newTask</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> taskRepo</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">insert</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">      title:</span><span style="color:#9CDCFE;"> newTaskTitle</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    })</span></span>
<span class="line highlighted"><span style="color:#6A9955;">    // setTasks([...tasks, newTask]);  &lt;-- this line is no longer needed</span></span>
<span class="line"><span style="color:#DCDCAA;">    setNewTaskTitle</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  } </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">any</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#DCDCAA;">    alert</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">error</span><span style="color:#C586C0;"> as</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> }).</span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">async</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> setCompleted</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Task</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">completed</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> updatedTask</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> taskRepo</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">update</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">completed</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line highlighted"><span style="color:#6A9955;">  // setTasks(tasks.map((t) =&gt; t.id === updatedTask.id ? updatedTask : t));  &lt;-- these lines are no longer needed</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">async</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> deleteTask</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Task</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">  try</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">    await</span><span style="color:#9CDCFE;"> taskRepo</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">delete</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">)</span></span>
<span class="line highlighted"><span style="color:#6A9955;">    // setTasks(tasks.filter((t) =&gt; t.id !== task.id));  &lt;-- these lines are no longer needed</span></span>
<span class="line"><span style="color:#D4D4D4;">  } </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">any</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#DCDCAA;">    alert</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">error</span><span style="color:#C586C0;"> as</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> }).</span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><h3 id="code-explanation-1" tabindex="-1">Code Explanation <a class="header-anchor" href="#code-explanation-1" aria-label="Permalink to &quot;Code Explanation&quot;">​</a></h3><ul><li>In the <code>addTask</code>, <code>setCompleted</code>, and <code>deleteTask</code> functions, we removed the lines that manually update the <code>tasks</code> state.</li><li>With <code>liveQuery</code>, the state updates automatically whenever there are changes to the tasks, simplifying our state management.</li></ul>`,14),t=[o];function p(c,r,D,i,y,d){return e(),a("div",null,t)}const h=s(l,[["render",p]]);export{u as __pageData,h as default};
