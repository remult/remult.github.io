import{_ as e,c as t,o,a5 as s}from"./chunks/framework.C7bC4sbb.js";const m=JSON.parse('{"title":"Updating Multiple Tasks","description":"","frontmatter":{"type":"lesson","title":"Updating Multiple Tasks","focus":"/frontend/Todo.tsx"},"headers":[],"relativePath":"interactive/src/content/tutorial/1-basics/6-backend-methods/1-introduction/content.md","filePath":"interactive/src/content/tutorial/1-basics/6-backend-methods/1-introduction/content.md","lastUpdated":1723795207000}'),a={name:"interactive/src/content/tutorial/1-basics/6-backend-methods/1-introduction/content.md"},n=s(`<h1 id="backend-methods" tabindex="-1">Backend Methods <a class="header-anchor" href="#backend-methods" aria-label="Permalink to &quot;Backend Methods&quot;">​</a></h1><p>When performing operations on multiple entity objects, performance considerations may necessitate running them on the server. <strong>With Remult, moving client-side logic to run on the server is a simple refactoring.</strong></p><h2 id="set-all-tasks-as-completed-or-uncompleted" tabindex="-1">Set All Tasks as Completed or Uncompleted <a class="header-anchor" href="#set-all-tasks-as-completed-or-uncompleted" aria-label="Permalink to &quot;Set All Tasks as Completed or Uncompleted&quot;">​</a></h2><p>Let&#39;s add two buttons to the todo app: &quot;Set All Completed&quot; and &quot;Set All Uncompleted&quot;.</p><h3 id="step-1-add-the-setallcompleted-function" tabindex="-1">Step 1: Add the <code>setAllCompleted</code> Function <a class="header-anchor" href="#step-1-add-the-setallcompleted-function" aria-label="Permalink to &quot;Step 1: Add the \`setAllCompleted\` Function&quot;">​</a></h3><p>Add a <code>setAllCompleted</code> async function to the <code>Todo</code> function component, which accepts a <code>completed</code> boolean argument and sets the value of the <code>completed</code> field of all the tasks accordingly.</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line highlighted"><span style="color:#569CD6;">async</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> setAllCompleted</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">completed</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line highlighted"><span style="color:#C586C0;">  for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> task</span><span style="color:#569CD6;"> of</span><span style="color:#C586C0;"> await</span><span style="color:#9CDCFE;"> taskRepo</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line highlighted"><span style="color:#C586C0;">    await</span><span style="color:#9CDCFE;"> taskRepo</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">update</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">, {</span><span style="color:#9CDCFE;">completed</span><span style="color:#D4D4D4;"> });</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">  }</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">}</span></span>
<span class="line highlighted"><span style="color:#DCDCAA;">useEffect</span><span style="color:#D4D4D4;">(...)</span></span></code></pre></div><h3 id="code-explanation" tabindex="-1">Code Explanation <a class="header-anchor" href="#code-explanation" aria-label="Permalink to &quot;Code Explanation&quot;">​</a></h3><ul><li>The <code>setAllCompleted</code> function iterates through the array of <code>Task</code> objects returned from the backend and saves each task back to the backend with a modified value in the <code>completed</code> field.</li></ul><h3 id="step-2-add-buttons-to-the-todo-component" tabindex="-1">Step 2: Add Buttons to the <code>Todo</code> Component <a class="header-anchor" href="#step-2-add-buttons-to-the-todo-component" aria-label="Permalink to &quot;Step 2: Add Buttons to the \`Todo\` Component&quot;">​</a></h3><p>Add the two buttons to the return section of the <code>Todo</code> component, just before the closing <code>&lt;/main&gt;</code> tag. Both of the buttons&#39; <code>onClick</code> events will call the <code>setAllCompleted</code> method with the appropriate value of the <code>completed</code> argument.</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line highlighted"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line highlighted"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> setAllCompleted</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Set All Completed</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line highlighted"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> setAllCompleted</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Set All Uncompleted</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line highlighted"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">&lt;/</span><span style="color:#9CDCFE;">main</span><span style="color:#D4D4D4;">&gt;</span></span></code></pre></div><h3 id="code-explanation-1" tabindex="-1">Code Explanation <a class="header-anchor" href="#code-explanation-1" aria-label="Permalink to &quot;Code Explanation&quot;">​</a></h3><ul><li>We added two buttons with <code>onClick</code> handlers that call the <code>setAllCompleted</code> function with <code>true</code> or <code>false</code>, respectively, to set all tasks as completed or uncompleted.</li></ul><h3 id="try-it-out" tabindex="-1">Try It Out <a class="header-anchor" href="#try-it-out" aria-label="Permalink to &quot;Try It Out&quot;">​</a></h3><p>Make sure the buttons are working as expected before moving on to the next step. Click the &quot;Set All Completed&quot; button to mark all tasks as completed and the &quot;Set All Uncompleted&quot; button to mark all tasks as uncompleted.</p><h3 id="performance-considerations" tabindex="-1">Performance Considerations <a class="header-anchor" href="#performance-considerations" aria-label="Permalink to &quot;Performance Considerations&quot;">​</a></h3><p>With the current state of the <code>setAllCompleted</code> function, each modified task being saved causes an API <code>PUT</code> request handled separately by the server. As the number of tasks in the todo list grows, this may become a performance issue.</p><p>In the next lesson, we&#39;ll refactor this code to address these performance challenges by moving the logic to the server.</p><hr><p>Would you like to proceed with another section or make further adjustments?</p>`,21),l=[n];function p(c,d,r,i,h,D){return o(),t("div",null,l)}const y=e(a,[["render",p]]);export{m as __pageData,y as default};
