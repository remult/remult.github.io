import{_ as a,c as n,o as e,L as l}from"./chunks/framework.DxxKE4lP.js";const d=JSON.parse('{"title":"ApiClient","description":"","frontmatter":{},"headers":[],"relativePath":"docs/ref_apiclient.md","filePath":"docs/ref_apiclient.md","lastUpdated":1725292791000}'),o={name:"docs/ref_apiclient.md"};function t(p,s,r,c,i,F){return e(),n("div",null,s[0]||(s[0]=[l(`<h1 id="apiclient" tabindex="-1">ApiClient <a class="header-anchor" href="#apiclient" aria-label="Permalink to &quot;ApiClient&quot;">​</a></h1><p>Interface for configuring the API client used by Remult to perform HTTP calls to the backend.</p><h2 id="httpclient" tabindex="-1">httpClient <a class="header-anchor" href="#httpclient" aria-label="Permalink to &quot;httpClient&quot;">​</a></h2><p>The HTTP client to use when making API calls. It can be set to a function with the <code>fetch</code> signature or an object that has <code>post</code>, <code>put</code>, <code>delete</code>, and <code>get</code> methods. This can also be used to inject logic before each HTTP call, such as adding authorization headers.</p><h4 id="example" tabindex="-1">example: <a class="header-anchor" href="#example" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// Using Axios</span></span>
<span class="line"><span style="color:#C0CAF5;">remult</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">apiClient</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">httpClient</span><span style="color:#89DDFF;"> =</span><span style="color:#C0CAF5;"> axios</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h4 id="example-1" tabindex="-1">example: <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// Using Angular HttpClient</span></span>
<span class="line"><span style="color:#C0CAF5;">remult</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">apiClient</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">httpClient</span><span style="color:#89DDFF;"> =</span><span style="color:#C0CAF5;"> httpClient</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h4 id="see" tabindex="-1">see: <a class="header-anchor" href="#see" aria-label="Permalink to &quot;see:&quot;">​</a></h4><p>If you want to add headers using angular httpClient, see: <a href="https://medium.com/angular-shots/shot-3-how-to-add-http-headers-to-every-request-in-angular-fab3d10edc26" target="_blank" rel="noreferrer">https://medium.com/angular-shots/shot-3-how-to-add-http-headers-to-every-request-in-angular-fab3d10edc26</a></p><h4 id="example-2" tabindex="-1">example: <a class="header-anchor" href="#example-2" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// Using fetch (default)</span></span>
<span class="line"><span style="color:#C0CAF5;">remult</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">apiClient</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">httpClient</span><span style="color:#89DDFF;"> =</span><span style="color:#C0CAF5;"> fetch</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h4 id="example-3" tabindex="-1">example: <a class="header-anchor" href="#example-3" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// Adding bearer token authorization</span></span>
<span class="line"><span style="color:#C0CAF5;">remult</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">apiClient</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">httpClient</span><span style="color:#89DDFF;"> =</span><span style="color:#9ABDF5;"> (</span></span>
<span class="line"><span style="color:#E0AF68;">  input</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> RequestInfo</span><span style="color:#89DDFF;"> |</span><span style="color:#C0CAF5;"> URL</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#E0AF68;">  init</span><span style="color:#89DDFF;">?:</span><span style="color:#C0CAF5;"> RequestInit</span></span>
<span class="line"><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#BB9AF7;font-style:italic;">  return</span><span style="color:#7AA2F7;"> fetch</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">input</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#F7768E;font-weight:bold;">    ...</span><span style="color:#C0CAF5;">init</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">    headers</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> authToken</span></span>
<span class="line"><span style="color:#BB9AF7;">      ?</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#F7768E;font-weight:bold;">          ...</span><span style="color:#C0CAF5;">init</span><span style="color:#89DDFF;">?.</span><span style="color:#7DCFFF;">headers</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">          authorization</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">Bearer </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> +</span><span style="color:#C0CAF5;"> authToken</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">        }</span></span>
<span class="line"><span style="color:#BB9AF7;">      :</span><span style="color:#C0CAF5;"> init</span><span style="color:#89DDFF;">?.</span><span style="color:#7DCFFF;">headers</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#73DACA;">    cache</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">no-store</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">  })</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div><h2 id="url" tabindex="-1">url <a class="header-anchor" href="#url" aria-label="Permalink to &quot;url&quot;">​</a></h2><p>The base URL for making API calls. By default, it is set to &#39;/api&#39;. It can be modified to be relative or to use a different domain for the server.</p><h4 id="example-4" tabindex="-1">example: <a class="header-anchor" href="#example-4" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// Relative URL</span></span>
<span class="line"><span style="color:#C0CAF5;">remult</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">apiClient</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">url</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">./api</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h4 id="example-5" tabindex="-1">example: <a class="header-anchor" href="#example-5" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// Different domain</span></span>
<span class="line"><span style="color:#C0CAF5;">remult</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">apiClient</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">url</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">https://example.com/api</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="subscriptionclient" tabindex="-1">subscriptionClient <a class="header-anchor" href="#subscriptionclient" aria-label="Permalink to &quot;subscriptionClient&quot;">​</a></h2><p>The subscription client used for real-time data updates. By default, it is set to use Server-Sent Events (SSE). It can be set to any subscription provider as illustrated in the Remult tutorial for deploying to a serverless environment.</p><h4 id="see-1" tabindex="-1">see: <a class="header-anchor" href="#see-1" aria-label="Permalink to &quot;see:&quot;">​</a></h4><p><a href="https://remult.dev/tutorials/react-next/deployment.html#deploying-to-a-serverless-environment" target="_blank" rel="noreferrer">https://remult.dev/tutorials/react-next/deployment.html#deploying-to-a-serverless-environment</a></p><h2 id="wrapmessagehandling" tabindex="-1">wrapMessageHandling <a class="header-anchor" href="#wrapmessagehandling" aria-label="Permalink to &quot;wrapMessageHandling&quot;">​</a></h2><p>A function that wraps message handling for subscriptions. This is useful for executing some code before or after any message arrives from the subscription. For example, in Angular, to refresh a specific part of the UI, you can call the <code>NgZone</code> run method at this time.</p><h4 id="example-6" tabindex="-1">example: <a class="header-anchor" href="#example-6" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// Angular example</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">Component</span><span style="color:#89DDFF;">,</span><span style="color:#0DB9D7;"> NgZone</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">@angular/core</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">remult</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#BB9AF7;"> class</span><span style="color:#C0CAF5;"> AppComponent</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#BB9AF7;">  constructor</span><span style="color:#9ABDF5;">(</span><span style="color:#E0AF68;">zone</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> NgZone</span><span style="color:#9ABDF5;">)</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#C0CAF5;">    remult</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">apiClient</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">wrapMessageHandling</span><span style="color:#89DDFF;"> =</span><span style="color:#E0AF68;"> handler</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#C0CAF5;"> zone</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">run</span><span style="color:#9ABDF5;">(() </span><span style="color:#BB9AF7;">=&gt;</span><span style="color:#7AA2F7;"> handler</span><span style="color:#9ABDF5;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div>`,28)]))}const D=a(o,[["render",t]]);export{d as __pageData,D as default};
