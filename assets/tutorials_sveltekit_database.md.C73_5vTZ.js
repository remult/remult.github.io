import{_ as s,c as a,o,a5 as n}from"./chunks/framework.QXCuR9m2.js";const u=JSON.parse('{"title":"Database","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/sveltekit/database.md","filePath":"tutorials/sveltekit/database.md","lastUpdated":1719513096000}'),l={name:"tutorials/sveltekit/database.md"},t=n(`<h1 id="database" tabindex="-1">Database <a class="header-anchor" href="#database" aria-label="Permalink to &quot;Database&quot;">â€‹</a></h1><p>Up until now the todo app has been using a plain JSON file to store the list of tasks. In production, you will often want to use a proper database. Remult supports a (long) list of relational and non-relational databases. In this tutorial, let&#39;s use <code>Postgres</code>.</p><div class="tip custom-block"><p class="custom-block-title">Learn more</p><p>See the <a href="https://remult.dev/docs/quickstart.html#connecting-a-database" target="_blank" rel="noreferrer">Quickstart</a> article to find out more.</p></div><div class="warning custom-block"><p class="custom-block-title">Don&#39;t have Postgres installed? Don&#39;t have to.</p><p>Don&#39;t worry if you don&#39;t have Postgres installed locally. In the next step of the tutorial, we&#39;ll configure the app to use Postgres in production, and keep using JSON files in our dev environment.</p><p><strong>Simply install <code>postgres-node</code> per step 1 below and move on to the <a href="./deployment">Deployment section of the tutorial</a>.</strong></p></div><ol><li><p>Install <code>postgres-node</code> (&quot;pg&quot;).</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npm</span><span style="color:#CE9178;"> i</span><span style="color:#CE9178;"> pg</span></span></code></pre></div></li><li><p>Add an environment variables called DATABASE_URL and set it with your connection string:</p></li></ol><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-wsWRT" id="tab-ssAiWG3" checked><label for="tab-ssAiWG3">.env.local</label></div><div class="blocks"><div class="language-sh active"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">DATABASE_URL</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">postgresql://username:password@host:port/dbname[?paramspec</span><span style="color:#D4D4D4;">]</span></span></code></pre></div></div></div><ol start="3"><li>Add a <code>dataProvider</code> to Remult&#39;s handler.</li></ol><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-faCRQ" id="tab-Jmc2pBV" checked><label for="tab-Jmc2pBV">src/routes/api/[...remult]/+server.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus has-diff vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">remultSveltekit</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult/remult-sveltekit&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;./shared/Task&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">TasksController</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;./shared/TasksController&#39;</span></span>
<span class="line diff add"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">createPostgresDataProvider</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult/postgres&#39;</span></span>
<span class="line diff add"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">DATABASE_URL</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;$env/static/private&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> _api</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">remultSveltekit</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  entities:</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#9CDCFE;">  controllers:</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">TasksController</span><span style="color:#D4D4D4;">],</span></span>
<span class="line diff add"><span style="color:#9CDCFE;">  dataProvider:</span><span style="color:#4FC1FF;"> DATABASE_URL</span></span>
<span class="line diff add"><span style="color:#D4D4D4;">    ? </span><span style="color:#DCDCAA;">createPostgresDataProvider</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">connectionString:</span><span style="color:#4FC1FF;"> DATABASE_URL</span><span style="color:#D4D4D4;"> }) </span></span>
<span class="line diff add"><span style="color:#D4D4D4;">    : </span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">, </span></span>
<span class="line"><span style="color:#DCDCAA;">  getUser</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> async</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> auth</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> event</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">locals</span><span style="color:#D4D4D4;">?.</span><span style="color:#DCDCAA;">auth</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> auth</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">user</span><span style="color:#C586C0;"> as</span><span style="color:#4EC9B0;"> UserInfo</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre></div></div></div><p>Once the application restarts, it&#39;ll try to use postgres as the data source for your application.</p><p>If <code>DATABASE_URL</code> is found, it&#39;ll automatically create the <code>tasks</code> table for you.</p><p>If <code>DATABASE_URL</code> is not has found, it&#39;ll just fallback to our local JSON files.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can also disable this automatic migration behavior. It&#39;s not part of this tutorial so if you want to learn more, follow this <a href="/docs/migrations">link</a>.</p></div>`,12),e=[t];function p(r,c,i,D,d,y){return o(),a("div",null,e)}const v=s(l,[["render",p]]);export{u as __pageData,v as default};
