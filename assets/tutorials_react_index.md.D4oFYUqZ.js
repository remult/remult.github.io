import{_ as e,c as s,o as a,a5 as n}from"./chunks/framework.ChN904aB.js";const y=JSON.parse('{"title":"Build a Full-Stack React Application","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/react/index.md","filePath":"tutorials/react/index.md","lastUpdated":1728125616000}'),t={name:"tutorials/react/index.md"},o=n(`<h1 id="build-a-full-stack-react-application" tabindex="-1">Build a Full-Stack React Application <a class="header-anchor" href="#build-a-full-stack-react-application" aria-label="Permalink to &quot;Build a Full-Stack React Application&quot;">​</a></h1><h3 id="create-a-simple-todo-app-with-remult-using-a-react-frontend" tabindex="-1">Create a simple todo app with Remult using a React frontend <a class="header-anchor" href="#create-a-simple-todo-app-with-remult-using-a-react-frontend" aria-label="Permalink to &quot;Create a simple todo app with Remult using a React frontend&quot;">​</a></h3><p>In this tutorial, we are going to create a simple app to manage a task list. We&#39;ll use <code>React</code> for the UI, <code>Node.js</code> + <code>Express.js</code> for the API server, and Remult as our full-stack CRUD framework. For deployment to production, we&#39;ll use <a href="https://railway.app/" target="_blank" rel="noreferrer">railway.app</a> and a <code>PostgreSQL</code> database.</p><p>By the end of the tutorial, you should have a basic understanding of Remult and how to use it to accelerate and simplify full stack app development.</p><div class="tip custom-block"><p class="custom-block-title">Prefer Angular?</p><p>Check out the <a href="./../angular/">Angular tutorial</a>.</p></div><h3 id="prefer-an-interactive-online-learning-experience" tabindex="-1">Prefer an Interactive Online Learning Experience? <a class="header-anchor" href="#prefer-an-interactive-online-learning-experience" aria-label="Permalink to &quot;Prefer an Interactive Online Learning Experience?&quot;">​</a></h3><p>If you&#39;d rather follow along with an interactive, online tutorial, <a href="https://learn.remult.dev" target="_blank" rel="noreferrer">try our interactive tutorial here</a>. It provides a hands-on, guided approach to building the same full-stack todo app with React and Remult.</p><hr><h3 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h3><p>This tutorial assumes you are familiar with <code>TypeScript</code> and <code>React</code>.</p><p>Before you begin, make sure you have <a href="https://nodejs.org" target="_blank" rel="noreferrer">Node.js</a> and <a href="https://git-scm.com/" target="_blank" rel="noreferrer">git</a> installed. </p><h1 id="setup-for-the-tutorial" tabindex="-1">Setup for the Tutorial <a class="header-anchor" href="#setup-for-the-tutorial" aria-label="Permalink to &quot;Setup for the Tutorial&quot;">​</a></h1><p>This tutorial requires setting up a React project, an API server project, and a few lines of code to add Remult.</p><p>You can either <strong>use a starter project</strong> to speed things up, or go through the <strong>step-by-step setup</strong>.</p><h2 id="option-1-clone-the-starter-project" tabindex="-1">Option 1: Clone the Starter Project <a class="header-anchor" href="#option-1-clone-the-starter-project" aria-label="Permalink to &quot;Option 1: Clone the Starter Project&quot;">​</a></h2><ol><li>Clone the <em>react-vite-express-starter</em> repository from GitHub and install its dependencies.</li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">git</span><span style="color:#CE9178;"> clone</span><span style="color:#CE9178;"> https://github.com/remult/react-vite-express-starter.git</span><span style="color:#CE9178;"> remult-react-todo</span></span>
<span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#CE9178;"> remult-react-todo</span></span>
<span class="line"><span style="color:#DCDCAA;">npm</span><span style="color:#CE9178;"> install</span></span></code></pre></div><ol start="2"><li>Open your IDE.</li><li>Open a terminal and run the <code>dev</code> npm script.</li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npm</span><span style="color:#CE9178;"> run</span><span style="color:#CE9178;"> dev</span></span></code></pre></div><ol start="4"><li>Open another terminal and run the <code>dev-node</code> npm script</li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npm</span><span style="color:#CE9178;"> run</span><span style="color:#CE9178;"> dev-node</span></span></code></pre></div><p>The default &quot;Vite + React&quot; app main screen should be available at the default Vite dev server address <a href="http://127.0.0.1:5173" target="_blank" rel="noreferrer">http://127.0.0.1:5173</a>.</p><p>At this point, our starter project is up and running. We are now ready to move to the <a href="./entities">next step of the tutorial</a> and start creating the task list app.</p><h2 id="option-2-step-by-step-setup" tabindex="-1">Option 2: Step-by-step Setup <a class="header-anchor" href="#option-2-step-by-step-setup" aria-label="Permalink to &quot;Option 2: Step-by-step Setup&quot;">​</a></h2><h3 id="create-a-react-project-using-vite" tabindex="-1">Create a React project using Vite <a class="header-anchor" href="#create-a-react-project-using-vite" aria-label="Permalink to &quot;Create a React project using Vite&quot;">​</a></h3><p>Create the new React project.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npm</span><span style="color:#CE9178;"> create</span><span style="color:#569CD6;"> -y</span><span style="color:#CE9178;"> vite@latest</span><span style="color:#CE9178;"> remult-react-todo</span><span style="color:#569CD6;"> --</span><span style="color:#569CD6;"> --template</span><span style="color:#CE9178;"> react-ts</span></span>
<span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#CE9178;"> remult-react-todo</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">Run into issues scaffolding the Vite project?</p><p>See <a href="https://vitejs.dev/guide/#scaffolding-your-first-vite-project" target="_blank" rel="noreferrer">Vite documentation</a> for help.</p></div><p>In this tutorial, we&#39;ll be using the root folder created by <code>Vite</code> as the root folder for our server project as well.</p><h3 id="install-required-packages" tabindex="-1">Install required packages <a class="header-anchor" href="#install-required-packages" aria-label="Permalink to &quot;Install required packages&quot;">​</a></h3><p>We need <code>Express</code> to serve our app&#39;s API, and, of course, <code>Remult</code>. For development, we&#39;ll use <a href="https://www.npmjs.com/package/tsx" target="_blank" rel="noreferrer">tsx</a> to run the API server.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npm</span><span style="color:#CE9178;"> i</span><span style="color:#CE9178;"> express</span><span style="color:#CE9178;"> remult</span></span>
<span class="line"><span style="color:#DCDCAA;">npm</span><span style="color:#CE9178;"> i</span><span style="color:#569CD6;"> --save-dev</span><span style="color:#CE9178;"> @types/express</span><span style="color:#CE9178;"> tsx</span></span></code></pre></div><h3 id="create-the-api-server-project" tabindex="-1">Create the API server project <a class="header-anchor" href="#create-the-api-server-project" aria-label="Permalink to &quot;Create the API server project&quot;">​</a></h3><p>The starter API server TypeScript project contains a single module that initializes <code>Express</code>, and begins listening for API requests.</p><ol><li><p>Open your IDE.</p></li><li><p>Create a <code>server</code> folder under the <code>src/</code> folder created by Vite.</p></li><li><p>Create an <code>index.ts</code> file in the <code>src/server/</code> folder with the following code:</p></li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/server/index.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> express</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;express&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> app</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">express</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">listen</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">3002</span><span style="color:#D4D4D4;">, () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Server started&#39;</span><span style="color:#D4D4D4;">))</span></span></code></pre></div><h3 id="bootstrap-remult-in-the-back-end" tabindex="-1">Bootstrap Remult in the back-end <a class="header-anchor" href="#bootstrap-remult-in-the-back-end" aria-label="Permalink to &quot;Bootstrap Remult in the back-end&quot;">​</a></h3><p>Remult is loaded in the back-end as an <code>Express middleware</code>.</p><ol><li>Create an <code>api.ts</code> file in the <code>src/server/</code> folder with the following code:</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/server/api.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">remultExpress</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult/remult-express&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> api</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">remultExpress</span><span style="color:#D4D4D4;">()</span></span></code></pre></div><ol start="2"><li>Add the highlighted code lines to register the middleware in the main server module <code>index.ts</code>.</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/server/index.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> express</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &quot;express&quot;</span></span>
<span class="line highlighted"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">api</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;./api.js&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> app</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">express</span><span style="color:#D4D4D4;">()</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">use</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">api</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">listen</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">3002</span><span style="color:#D4D4D4;">, () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Server started&quot;</span><span style="color:#D4D4D4;">))</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">ESM</p><p>In this tutorial we will be using <code>esm</code> for the node.js server - that means that where ever we import a file we have to include the <code>.js</code> suffix for it as we did above in the <code>import { api } from &quot;./api.js</code> statement</p></div><h3 id="final-tweaks" tabindex="-1">Final tweaks <a class="header-anchor" href="#final-tweaks" aria-label="Permalink to &quot;Final tweaks&quot;">​</a></h3><p>Our full stack starter project is almost ready. Let&#39;s complete these final configurations.</p><h4 id="enable-typescript-decorators-in-vite" tabindex="-1">Enable TypeScript decorators in Vite <a class="header-anchor" href="#enable-typescript-decorators-in-vite" aria-label="Permalink to &quot;Enable TypeScript decorators in Vite&quot;">​</a></h4><p>Add the following entry to the <code>defineConfig</code> section of the <code>vite.config.ts</code> file to enable the use of decorators in the React app.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// vite.config.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// ...</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#DCDCAA;"> defineConfig</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  plugins:</span><span style="color:#D4D4D4;"> [</span><span style="color:#DCDCAA;">react</span><span style="color:#D4D4D4;">()],</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">  esbuild:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">    tsconfigRaw:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">      compilerOptions:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">        experimentalDecorators:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">,</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">      },</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">    },</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><h4 id="create-the-server-tsconfig-file" tabindex="-1">Create the server tsconfig file <a class="header-anchor" href="#create-the-server-tsconfig-file" aria-label="Permalink to &quot;Create the server tsconfig file&quot;">​</a></h4><p>In the root folder, create a TypeScript configuration file <code>tsconfig.server.json</code> for the server project.</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#9CDCFE;">  &quot;compilerOptions&quot;</span><span style="color:#D4D4D4;">: {</span></span>
<span class="line"><span style="color:#9CDCFE;">    &quot;experimentalDecorators&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    &quot;skipLibCheck&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    &quot;esModuleInterop&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    &quot;outDir&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;dist&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    &quot;rootDir&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;src&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    &quot;module&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;nodenext&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#9CDCFE;">  &quot;include&quot;</span><span style="color:#D4D4D4;">: [</span><span style="color:#CE9178;">&quot;src/server/**/*&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;src/shared/**/*&quot;</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><h4 id="proxy-api-requests-from-vue-devserver-vite-to-the-api-server" tabindex="-1">Proxy API requests from Vue DevServer (vite) to the API server <a class="header-anchor" href="#proxy-api-requests-from-vue-devserver-vite-to-the-api-server" aria-label="Permalink to &quot;Proxy API requests from Vue DevServer (vite) to the API server&quot;">​</a></h4><p>The react app created in this tutorial is intended to be served from the same domain as its API. However, for development, the API server will be listening on <code>http://localhost:3002</code>, while the react app is served from the default <code>http://localhost:5173</code>.</p><p>We&#39;ll use the <a href="https://vitejs.dev/config/#server-proxy" target="_blank" rel="noreferrer">proxy</a> feature of Vite to divert all calls for <code>http://localhost:5173/api</code> to our dev API server.</p><p>Configure the proxy by adding the following entry to the <code>vite.config.ts</code> file:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// vite.config.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">//...</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#DCDCAA;"> defineConfig</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  plugins:</span><span style="color:#D4D4D4;"> [</span><span style="color:#DCDCAA;">react</span><span style="color:#D4D4D4;">()],</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">  server:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">proxy:</span><span style="color:#D4D4D4;"> { </span><span style="color:#CE9178;">&quot;/api&quot;</span><span style="color:#9CDCFE;">:</span><span style="color:#CE9178;"> &quot;http://localhost:3002&quot;</span><span style="color:#D4D4D4;"> } },</span></span>
<span class="line"><span style="color:#9CDCFE;">  esbuild:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    tsconfigRaw:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">      compilerOptions:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">        experimentalDecorators:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">      },</span></span>
<span class="line"><span style="color:#D4D4D4;">    },</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><h3 id="run-the-app" tabindex="-1">Run the app <a class="header-anchor" href="#run-the-app" aria-label="Permalink to &quot;Run the app&quot;">​</a></h3><ol><li>Open a terminal and start the vite dev server.</li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npm</span><span style="color:#CE9178;"> run</span><span style="color:#CE9178;"> dev</span></span></code></pre></div><ol start="2"><li>Add an <code>npm</code> script named <code>dev-node</code> to start the dev API server in the <code>package.json</code>.</li></ol><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// package.json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CE9178;">&quot;dev-node&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;tsx watch --tsconfig tsconfig.server.json src/server&quot;</span></span></code></pre></div><ol start="3"><li>Open another terminal and start the <code>node</code> server</li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npm</span><span style="color:#CE9178;"> run</span><span style="color:#CE9178;"> dev-node</span></span></code></pre></div><p>The server is now running and listening on port 3002. <code>tsx</code> is watching for file changes and will restart the server when code changes are saved.</p><p>The default &quot;Vite + React&quot; app main screen should be available at the default Vite dev server address <a href="http://127.0.0.1:5173" target="_blank" rel="noreferrer">http://127.0.0.1:5173</a>.</p><h3 id="remove-react-default-styles" tabindex="-1">Remove React default styles <a class="header-anchor" href="#remove-react-default-styles" aria-label="Permalink to &quot;Remove React default styles&quot;">​</a></h3><p>The react default styles won&#39;t fit our todo app. If you&#39;d like a nice-looking app, replace the contents of <code>src/index.css</code> with <a href="https://raw.githubusercontent.com/remult/react-vite-express-starter/master/src/index.css" target="_blank" rel="noreferrer">this CSS file</a>. Otherwise, you can simply <strong>delete the contents of <code>src/index.css</code></strong>.</p><h3 id="setup-completed" tabindex="-1">Setup completed <a class="header-anchor" href="#setup-completed" aria-label="Permalink to &quot;Setup completed&quot;">​</a></h3><p>At this point, our starter project is up and running. We are now ready to move to the <a href="./entities">next step of the tutorial</a> and start creating the task list app.</p>`,69),l=[o];function p(r,c,i,d,u,h){return a(),s("div",null,l)}const C=e(t,[["render",p]]);export{y as __pageData,C as default};
