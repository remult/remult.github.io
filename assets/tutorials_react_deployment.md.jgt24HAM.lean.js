import{_ as s,c as a,o as e,a5 as o}from"./chunks/framework.QXCuR9m2.js";const u=JSON.parse('{"title":"Deployment","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/react/deployment.md","filePath":"tutorials/react/deployment.md","lastUpdated":1725376996000}'),n={name:"tutorials/react/deployment.md"},l=o(`<h1 id="deployment" tabindex="-1">Deployment <a class="header-anchor" href="#deployment" aria-label="Permalink to &quot;Deployment&quot;">​</a></h1><p>Let&#39;s deploy the todo app to <a href="https://railway.app/" target="_blank" rel="noreferrer">railway.app</a>.</p><h2 id="prepare-for-production" tabindex="-1">Prepare for Production <a class="header-anchor" href="#prepare-for-production" aria-label="Permalink to &quot;Prepare for Production&quot;">​</a></h2><p>In this tutorial, we&#39;ll deploy both the React app and the API server as <a href="https://create-react-app.dev/docs/deployment/#other-solutions" target="_blank" rel="noreferrer">one server-side app</a>, and redirect all non-API requests to return the React app.</p><p>We will deploy an ESM node server project</p><p>In addition, to follow a few basic production best practices, we&#39;ll use <a href="https://www.npmjs.com/package/compression" target="_blank" rel="noreferrer">compression</a> middleware to improve performance and <a href="https://www.npmjs.com/package/helmet" target="_blank" rel="noreferrer">helmet</a> middleware for security</p><ol><li>Add the highlighted code lines to <code>src/server/index.ts</code>, and modify the <code>app.listen</code> function&#39;s <code>port</code> argument to prefer a port number provided by the production host&#39;s <code>PORT</code> environment variable.</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/server/index.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> express</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &quot;express&quot;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">api</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;./api.js&quot;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> session</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &quot;cookie-session&quot;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">auth</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;./auth.js&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> app</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">express</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">use</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#DCDCAA;">  session</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">    secret:</span><span style="color:#9CDCFE;"> process</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">env</span><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">&quot;SESSION_SECRET&quot;</span><span style="color:#D4D4D4;">] || </span><span style="color:#CE9178;">&quot;my secret&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">use</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">auth</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">use</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">api</span><span style="color:#D4D4D4;">)</span></span>
<span class="line highlighted"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> frontendFiles</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">process</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">cwd</span><span style="color:#D4D4D4;">() + </span><span style="color:#CE9178;">&quot;/dist&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">use</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">express</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">static</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">frontendFiles</span><span style="color:#D4D4D4;">));</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;/*&quot;</span><span style="color:#D4D4D4;">, (</span><span style="color:#9CDCFE;">_</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">  res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">sendFile</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">frontendFiles</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">&quot;/index.html&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">});</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">listen</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">process</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">env</span><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">&quot;PORT&quot;</span><span style="color:#D4D4D4;">] || </span><span style="color:#B5CEA8;">3002</span><span style="color:#D4D4D4;">, () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Server started&quot;</span><span style="color:#D4D4D4;">));</span></span></code></pre></div><ol start="3"><li><p>Modify the highlighted code in the api server module to prefer a <code>connectionString</code> provided by the production host&#39;s <code>DATABASE_URL</code> environment variable.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/server/api.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">//...</span></span>
<span class="line highlighted"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> DATABASE_URL</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">process</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">env</span><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">&quot;DATABASE_URL&quot;</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> api</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">remultExpress</span><span style="color:#D4D4D4;">({</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;"> dataProvider:</span><span style="color:#4FC1FF;"> DATABASE_URL</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">   ? </span><span style="color:#DCDCAA;">createPostgresDataProvider</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">connectionString:</span><span style="color:#4FC1FF;"> DATABASE_URL</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">   : </span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#6A9955;">   //...</span></span>
<span class="line"><span style="color:#D4D4D4;"> })</span></span></code></pre></div></li></ol><div class="warning custom-block"><p class="custom-block-title">Note</p><p>In order to connect to a local PostgresDB, add <code>DATABASE_URL</code> to an .env file, or simply replace <code>process.env[&quot;DATABASE_URL&quot;]</code> with your <code>connectionString</code>.</p><p>If no <code>DATABASE_URL</code> has found, it&#39;ll fallback to our local JSON files.</p></div><ol start="4"><li>Modify the project&#39;s <code>build</code> npm script to additionally transpile the API server&#39;s TypeScript code to JavaScript (using <code>tsc</code>).</li></ol><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// package.json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CE9178;">&quot;build&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;tsc &amp;&amp; vite build &amp;&amp; tsc -p tsconfig.server.json&quot;</span><span style="color:#D4D4D4;">,</span></span></code></pre></div><ol start="5"><li>Modify the project&#39;s <code>start</code> npm script to start the production Node.js server.</li></ol><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// package.json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CE9178;">&quot;start&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;node dist/server/&quot;</span></span></code></pre></div><p>The todo app is now ready for deployment to production.</p><h2 id="test-locally" tabindex="-1">Test Locally <a class="header-anchor" href="#test-locally" aria-label="Permalink to &quot;Test Locally&quot;">​</a></h2><p>To test the application locally run</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npm</span><span style="color:#CE9178;"> run</span><span style="color:#CE9178;"> build</span></span>
<span class="line"><span style="color:#DCDCAA;">npm</span><span style="color:#CE9178;"> run</span><span style="color:#CE9178;"> start</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">Build Errors</p><p>If you get an error <code>error TS5096: Option &#39;allowImportingTsExtensions&#39; can only be used when either &#39;noEmit&#39; or &#39;emitDeclarationOnly&#39; is set.</code> do not set the <code>emitDeclarationOnly</code> flag!</p><p>You are getting the error because somewhere in your code you&#39;ve imported from <code>.ts</code> instead of <code>.js</code> - fix it and build again</p></div><p>Now navigate to <a href="http://localhost:3002" target="_blank" rel="noreferrer">http://localhost:3002</a> and test the application locally</p><h2 id="deploy-to-railway" tabindex="-1">Deploy to Railway <a class="header-anchor" href="#deploy-to-railway" aria-label="Permalink to &quot;Deploy to Railway&quot;">​</a></h2><p>In order to deploy the todo app to <a href="https://railway.app/" target="_blank" rel="noreferrer">railway</a> you&#39;ll need a <code>railway</code> account. You&#39;ll also need <a href="https://docs.railway.app/develop/cli#npm" target="_blank" rel="noreferrer">Railway CLI</a> installed, and you&#39;ll need to login to railway from the cli, using <code>railway login</code>.</p><p>Click enter multiple times to answer all its questions with the default answer</p><ol><li><p>Create a Railway <code>project</code>.</p><p>From the terminal in your project folder run:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">railway</span><span style="color:#CE9178;"> init</span></span></code></pre></div></li><li><p>Set a project name.</p></li><li><p>Once that&#39;s done run the following command to open the project on railway.dev:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">railway</span><span style="color:#CE9178;"> open</span></span></code></pre></div></li><li><p>Once that&#39;s done run the following command to upload the project to railway:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">railway</span><span style="color:#CE9178;"> up</span></span></code></pre></div></li><li><p>Add Postgres Database:</p><ol><li>In the project on <code>railway.dev</code>, click <code>+ Create</code></li><li>Select <code>Database</code></li><li>Select <code>Add PostgresSQL</code></li></ol></li><li><p>Configure the environment variables</p><ol><li>Click on the project card (not the Postgres one)</li><li>Switch to the <code>variables</code> tab</li><li>Click on <code>+ New Variable</code>, and in the <code>VARIABLE_NAME</code> click <code>Add Reference</code> and select <code>DATABASE_URL</code></li><li>Add another variable called <code>SESSION_SECRET</code> and set it to a random string, you can use an <a href="https://www.uuidgenerator.net/" target="_blank" rel="noreferrer">online UUID generator</a></li><li>Switch to the <code>settings</code> tab</li><li>Under <code>Environment</code> click on <code>Generate Domain</code></li><li>Click on the <code>Deploy</code> button on the top left.</li></ol></li><li><p>Once the deployment is complete -</p></li><li><p>Click on the newly generated url to open the app in the browser and you&#39;ll see the app live in production. (it may take a few minutes to go live)</p></li></ol><div class="warning custom-block"><p class="custom-block-title">Note</p><p>If you run into trouble deploying the app to Railway, try using Railway&#39;s <a href="https://docs.railway.app/deploy/deployments" target="_blank" rel="noreferrer">documentation</a>.</p></div><p>That&#39;s it - our application is deployed to production, play with it and enjoy.</p><p>To see a larger more complex code base, visit our <a href="https://www.github.com/remult/crm-demo" target="_blank" rel="noreferrer">CRM example project</a></p><p>Love Remult? <a href="https://github.com/remult/remult" target="_blank" rel="noopener"> Give our repo a star.⭐</a></p>`,28),p=[l];function t(r,c,i,d,D,y){return e(),a("div",null,p)}const h=s(n,[["render",t]]);export{u as __pageData,h as default};
