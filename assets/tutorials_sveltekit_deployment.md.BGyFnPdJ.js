import{_ as a,c as o,o as n,L as l}from"./chunks/framework.BLY-PH98.js";const F=JSON.parse('{"title":"Deployment","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/sveltekit/deployment.md","filePath":"tutorials/sveltekit/deployment.md","lastUpdated":1754230994000}'),e={name:"tutorials/sveltekit/deployment.md"};function t(p,s,r,c,i,d){return n(),o("div",null,s[0]||(s[0]=[l(`<h1 id="deployment" tabindex="-1">Deployment <a class="header-anchor" href="#deployment" aria-label="Permalink to &quot;Deployment&quot;">​</a></h1><p>Let&#39;s deploy the todo app to <a href="https://railway.app/" target="_blank" rel="noreferrer">railway.app</a>.</p><h2 id="prepare-for-production" tabindex="-1">Prepare for Production <a class="header-anchor" href="#prepare-for-production" aria-label="Permalink to &quot;Prepare for Production&quot;">​</a></h2><p>In order to deploy to a Node.js environment, you need to change Sveltekit&#39;s adaptor to <code>@sveltejs/adapter-node</code>.</p><ol><li>Install <code>adapter-node</code>:</li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#C0CAF5;">npm</span><span style="color:#9ECE6A;"> i</span><span style="color:#9ECE6A;"> @sveltejs/adapter-node</span><span style="color:#E0AF68;"> --save-dev</span></span></code></pre></div><ol start="2"><li>In <code>svelte.config.js</code>, change the adapter:</li></ol><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-wqHau" id="tab-qMy5D1l" checked><label data-title="svelte.config.js" for="tab-qMy5D1l">svelte.config.js</label></div><div class="blocks"><div class="language-js active"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki tokyo-night has-diff vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line diff remove"><span style="color:#7DCFFF;">import</span><span style="color:#0DB9D7;"> adapter</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">@sveltejs/adapter-auto</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line diff add"><span style="color:#7DCFFF;">import</span><span style="color:#0DB9D7;"> adapter</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">@sveltejs/adapter-node</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div></div></div><p>You also need to change the dataProvider on the remult initilizer a little bit. By default Sveltekit will try to access your database when running the <code>npm run build</code> command, but on railway, the postgres database is not accessible at this time, and it will make your deployment fail.</p><p>To solve this, we need to make Sveltekit use the default JSON database when building, and use Postgres only in production.</p><p>Make the following changes on your <code>server/api.ts</code> file:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-bhpRk" id="tab-1dTPtCC" checked><label data-title="src/server/api.ts" for="tab-1dTPtCC">src/server/api.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night has-diff vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">remultApi</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult/remult-sveltekit</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">Task</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">./shared/Task</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">TasksController</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">./shared/TasksController</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">createPostgresDataProvider</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult/postgres</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A9B1D6;"> </span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">DATABASE_URL</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">$env/static/private</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line diff add"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">building</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">$app/environment</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#9D7CD8;font-style:italic;"> const</span><span style="color:#BB9AF7;"> api</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> remultApi</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#73DACA;">  entities</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> [</span><span style="color:#7DCFFF;">Task</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">  controllers</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> [</span><span style="color:#7DCFFF;">TasksController</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line diff remove"><span style="color:#73DACA;">  dataProvider</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> DATABASE_URL</span></span>
<span class="line diff remove"><span style="color:#BB9AF7;">    ?</span><span style="color:#7AA2F7;"> createPostgresDataProvider</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;"> connectionString</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> DATABASE_URL</span><span style="color:#9ABDF5;"> })</span></span>
<span class="line diff remove"><span style="color:#BB9AF7;">    :</span><span style="color:#FF9E64;"> undefined</span><span style="color:#89DDFF;">,</span></span>
<span class="line diff add"><span style="color:#7AA2F7;">   dataProvider</span><span style="color:#89DDFF;">:</span><span style="color:#9D7CD8;font-style:italic;"> async</span><span style="color:#9ABDF5;"> ()</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> { </span></span>
<span class="line diff add"><span style="color:#BB9AF7;">		if</span><span style="color:#9ABDF5;"> (</span><span style="color:#FF9E64;">DATABASE_URL</span><span style="color:#BB9AF7;"> &amp;&amp;</span><span style="color:#BB9AF7;"> !</span><span style="color:#C0CAF5;">building</span><span style="color:#9ABDF5;">) { </span></span>
<span class="line diff add"><span style="color:#BB9AF7;font-style:italic;">			return</span><span style="color:#7AA2F7;"> createPostgresDataProvider</span><span style="color:#9ABDF5;">({ </span></span>
<span class="line diff add"><span style="color:#73DACA;">				connectionString</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> DATABASE_URL</span></span>
<span class="line diff add"><span style="color:#9ABDF5;">			})</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#9ABDF5;">		} </span></span>
<span class="line diff add"><span style="color:#BB9AF7;font-style:italic;">		return</span><span style="color:#FF9E64;"> undefined</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#9ABDF5;">	}</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#7AA2F7;">  getUser</span><span style="color:#89DDFF;">:</span><span style="color:#9D7CD8;font-style:italic;"> async</span><span style="color:#9ABDF5;"> (</span><span style="color:#E0AF68;">event</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">    const</span><span style="color:#BB9AF7;"> auth</span><span style="color:#89DDFF;"> =</span><span style="color:#BB9AF7;font-style:italic;"> await</span><span style="color:#C0CAF5;"> event</span><span style="color:#89DDFF;">?.</span><span style="color:#7DCFFF;">locals</span><span style="color:#89DDFF;">?.</span><span style="color:#7AA2F7;">auth</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#BB9AF7;font-style:italic;">    return</span><span style="color:#C0CAF5;"> auth</span><span style="color:#89DDFF;">?.</span><span style="color:#7DCFFF;">user</span><span style="color:#89DDFF;"> as</span><span style="color:#C0CAF5;"> UserInfo</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span></code></pre></div></div></div><p>In order to deploy the todo app to <a href="https://railway.app/" target="_blank" rel="noreferrer">railway</a> you&#39;ll need a <code>railway</code> account. You&#39;ll also need <a href="https://docs.railway.app/develop/cli#npm" target="_blank" rel="noreferrer">Railway CLI</a> installed, and you&#39;ll need to login to railway from the cli, using <code>railway login</code>.</p><p>Click enter multiple times to answer all its questions with the default answer</p><ol><li><p>Create a Railway <code>project</code>.</p><p>From the terminal in your project folder run:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#C0CAF5;">railway</span><span style="color:#9ECE6A;"> init</span></span></code></pre></div></li><li><p>Select <code>Empty Project</code></p></li><li><p>Set a project name.</p></li><li><p>Once it&#39;s done add a database by running the following command:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#C0CAF5;">railway</span><span style="color:#9ECE6A;"> add</span></span></code></pre></div></li><li><p>Select <code>postgressql</code> as the database.</p></li><li><p>You need to modify your package.json file and tell the railway to use the correct version of NodeJS, like this:</p><div class="language-jsonc"><button title="Copy Code" class="copy"></button><span class="lang">jsonc</span><pre class="shiki tokyo-night has-diff vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A9B1D6;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A9B1D6;">,</span></span>
<span class="line diff add"><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">engines</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A9B1D6;">: </span><span style="color:#9ABDF5;">{</span></span>
<span class="line diff add"><span style="color:#89DDFF;"> 	&quot;</span><span style="color:#7AA2F7;">node</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">&gt;=20.19</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line diff add"><span style="color:#9ABDF5;"> }</span><span style="color:#A9B1D6;">, </span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A9B1D6;">: </span><span style="color:#9ABDF5;">{</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;"> 	// ... your scripts</span></span>
<span class="line"><span style="color:#9ABDF5;"> }</span><span style="color:#A9B1D6;">,</span></span></code></pre></div></li><li><p>Once that&#39;s done run the following command to upload the project to railway:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#C0CAF5;">railway</span><span style="color:#9ECE6A;"> up</span></span></code></pre></div></li></ol><div class="warning custom-block"><p class="custom-block-title">Note</p><p>Due to a bug in the way the default Railway builds, the first time you use the <code>railway up</code> command, it will fail to deploy. Continue to follow the steps to fix it</p></div><ol start="9"><li>Go to the <code>railway</code> project&#39;s site and click on the project</li><li>Switch to the <code>settings</code> tab</li><li>Under <code>Environment</code> click on <code>Generate Domain</code></li><li>Under <code>Build</code> change the build from the default <code>Nixpacks</code> to the <code>Railpack</code></li><li>Switch to the <code>variables</code> tab</li><li>Click on <code>+ New Variable</code>, and in the <code>VARIABLE_NAME</code> click <code>Add Reference</code> and select <code>DATABASE_URL</code></li><li>Add another variable called <code>AUTH_SECRET</code> and set it to a random string, you can use an <a href="https://www.uuidgenerator.net/" target="_blank" rel="noreferrer">online UUID generator</a></li><li>Wait for railway to finish deploying your changes and Click on the newly generated url to open the app in the browser and you&#39;ll see the app live in production. (it may take a few minutes to go live)</li></ol><div class="warning custom-block"><p class="custom-block-title">Note</p><p>If you run into trouble deploying the app to Railway, try using Railway&#39;s <a href="https://docs.railway.app/deploy/deployments" target="_blank" rel="noreferrer">documentation</a>.</p></div><p>That&#39;s it - our application is deployed to production, on a node js server</p><hr> Love Remult? <a href="https://github.com/remult/remult" target="_blank" rel="noopener"> Give our repo a star.⭐</a>`,22)]))}const D=a(e,[["render",t]]);export{F as __pageData,D as default};
