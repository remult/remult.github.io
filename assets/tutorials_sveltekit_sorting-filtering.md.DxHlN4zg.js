import{_ as s,c as a,o as e,a5 as n}from"./chunks/framework.ChN904aB.js";const u=JSON.parse('{"title":"Paging, Sorting and Filtering","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/sveltekit/sorting-filtering.md","filePath":"tutorials/sveltekit/sorting-filtering.md","lastUpdated":1731235625000}'),o={name:"tutorials/sveltekit/sorting-filtering.md"},t=n(`<h1 id="paging-sorting-and-filtering" tabindex="-1">Paging, Sorting and Filtering <a class="header-anchor" href="#paging-sorting-and-filtering" aria-label="Permalink to &quot;Paging, Sorting and Filtering&quot;">​</a></h1><p>The RESTful API created by Remult supports <strong>server-side paging, sorting, and filtering</strong>. Let&#39;s use that to limit, sort and filter the list of tasks.</p><h2 id="limit-number-of-fetched-tasks" tabindex="-1">Limit Number of Fetched Tasks <a class="header-anchor" href="#limit-number-of-fetched-tasks" aria-label="Permalink to &quot;Limit Number of Fetched Tasks&quot;">​</a></h2><p>Since our database may eventually contain a lot of tasks, it make sense to use a <strong>paging strategy</strong> to limit the number of tasks retrieved in a single fetch from the back-end database.</p><p>Let&#39;s limit the number of fetched tasks to <code>20</code>.</p><p>To do so, simply pass a <code>limit</code> option to the <code>find</code> method call:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-zfk6Z" id="tab-3qftWP8" checked><label for="tab-3qftWP8">src/routes/+page.svelte</label></div><div class="blocks"><div class="language-svelte active"><button title="Copy Code" class="copy"></button><span class="lang">svelte</span><pre class="shiki dark-plus has-diff vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">$effect(() =&gt; </span><span style="color:#569CD6;">{</span></span>
<span class="line"><span style="color:#DCDCAA;">  repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    .</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(</span></span>
<span class="line diff add"><span style="color:#D4D4D4;">      { </span><span style="color:#9CDCFE;">limit:</span><span style="color:#B5CEA8;"> 20</span><span style="color:#D4D4D4;"> } </span></span>
<span class="line"><span style="color:#D4D4D4;">    )</span></span>
<span class="line"><span style="color:#D4D4D4;">    .</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">t</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">tasks</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">t</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#569CD6;">}</span><span style="color:#D4D4D4;">);</span></span></code></pre></div></div></div><p>Depending on the number of tasks that you have added, you may not have enough tasks in the database for this change to have an immediate visible effect, but it will have one later on when we add more tasks.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Using <code>limit</code> only returns the first page of data. To query subsequent pages, use the <a href="./../../docs/ref_repository#find">Repository.find()</a> method&#39;s <code>page</code> option.</p></div><h2 id="sorting-by-creation-date" tabindex="-1">Sorting By Creation Date <a class="header-anchor" href="#sorting-by-creation-date" aria-label="Permalink to &quot;Sorting By Creation Date&quot;">​</a></h2><p>We would like old tasks to appear first in the list, and new tasks to appear last. Let&#39;s sort the tasks by their <code>createdAt</code> field.</p><p>Set the <code>orderBy</code> property of the <code>find</code> method call&#39;s <code>option</code> argument to an object that contains the fields you want to sort by. Use &quot;asc&quot; and &quot;desc&quot; to determine the sort order.</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-N_Wz0" id="tab-MILua0b" checked><label for="tab-MILua0b">src/routes/+page.svelte</label></div><div class="blocks"><div class="language-svelte active"><button title="Copy Code" class="copy"></button><span class="lang">svelte</span><pre class="shiki dark-plus has-diff vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">$effect(() =&gt; </span><span style="color:#569CD6;">{</span></span>
<span class="line"><span style="color:#DCDCAA;">  repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    .</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">      limit:</span><span style="color:#B5CEA8;"> 20</span><span style="color:#D4D4D4;">,</span></span>
<span class="line diff add"><span style="color:#9CDCFE;">      orderBy:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">createdAt:</span><span style="color:#CE9178;"> &quot;asc&quot;</span><span style="color:#D4D4D4;"> } </span></span>
<span class="line"><span style="color:#D4D4D4;">    })</span></span>
<span class="line"><span style="color:#D4D4D4;">    .</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">t</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">tasks</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">t</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#569CD6;">}</span><span style="color:#D4D4D4;">);</span></span></code></pre></div></div></div><h2 id="filtering" tabindex="-1">Filtering <a class="header-anchor" href="#filtering" aria-label="Permalink to &quot;Filtering&quot;">​</a></h2><p>Remult supports sending filter rules to the server to query only the tasks that we need.</p><p>Adjust your function to fetch only <code>completed</code> tasks.</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-554K-" id="tab-fU-itrx" checked><label for="tab-fU-itrx">src/routes/+page.svelte</label></div><div class="blocks"><div class="language-svelte active"><button title="Copy Code" class="copy"></button><span class="lang">svelte</span><pre class="shiki dark-plus has-diff vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">$effect(() =&gt; </span><span style="color:#569CD6;">{</span></span>
<span class="line"><span style="color:#DCDCAA;">  repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    .</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">      limit:</span><span style="color:#B5CEA8;"> 20</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">      orderBy:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">createdAt:</span><span style="color:#CE9178;"> &quot;asc&quot;</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line diff add"><span style="color:#9CDCFE;">      where:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">completed:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;"> } </span></span>
<span class="line"><span style="color:#D4D4D4;">    })</span></span>
<span class="line"><span style="color:#D4D4D4;">    .</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">t</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">tasks</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">t</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#569CD6;">}</span><span style="color:#D4D4D4;">);</span></span></code></pre></div></div></div><div class="warning custom-block"><p class="custom-block-title">NOTE:</p><p>Because the <code>completed</code> field is of type <code>boolean</code>, the argument is <strong>compile-time checked to be of the <code>boolean</code> type</strong>. Settings the <code>completed</code> filter to <code>undefined</code> causes it to be ignored by Remult.</p></div><p>Play with different filtering values, and eventually comment it out, since we do need all the tasks</p><div class="language-svelte"><button title="Copy Code" class="copy"></button><span class="lang">svelte</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">$effect(() =&gt; </span><span style="color:#569CD6;">{</span></span>
<span class="line"><span style="color:#DCDCAA;">  repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    .</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">        limit:</span><span style="color:#B5CEA8;"> 20</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">        orderBy:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">createdAt:</span><span style="color:#CE9178;"> &quot;asc&quot;</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line highlighted"><span style="color:#6A9955;">        // where: { completed: true }</span></span>
<span class="line"><span style="color:#D4D4D4;">    })</span></span>
<span class="line"><span style="color:#D4D4D4;">    .</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">t</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">tasks</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">t</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#569CD6;">}</span><span style="color:#D4D4D4;">);</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Learn more</p><p>Explore the reference for a <a href="./../../docs/entityFilter">comprehensive list of filtering options</a>.</p></div>`,21),l=[t];function p(c,r,i,D,d,y){return e(),a("div",null,l)}const f=s(o,[["render",p]]);export{u as __pageData,f as default};
