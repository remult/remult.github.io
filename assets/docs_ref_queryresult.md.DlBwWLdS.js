import{_ as e,c as t,o as s,L as o}from"./chunks/framework.BLY-PH98.js";const d=JSON.parse('{"title":"QueryResult","description":"","frontmatter":{},"headers":[],"relativePath":"docs/ref_queryresult.md","filePath":"docs/ref_queryresult.md","lastUpdated":1730109532000}'),r={name:"docs/ref_queryresult.md"};function n(l,a,p,c,i,u){return s(),t("div",null,a[0]||(a[0]=[o(`<h1 id="queryresult" tabindex="-1">QueryResult <a class="header-anchor" href="#queryresult" aria-label="Permalink to &quot;QueryResult&quot;">​</a></h1><p>The result of a call to the <code>query</code> method in the <code>Repository</code> object.</p><h2 id="asynciterator" tabindex="-1">[asyncIterator] <a class="header-anchor" href="#asynciterator" aria-label="Permalink to &quot;[asyncIterator]&quot;">​</a></h2><p>returns an iterator that iterates the rows in the result using a paging mechanism</p><h4 id="example" tabindex="-1">example: <a class="header-anchor" href="#example" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;">for</span><span style="color:#BB9AF7;"> await</span><span style="color:#9ABDF5;"> (</span><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> task</span><span style="color:#89DDFF;"> of</span><span style="color:#C0CAF5;"> taskRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">query</span><span style="color:#9ABDF5;">())</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#BB9AF7;font-style:italic;">  await</span><span style="color:#C0CAF5;"> taskRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">save</span><span style="color:#9ABDF5;">({ </span><span style="color:#F7768E;font-weight:bold;">...</span><span style="color:#C0CAF5;">task</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> completed</span><span style="color:#9ABDF5;"> })</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div><h2 id="count" tabindex="-1">count <a class="header-anchor" href="#count" aria-label="Permalink to &quot;count&quot;">​</a></h2><p>returns the number of rows that match the query criteria</p><h2 id="getpage" tabindex="-1">getPage <a class="header-anchor" href="#getpage" aria-label="Permalink to &quot;getPage&quot;">​</a></h2><p>gets the items in a specific page</p><p>Arguments:</p><ul><li><strong>pageNumber</strong></li></ul><h2 id="foreach" tabindex="-1">forEach <a class="header-anchor" href="#foreach" aria-label="Permalink to &quot;forEach&quot;">​</a></h2><p>Performs an operation on all the items matching the query criteria</p><p>Arguments:</p><ul><li><strong>what</strong></li></ul><h2 id="paginator" tabindex="-1">paginator <a class="header-anchor" href="#paginator" aria-label="Permalink to &quot;paginator&quot;">​</a></h2><p>Returns a <code>Paginator</code> object that is used for efficient paging</p>`,18)]))}const y=e(r,[["render",n]]);export{d as __pageData,y as default};
