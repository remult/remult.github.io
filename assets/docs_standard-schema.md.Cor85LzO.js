import{_ as a,c as n,o as l,L as o}from"./chunks/framework.BLY-PH98.js";const D=JSON.parse('{"title":"Standard Schema","description":"","frontmatter":{},"headers":[],"relativePath":"docs/standard-schema.md","filePath":"docs/standard-schema.md","lastUpdated":1753865133000}'),p={name:"docs/standard-schema.md"};function e(t,s,c,r,i,y){return l(),n("div",null,s[0]||(s[0]=[o(`<h1 id="standard-schema" tabindex="-1">Standard Schema <a class="header-anchor" href="#standard-schema" aria-label="Permalink to &quot;Standard Schema&quot;">​</a></h1><p>Remult now supports the <a href="https://standardschema.dev/" target="_blank" rel="noreferrer">Standard Schema</a> specification, allowing you to use your Remult entities as type-safe validators that are compatible with any Standard Schema library.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The Standard Schema specification provides a common interface for TypeScript validation libraries. By implementing this standard, Remult entities can be used as validators in any ecosystem that supports Standard Schema, making it easier to integrate with third-party tools and libraries.</p><p>Beside the <code>remult</code> ORM part, you don&#39;t need to add zod, valibot, ArkType, Effect,... to your project, you can use Remult entities as validators with any library that supports the Standard Schema specification.</p><h2 id="basic-usage" tabindex="-1">Basic Usage <a class="header-anchor" href="#basic-usage" aria-label="Permalink to &quot;Basic Usage&quot;">​</a></h2><p>Import the <code>std</code> function from Remult and use it to create a Standard Schema compatible validator from any entity:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">standardSchema</span><span style="color:#89DDFF;">,</span><span style="color:#0DB9D7;"> Entity</span><span style="color:#89DDFF;">,</span><span style="color:#0DB9D7;"> Fields</span><span style="color:#89DDFF;">,</span><span style="color:#0DB9D7;"> repo</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">Entity</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">User</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#BB9AF7;">class</span><span style="color:#C0CAF5;"> User</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">id</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#73DACA;">  id</span><span style="color:#89DDFF;">!:</span><span style="color:#0DB9D7;"> string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">string</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;"> required</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> true</span><span style="color:#9ABDF5;"> })</span></span>
<span class="line"><span style="color:#73DACA;">  name</span><span style="color:#89DDFF;">!:</span><span style="color:#0DB9D7;"> string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">number</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#73DACA;">  age</span><span style="color:#89DDFF;">?:</span><span style="color:#0DB9D7;"> number</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// Create a Standard Schema validator for the entire entity</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> userSchema</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> standardSchema</span><span style="color:#9ABDF5;">(</span><span style="color:#7AA2F7;">repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">User</span><span style="color:#9ABDF5;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// Validate data with any Standard Schema library</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> result</span><span style="color:#89DDFF;"> =</span><span style="color:#BB9AF7;font-style:italic;"> await</span><span style="color:#7AA2F7;"> validateWithAnyLibrary</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">userSchema</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#73DACA;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">John Doe</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">  age</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> 30</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BB9AF7;">if</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">result</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">issues</span><span style="color:#9ABDF5;">)</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#C0CAF5;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">log</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">Validation errors:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> result</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">issues</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span><span style="color:#BB9AF7;"> else</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#C0CAF5;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">log</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">Valid data:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> result</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">value</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div><h2 id="field-specific-validation" tabindex="-1">Field-Specific Validation <a class="header-anchor" href="#field-specific-validation" aria-label="Permalink to &quot;Field-Specific Validation&quot;">​</a></h2><p>You can create validators that only check specific fields by passing field names as additional arguments:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// Validate only the age field</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> ageSchema</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> standardSchema</span><span style="color:#9ABDF5;">(</span><span style="color:#7AA2F7;">repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">User</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">age</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> result</span><span style="color:#89DDFF;"> =</span><span style="color:#BB9AF7;font-style:italic;"> await</span><span style="color:#7AA2F7;"> validateWithAnyLibrary</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">ageSchema</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> age</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> 30</span><span style="color:#9ABDF5;"> })</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// Returns: { value: { age: 30 } }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// Validate multiple specific fields</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> nameAndAgeSchema</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> standardSchema</span><span style="color:#9ABDF5;">(</span><span style="color:#7AA2F7;">repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">User</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">age</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> result</span><span style="color:#89DDFF;"> =</span><span style="color:#BB9AF7;font-style:italic;"> await</span><span style="color:#7AA2F7;"> validateWithAnyLibrary</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">nameAndAgeSchema</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#73DACA;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">John Doe</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">  age</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> 30</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">  id</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">ignored</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#51597D;font-style:italic;"> // This will be filtered out</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// Returns: { value: { name: &#39;John Doe&#39;, age: 30 } }</span></span></code></pre></div><h2 id="validation-with-custom-rules" tabindex="-1">Validation with Custom Rules <a class="header-anchor" href="#validation-with-custom-rules" aria-label="Permalink to &quot;Validation with Custom Rules&quot;">​</a></h2><p>The Standard Schema validator respects all your entity&#39;s validation rules, including custom validators and entity-level validation:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">Validators</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">Entity</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">UserMail</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#BB9AF7;">class</span><span style="color:#C0CAF5;"> UserMail</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">string</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;"> validate</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> [</span><span style="color:#C0CAF5;">Validators</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">email</span><span style="color:#9ABDF5;">]</span><span style="color:#9ABDF5;"> })</span></span>
<span class="line"><span style="color:#73DACA;">  email</span><span style="color:#89DDFF;">!:</span><span style="color:#0DB9D7;"> string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">string</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#73DACA;">  job</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// Email validation will be enforced</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> emailSchema</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> standardSchema</span><span style="color:#9ABDF5;">(</span><span style="color:#7AA2F7;">repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">UserMail</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">email</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> result</span><span style="color:#89DDFF;"> =</span><span style="color:#BB9AF7;font-style:italic;"> await</span><span style="color:#7AA2F7;"> validateWithAnyLibrary</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">emailSchema</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#73DACA;">  email</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">invalid-email</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// Returns: { issues: [{ message: &#39;Invalid Email&#39;, path: [&#39;email&#39;] }] }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> validResult</span><span style="color:#89DDFF;"> =</span><span style="color:#BB9AF7;font-style:italic;"> await</span><span style="color:#7AA2F7;"> validateWithAnyLibrary</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">emailSchema</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#73DACA;">  email</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">user@example.com</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// Returns: { value: { email: &#39;user@example.com&#39; } }</span></span></code></pre></div><h2 id="entity-level-validation" tabindex="-1">Entity-Level Validation <a class="header-anchor" href="#entity-level-validation" aria-label="Permalink to &quot;Entity-Level Validation&quot;">​</a></h2><p>Entity-level validation is also supported:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">Entity</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">Task</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#7AA2F7;">  validation</span><span style="color:#9ABDF5;">(</span><span style="color:#E0AF68;">item</span><span style="color:#9ABDF5;">)</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#BB9AF7;">    if</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">item</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">userId</span><span style="color:#BB9AF7;"> &amp;&amp;</span><span style="color:#BB9AF7;"> !</span><span style="color:#C0CAF5;">item</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">userId</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">startsWith</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">user:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">)) {</span></span>
<span class="line"><span style="color:#BB9AF7;">      throw</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> Error</span><span style="color:#9ABDF5;">(</span></span>
<span class="line"><span style="color:#89DDFF;">        \`</span><span style="color:#9ECE6A;">Task </span><span style="color:#7DCFFF;">\${</span><span style="color:#C0CAF5;">item</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">title</span><span style="color:#7DCFFF;">}</span><span style="color:#9ECE6A;"> must be assigned with someone starting with [user:]</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">      )</span></span>
<span class="line"><span style="color:#9ABDF5;">    }</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span>
<span class="line"><span style="color:#BB9AF7;">class</span><span style="color:#C0CAF5;"> Task</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">string</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#73DACA;">  title</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">string</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;"> required</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> true</span><span style="color:#9ABDF5;"> })</span></span>
<span class="line"><span style="color:#73DACA;">  userId</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> taskSchema</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> standardSchema</span><span style="color:#9ABDF5;">(</span><span style="color:#7AA2F7;">repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Task</span><span style="color:#9ABDF5;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> result</span><span style="color:#89DDFF;"> =</span><span style="color:#BB9AF7;font-style:italic;"> await</span><span style="color:#7AA2F7;"> validateWithAnyLibrary</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">taskSchema</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#73DACA;">  title</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">My Task</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">  userId</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">123</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#51597D;font-style:italic;"> // Invalid format</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// Returns: { issues: [{ message: &#39;Task My Task must be assigned with someone starting with [user:]&#39;, path: [] }] }</span></span></code></pre></div><h2 id="benefits" tabindex="-1">Benefits <a class="header-anchor" href="#benefits" aria-label="Permalink to &quot;Benefits&quot;">​</a></h2><ul><li><strong>Interoperability</strong>: Use Remult entities with any Standard Schema compatible library</li><li><strong>Type Safety</strong>: Full TypeScript support with inferred types</li><li><strong>Consistency</strong>: Same validation rules across your entire application</li><li><strong>Flexibility</strong>: Validate entire entities or specific fields</li><li><strong>Standards Compliance</strong>: Follows the official Standard Schema specification</li></ul><p>The Standard Schema integration makes Remult entities more versatile and easier to integrate with the broader TypeScript ecosystem while maintaining all the benefits of Remult&#39;s validation system.</p>`,20)]))}const A=a(p,[["render",e]]);export{D as __pageData,A as default};
