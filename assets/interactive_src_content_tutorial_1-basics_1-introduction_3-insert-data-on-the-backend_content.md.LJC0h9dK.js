import{_ as s,c as a,o as n,a5 as e}from"./chunks/framework.QXCuR9m2.js";const C=JSON.parse('{"title":"Insert Data on the Backend","description":"","frontmatter":{"type":"lesson","title":"Insert Data on the Backend","focus":"/backend/index.ts","template":"before-frontend"},"headers":[],"relativePath":"interactive/src/content/tutorial/1-basics/1-introduction/3-insert-data-on-the-backend/content.md","filePath":"interactive/src/content/tutorial/1-basics/1-introduction/3-insert-data-on-the-backend/content.md","lastUpdated":1723795207000}'),o={name:"interactive/src/content/tutorial/1-basics/1-introduction/3-insert-data-on-the-backend/content.md"},t=e(`<h2 id="insert-data-on-the-backend" tabindex="-1">Insert Data on the Backend <a class="header-anchor" href="#insert-data-on-the-backend" aria-label="Permalink to &quot;Insert Data on the Backend&quot;">​</a></h2><p>Next, we&#39;ll add some tasks on the backend so we can use them later.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> express</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;express&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">remultExpress</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult/remult-express&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;../shared/Task.js&#39;</span></span>
<span class="line highlighted"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">repo</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> app</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">express</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> api</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">remultExpress</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  entities:</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">],</span></span>
<span class="line highlighted"><span style="color:#DCDCAA;">  initApi</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> async</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line highlighted"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> taskRepo</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">)</span></span>
<span class="line highlighted"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> ((</span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> taskRepo</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">count</span><span style="color:#D4D4D4;">()) === </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line highlighted"><span style="color:#C586C0;">      await</span><span style="color:#9CDCFE;"> taskRepo</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">insert</span><span style="color:#D4D4D4;">([</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">        { </span><span style="color:#9CDCFE;">title:</span><span style="color:#CE9178;"> &#39;Clean car&#39;</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">        { </span><span style="color:#9CDCFE;">title:</span><span style="color:#CE9178;"> &#39;Read a book&#39;</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">        { </span><span style="color:#9CDCFE;">title:</span><span style="color:#CE9178;"> &#39;Buy groceries&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">completed:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">        { </span><span style="color:#9CDCFE;">title:</span><span style="color:#CE9178;"> &#39;Do laundry&#39;</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">        { </span><span style="color:#9CDCFE;">title:</span><span style="color:#CE9178;"> &#39;Cook dinner&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">completed:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">        { </span><span style="color:#9CDCFE;">title:</span><span style="color:#CE9178;"> &#39;Walk the dog&#39;</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">      ])</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">    }</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">use</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">api</span><span style="color:#D4D4D4;">)</span></span></code></pre></div><h3 id="code-explanation" tabindex="-1">Code Explanation <a class="header-anchor" href="#code-explanation" aria-label="Permalink to &quot;Code Explanation&quot;">​</a></h3><ul><li>We added the <code>initApi</code> option to the <code>remultExpress</code> configuration.</li><li><code>initApi</code> is an asynchronous function that runs once when the server is loaded and the API is ready. It allows us to perform initial setup tasks for the API.</li><li>We use the <code>repo</code> function to get the repository for the <code>Task</code> entity. The line <code>const taskRepo = repo(Task)</code> gets a Repository of type <code>Task</code> that we&#39;ll use to perform all CRUD operations relevant to <code>Task</code>.</li><li>The <code>if ((await taskRepo.count()) === 0)</code> check ensures that if there are no tasks in the database, we insert a few default tasks to get started.</li><li>The <code>taskRepo.insert([...])</code> operation inserts an array of tasks into the database if it&#39;s initially empty, providing some sample data to work with.</li></ul><h3 id="see-that-it-works" tabindex="-1">See That It Works <a class="header-anchor" href="#see-that-it-works" aria-label="Permalink to &quot;See That It Works&quot;">​</a></h3><p>Click on the <code>Test the API</code> button in the preview window. You should see a JSON array with the tasks we defined in the result.</p><blockquote><p><strong>Note:</strong> While Remult supports <a href="https://remult.dev/docs/databases.html" target="_blank" rel="noreferrer">many relational and non-relational databases</a>, in this tutorial we start by storing entity data in a backend <strong>JSON file</strong> stored in the <code>db</code> folder for the project. Later in this tutorial, we&#39;ll switch to using SQLite.</p></blockquote>`,8),l=[t];function p(r,c,i,D,d,y){return n(),a("div",null,l)}const u=s(o,[["render",p]]);export{C as __pageData,u as default};
