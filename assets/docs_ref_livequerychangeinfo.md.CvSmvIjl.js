import{_ as i,c as a,o as e,L as t}from"./chunks/framework.DdPzwmCl.js";const g=JSON.parse('{"title":"LiveQueryChangeInfo","description":"","frontmatter":{},"headers":[],"relativePath":"docs/ref_livequerychangeinfo.md","filePath":"docs/ref_livequerychangeinfo.md","lastUpdated":1724738315000}'),n={name:"docs/ref_livequerychangeinfo.md"};function h(l,s,p,r,k,o){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="livequerychangeinfo" tabindex="-1">LiveQueryChangeInfo <a class="header-anchor" href="#livequerychangeinfo" aria-label="Permalink to &quot;LiveQueryChangeInfo&quot;">​</a></h1><p>The <code>LiveQueryChangeInfo</code> interface represents information about changes in the results of a live query.</p><h2 id="items" tabindex="-1">items <a class="header-anchor" href="#items" aria-label="Permalink to &quot;items&quot;">​</a></h2><p>The updated array of result items.</p><h2 id="changes" tabindex="-1">changes <a class="header-anchor" href="#changes" aria-label="Permalink to &quot;changes&quot;">​</a></h2><p>The changes received in the specific message. The change types can be &quot;all&quot; (replace all), &quot;add&quot;, &quot;replace&quot;, or &quot;remove&quot;.</p><h2 id="applychanges" tabindex="-1">applyChanges <a class="header-anchor" href="#applychanges" aria-label="Permalink to &quot;applyChanges&quot;">​</a></h2><p>Applies the changes received in the message to an existing array. This method is particularly useful with React to update the component&#39;s state based on the live query changes.</p><h4 id="returns" tabindex="-1">returns: <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;returns:&quot;">​</a></h4><p>The updated array of result items after applying the changes.</p><h4 id="example" tabindex="-1">example: <a class="header-anchor" href="#example" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes tokyo-night github-light vp-code" style="--shiki-dark:#a9b1d6;--shiki-light:#24292e;--shiki-dark-bg:#1a1b26;--shiki-light-bg:#fff;" tabindex="0"><code><span class="line"><span style="--shiki-dark:#51597D;--shiki-dark-font-style:italic;--shiki-light:#6A737D;--shiki-light-font-style:inherit;">// Using applyChanges in a React component with useEffect hook</span></span>
<span class="line"><span style="--shiki-dark:#7AA2F7;--shiki-light:#6F42C1;">useEffect</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;">(()</span><span style="--shiki-dark:#BB9AF7;--shiki-light:#D73A49;"> =&gt;</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic;--shiki-light:#D73A49;--shiki-light-font-style:inherit;">  return</span><span style="--shiki-dark:#C0CAF5;--shiki-light:#24292E;"> taskRepo</span></span>
<span class="line"><span style="--shiki-dark:#89DDFF;--shiki-light:#24292E;">    .</span><span style="--shiki-dark:#7AA2F7;--shiki-light:#6F42C1;">liveQuery</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;">({</span></span>
<span class="line"><span style="--shiki-dark:#73DACA;--shiki-light:#24292E;">      limit</span><span style="--shiki-dark:#89DDFF;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#FF9E64;--shiki-light:#005CC5;"> 20</span><span style="--shiki-dark:#89DDFF;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#73DACA;--shiki-light:#24292E;">      orderBy</span><span style="--shiki-dark:#89DDFF;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;"> { </span><span style="--shiki-dark:#73DACA;--shiki-light:#24292E;">createdAt</span><span style="--shiki-dark:#89DDFF;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#89DDFF;--shiki-light:#032F62;"> &#39;</span><span style="--shiki-dark:#9ECE6A;--shiki-light:#032F62;">asc</span><span style="--shiki-dark:#89DDFF;--shiki-light:#032F62;">&#39;</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;"> }</span></span>
<span class="line"><span style="--shiki-dark:#51597D;--shiki-dark-font-style:italic;--shiki-light:#6A737D;--shiki-light-font-style:inherit;">      //where: { completed: true },</span></span>
<span class="line"><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;">    })</span></span>
<span class="line"><span style="--shiki-dark:#89DDFF;--shiki-light:#24292E;">    .</span><span style="--shiki-dark:#7AA2F7;--shiki-light:#6F42C1;">subscribe</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#E0AF68;--shiki-light:#E36209;">info</span><span style="--shiki-dark:#BB9AF7;--shiki-light:#D73A49;"> =&gt;</span><span style="--shiki-dark:#7AA2F7;--shiki-light:#6F42C1;"> setTasks</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#C0CAF5;--shiki-light:#24292E;">info</span><span style="--shiki-dark:#89DDFF;--shiki-light:#24292E;">.</span><span style="--shiki-dark:#7DCFFF;--shiki-light:#24292E;">applyChanges</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;">))</span><span style="--shiki-dark:#89DDFF;--shiki-light:#24292E;">;</span></span>
<span class="line"><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;">}</span><span style="--shiki-dark:#89DDFF;--shiki-light:#24292E;">,</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;"> [])</span><span style="--shiki-dark:#89DDFF;--shiki-light:#24292E;">;</span></span></code></pre></div><p>Arguments:</p><ul><li><strong>prevState</strong> - The previous state of the array of result items.</li></ul>`,14)]))}const c=i(n,[["render",h]]);export{g as __pageData,c as default};
