import{_ as a,c as n,o as e,L as o}from"./chunks/framework.DdPzwmCl.js";const d=JSON.parse('{"title":"Entity Lifecycle Hooks","description":"","frontmatter":{},"headers":[],"relativePath":"docs/lifecycle-hooks.md","filePath":"docs/lifecycle-hooks.md","lastUpdated":1726720596000}'),l={name:"docs/lifecycle-hooks.md"};function t(p,s,c,r,i,y){return e(),n("div",null,s[0]||(s[0]=[o(`<h1 id="entity-lifecycle-hooks" tabindex="-1">Entity Lifecycle Hooks <a class="header-anchor" href="#entity-lifecycle-hooks" aria-label="Permalink to &quot;Entity Lifecycle Hooks&quot;">​</a></h1><p>In Remult, you can take advantage of Entity Lifecycle Hooks to add custom logic and actions at specific stages of an entity&#39;s lifecycle. There are five lifecycle events available: <code>validation</code>, <code>saving</code>, <code>saved</code>, <code>deleting</code>, and <code>deleted</code>. These hooks allow you to perform actions or validations when specific events occur in the entity&#39;s lifecycle.</p><h2 id="validation" tabindex="-1">Validation <a class="header-anchor" href="#validation" aria-label="Permalink to &quot;Validation&quot;">​</a></h2><ul><li><strong>Runs On</strong>: Backend and Frontend.</li><li><strong>Purpose</strong>: To perform validations on the entity&#39;s data before saving.</li><li><strong>Example</strong>:<div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">Entity</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C0CAF5;">Task</span><span style="color:#89DDFF;">&gt;</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">tasks</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#7AA2F7;">  validation</span><span style="color:#89DDFF;">:</span><span style="color:#9D7CD8;font-style:italic;"> async</span><span style="color:#9ABDF5;"> (</span><span style="color:#E0AF68;">task</span><span style="color:#89DDFF;">,</span><span style="color:#E0AF68;"> e</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#BB9AF7;">    if</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">task</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">title</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">length</span><span style="color:#BB9AF7;"> &lt;</span><span style="color:#FF9E64;"> 5</span><span style="color:#9ABDF5;">) {</span></span>
<span class="line"><span style="color:#BB9AF7;">      throw</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> Error</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">Task title must be at least 5 characters long.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#9ABDF5;">    }</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span></code></pre></div>You can run custom validation like in this example, and you can also use <a href="./validation">builtin validation</a>.</li></ul><h2 id="saving" tabindex="-1">Saving <a class="header-anchor" href="#saving" aria-label="Permalink to &quot;Saving&quot;">​</a></h2><ul><li><strong>Runs On</strong>: Backend (or Frontend if using a local frontend database).</li><li><strong>Purpose</strong>: To execute custom logic before an entity is saved.</li><li><strong>Example</strong>:<div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">Entity</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C0CAF5;">Task</span><span style="color:#89DDFF;">&gt;</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">tasks</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#7AA2F7;">  saving</span><span style="color:#89DDFF;">:</span><span style="color:#9D7CD8;font-style:italic;"> async</span><span style="color:#9ABDF5;"> (</span><span style="color:#E0AF68;">task</span><span style="color:#89DDFF;">,</span><span style="color:#E0AF68;"> e</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#BB9AF7;">    if</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">e</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">isNew</span><span style="color:#9ABDF5;">) {</span></span>
<span class="line"><span style="color:#C0CAF5;">      task</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">createdAt</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> Date</span><span style="color:#9ABDF5;">()</span><span style="color:#89DDFF;">;</span><span style="color:#51597D;font-style:italic;"> // Set the creation date for new tasks.</span></span>
<span class="line"><span style="color:#9ABDF5;">    }</span></span>
<span class="line"><span style="color:#C0CAF5;">    task</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">lastUpdated</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> Date</span><span style="color:#9ABDF5;">()</span><span style="color:#89DDFF;">;</span><span style="color:#51597D;font-style:italic;"> // Update the last updated date.</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span></code></pre></div></li></ul><h2 id="saved" tabindex="-1">Saved <a class="header-anchor" href="#saved" aria-label="Permalink to &quot;Saved&quot;">​</a></h2><ul><li><strong>Runs On</strong>: Backend (or Frontend if using a local frontend database).</li><li><strong>Purpose</strong>: To perform actions after an entity has been successfully saved.</li><li><strong>Example</strong>: Useful for triggering additional processes or updates after saving.</li></ul><h2 id="deleting" tabindex="-1">Deleting <a class="header-anchor" href="#deleting" aria-label="Permalink to &quot;Deleting&quot;">​</a></h2><ul><li><strong>Runs On</strong>: Backend (or Frontend if using a local frontend database).</li><li><strong>Purpose</strong>: To execute custom logic before an entity is deleted.</li><li><strong>Example</strong>: You can use this to ensure related data is properly cleaned up or archived.</li></ul><h2 id="deleted" tabindex="-1">Deleted <a class="header-anchor" href="#deleted" aria-label="Permalink to &quot;Deleted&quot;">​</a></h2><ul><li><strong>Runs On</strong>: Backend (or Frontend if using a local frontend database).</li><li><strong>Purpose</strong>: To perform actions after an entity has been successfully deleted.</li><li><strong>Example</strong>: Similar to the <code>saved</code> event, this is useful for any post-deletion processes.</li></ul><h2 id="field-saving-hook" tabindex="-1">Field Saving Hook <a class="header-anchor" href="#field-saving-hook" aria-label="Permalink to &quot;Field Saving Hook&quot;">​</a></h2><p>Additionally, you can define a field-specific <code>saving</code> hook that allows you to perform custom logic on a specific field before the entity <code>saving</code> hook. It has the following signature:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">Date</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C0CAF5;">Task</span><span style="color:#89DDFF;">&gt;</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#7AA2F7;">  saving</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> (</span><span style="color:#E0AF68;">task</span><span style="color:#89DDFF;">,</span><span style="color:#E0AF68;"> fieldRef</span><span style="color:#89DDFF;">,</span><span style="color:#E0AF68;"> e</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#BB9AF7;">    if</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">e</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">isNew</span><span style="color:#9ABDF5;">) </span><span style="color:#C0CAF5;">task</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">createdAt</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> Date</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span>
<span class="line"><span style="color:#C0CAF5;">createdAt</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> Date</span><span style="color:#9ABDF5;">()</span></span></code></pre></div><p>or using the fieldRef</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">Date</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#7AA2F7;">  saving</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> (</span><span style="color:#E0AF68;">_</span><span style="color:#89DDFF;">,</span><span style="color:#E0AF68;"> fieldRef</span><span style="color:#89DDFF;">,</span><span style="color:#E0AF68;"> e</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#BB9AF7;">    if</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">e</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">isNew</span><span style="color:#9ABDF5;">) </span><span style="color:#C0CAF5;">fieldRef</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">value</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> Date</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span>
<span class="line"><span style="color:#C0CAF5;">createdAt</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> Date</span><span style="color:#9ABDF5;">()</span></span></code></pre></div><p>You can use the field <code>saving</code> hook to perform specialized actions on individual fields during the entity&#39;s saving process.</p><h2 id="lifecycle-event-args" tabindex="-1">Lifecycle Event Args <a class="header-anchor" href="#lifecycle-event-args" aria-label="Permalink to &quot;Lifecycle Event Args&quot;">​</a></h2><p>Each lifecycle event receives an instance of the relevant entity and an event args of type <code>LifecycleEvent</code>. The <code>LifecycleEvent</code> object provides various fields and methods to interact with the entity and its context. Here are the fields available in the <code>LifecycleEvent</code>:</p><ul><li><code>isNew</code>: A boolean indicating whether the entity is new (being created).</li><li><code>fields</code>: A reference to the entity&#39;s fields, allowing you to access and modify field values.</li><li><code>id</code>: The ID of the entity.</li><li><code>originalId</code>: The original ID of the entity, which may differ during certain operations.</li><li><code>repository</code>: The repository associated with the entity.</li><li><code>metadata</code>: The metadata of the entity, providing information about its structure.</li><li><code>preventDefault()</code>: A method to prevent the default behavior associated with the event.</li><li><code>relations</code>: Access to repository relations for the entity, allowing you to work with related data.</li></ul><h2 id="example-usage" tabindex="-1">Example Usage <a class="header-anchor" href="#example-usage" aria-label="Permalink to &quot;Example Usage&quot;">​</a></h2><p>Here&#39;s an example of how to use Entity Lifecycle Hooks to add custom logic to the <code>saving</code> event:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">Entity</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C0CAF5;">Task</span><span style="color:#89DDFF;">&gt;</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">tasks</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#7AA2F7;">  saving</span><span style="color:#89DDFF;">:</span><span style="color:#9D7CD8;font-style:italic;"> async</span><span style="color:#9ABDF5;"> (</span><span style="color:#E0AF68;">task</span><span style="color:#89DDFF;">,</span><span style="color:#E0AF68;"> e</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#BB9AF7;">    if</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">e</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">isNew</span><span style="color:#9ABDF5;">) {</span></span>
<span class="line"><span style="color:#C0CAF5;">      task</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">createdAt</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> Date</span><span style="color:#9ABDF5;">()</span><span style="color:#89DDFF;">;</span><span style="color:#51597D;font-style:italic;"> // Set the creation date for new tasks.</span></span>
<span class="line"><span style="color:#9ABDF5;">    }</span></span>
<span class="line"><span style="color:#C0CAF5;">    task</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">lastUpdated</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> Date</span><span style="color:#9ABDF5;">()</span><span style="color:#89DDFF;">;</span><span style="color:#51597D;font-style:italic;"> // Update the last updated date.</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span></code></pre></div><p>In this example, we&#39;ve defined a <code>saving</code> event for the <code>Task</code> entity. When a task is being saved, the event handler is called. If the task is new (not yet saved), we set its <code>createdAt</code> field to the current date. In either case, we update the <code>lastUpdated</code> field with the current date.</p><p>Entity Lifecycle Hooks provide a powerful way to customize the behavior of your entities and ensure that specific actions or validations are performed at the right time in the entity&#39;s lifecycle. You can use these hooks to streamline your application&#39;s data management and enforce business rules.</p>`,26)]))}const D=a(l,[["render",t]]);export{d as __pageData,D as default};
