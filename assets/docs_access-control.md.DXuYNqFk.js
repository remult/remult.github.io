import{_ as a,c as n,o as l,L as o}from"./chunks/framework.DdPzwmCl.js";const D=JSON.parse('{"title":"Access Control","description":"","frontmatter":{},"headers":[],"relativePath":"docs/access-control.md","filePath":"docs/access-control.md","lastUpdated":1740895986000}'),e={name:"docs/access-control.md"};function p(t,s,c,r,i,y){return l(),n("div",null,s[0]||(s[0]=[o(`<h1 id="access-control" tabindex="-1">Access Control <a class="header-anchor" href="#access-control" aria-label="Permalink to &quot;Access Control&quot;">â€‹</a></h1><div class="tip custom-block"><p class="custom-block-title"><strong>Interactive Learning Available! ðŸš€</strong></p><p>Looking to get hands-on with this topic? Try out our new <a href="https://learn.remult.dev/in-depth/7-access-control/1-field-level-control" target="_blank" rel="noreferrer"><strong>interactive tutorial</strong></a> on Access Control, where you can explore and practice directly in the browser. This guided experience offers step-by-step lessons to help you master Access Control in Remult with practical examples and exercises.</p><p><a href="https://learn.remult.dev/in-depth/7-access-control/1-field-level-control" target="_blank" rel="noreferrer">Click here to dive into the interactive tutorial on Access Control!</a></p></div><p>Access control is essential for ensuring that users can only access resources they are authorized to in web applications. This article explores the various layers of access control, focusing on a framework that provides a granular approach to securing your application.</p><h2 id="entity-level-authorization" tabindex="-1">Entity-Level Authorization <a class="header-anchor" href="#entity-level-authorization" aria-label="Permalink to &quot;Entity-Level Authorization&quot;">â€‹</a></h2><p>Entity-level authorization governs CRUD (Create, Read, Update, Delete) operations at the entity level. Each entity can define permissions for these operations using the following options:</p><ul><li><code>allowApiRead</code>: Controls read access.</li><li><code>allowApiInsert</code>: Controls insert access.</li><li><code>allowApiUpdate</code>: Controls update access.</li><li><code>allowApiDelete</code>: Controls delete access.</li></ul><p>Each option can be set to a boolean, a string role, an array of string roles, or an arrow function:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// Allows all CRUD operations</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">Entity</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">tasks</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> allowApiCrud</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> true</span><span style="color:#9ABDF5;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// Only users with the &#39;admin&#39; role can update</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">Entity</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">tasks</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> allowApiUpdate</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">admin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// Only users with &#39;admin&#39; or &#39;manager&#39; roles can delete</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">Entity</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">tasks</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> allowApiDelete</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">admin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">manager</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">]</span><span style="color:#9ABDF5;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// Only the user &#39;Jane&#39; can read</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">Entity</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">tasks</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;"> {</span><span style="color:#7AA2F7;"> allowApiRead</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> ()</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#C0CAF5;"> remult</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">user</span><span style="color:#89DDFF;">?.</span><span style="color:#7DCFFF;">name</span><span style="color:#BB9AF7;"> ==</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">Jane</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// Only authenticated users can perform CRUD operations</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">Entity</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">tasks</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> allowApiCrud</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> Allow</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">authenticated</span><span style="color:#9ABDF5;"> })</span></span></code></pre></div><h2 id="row-level-authorization" tabindex="-1">Row-Level Authorization <a class="header-anchor" href="#row-level-authorization" aria-label="Permalink to &quot;Row-Level Authorization&quot;">â€‹</a></h2><p>Row-level authorization allows control over which rows a user can access or modify.</p><h3 id="authorization-on-specific-rows" tabindex="-1">Authorization on Specific Rows <a class="header-anchor" href="#authorization-on-specific-rows" aria-label="Permalink to &quot;Authorization on Specific Rows&quot;">â€‹</a></h3><p>The <code>allowApiUpdate</code>, <code>allowApiDelete</code>, and <code>allowApiInsert</code> options can also accept a function that receives the specific item as the first parameter, allowing row-level authorization:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// Users can only update tasks they own</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">Entity</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C0CAF5;">Task</span><span style="color:#89DDFF;">&gt;</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">tasks</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;"> {</span><span style="color:#7AA2F7;"> allowApiUpdate</span><span style="color:#89DDFF;">:</span><span style="color:#E0AF68;"> task</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#C0CAF5;"> task</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">owner</span><span style="color:#BB9AF7;"> ==</span><span style="color:#C0CAF5;"> remult</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">user</span><span style="color:#89DDFF;">?.</span><span style="color:#7DCFFF;">id</span><span style="color:#9ABDF5;"> })</span></span></code></pre></div><h3 id="filtering-accessible-rows" tabindex="-1">Filtering Accessible Rows <a class="header-anchor" href="#filtering-accessible-rows" aria-label="Permalink to &quot;Filtering Accessible Rows&quot;">â€‹</a></h3><p>To limit the rows a user has access to, use the <code>apiPrefilter</code> option:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">Entity</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C0CAF5;">Task</span><span style="color:#89DDFF;">&gt;</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">tasks</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#7AA2F7;">  apiPrefilter</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> ()</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">    // Admins can access all rows</span></span>
<span class="line"><span style="color:#BB9AF7;">    if</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">remult</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">isAllowed</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">admin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)) </span><span style="color:#BB9AF7;font-style:italic;">return</span><span style="color:#9ABDF5;"> {}</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">    // Non-admins can only access rows where they are the owner</span></span>
<span class="line"><span style="color:#BB9AF7;font-style:italic;">    return</span><span style="color:#9ABDF5;"> { </span><span style="color:#73DACA;">owner</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> remult</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">user</span><span style="color:#BB9AF7;">!</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">id</span><span style="color:#9ABDF5;"> }</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span></code></pre></div><p>The <code>apiPrefilter</code> adds a filter to all CRUD API requests, ensuring that only authorized data is accessible through the API.</p><h3 id="preprocessing-filters-for-api-requests" tabindex="-1">Preprocessing Filters for API Requests <a class="header-anchor" href="#preprocessing-filters-for-api-requests" aria-label="Permalink to &quot;Preprocessing Filters for API Requests&quot;">â€‹</a></h3><p>For more complex scenarios, you can use <code>apiPreprocessFilter</code> to dynamically modify the filter based on the specific request and additional filter information:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">Entity</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C0CAF5;">Task</span><span style="color:#89DDFF;">&gt;</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">tasks</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#7AA2F7;">  apiPreprocessFilter</span><span style="color:#89DDFF;">:</span><span style="color:#9D7CD8;font-style:italic;"> async</span><span style="color:#9ABDF5;"> (</span><span style="color:#E0AF68;">filter</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#E0AF68;">getPreciseValues</span><span style="color:#89DDFF;">}</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">    // Ensure that users can only query tasks for specific customers</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">    const</span><span style="color:#BB9AF7;"> preciseValues</span><span style="color:#89DDFF;"> =</span><span style="color:#BB9AF7;font-style:italic;"> await</span><span style="color:#7AA2F7;"> getPreciseValues</span><span style="color:#9ABDF5;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BB9AF7;">    if</span><span style="color:#9ABDF5;"> (</span><span style="color:#BB9AF7;">!</span><span style="color:#C0CAF5;">preciseValues</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">customerId</span><span style="color:#9ABDF5;">) {</span></span>
<span class="line"><span style="color:#BB9AF7;">      throw</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> ForbiddenError</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">You must specify a valid customerId filter</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#9ABDF5;">    }</span></span>
<span class="line"><span style="color:#BB9AF7;font-style:italic;">    return</span><span style="color:#C0CAF5;"> filter</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span></code></pre></div><p>In this example, <code>apiPreprocessFilter</code> uses the <code>getPreciseValues</code> method to ensure that users must specify a valid <code>customerId</code> filter when querying tasks, allowing for more granular control over the data that is accessible through the API.</p><p><strong>Note:</strong> The <code>preciseValues</code> object includes the actual values that are used in the filter. For example, in the code sample above, if the <code>customerId</code> filter specifies the values <code>&#39;1&#39;</code>, <code>&#39;2&#39;</code>, and <code>&#39;3&#39;</code>, then <code>preciseValues.customerId</code> will be an array containing these values. This allows you to check and enforce specific filter criteria in your preprocessing logic.</p><p>This added note explains the significance of the <code>preciseValues</code> property and how it includes the actual values used in the filter, providing an example for clarity.</p><h3 id="warning-api-filters-do-not-affect-backend-queries" tabindex="-1">Warning: API Filters Do Not Affect Backend Queries <a class="header-anchor" href="#warning-api-filters-do-not-affect-backend-queries" aria-label="Permalink to &quot;Warning: API Filters Do Not Affect Backend Queries&quot;">â€‹</a></h3><p>It&#39;s important to note that <code>apiPrefilter</code> and <code>apiPreprocessFilter</code> only apply to API requests. They do not affect backend queries, such as those executed through backend methods or non-Remult routes.</p><p>For instance, in a sign-in scenario, a backend method might need to check all user records to verify a user&#39;s existence without exposing all user data through the API. Once authenticated, the user should only have access to their own record for updates.</p><h3 id="backend-filters-for-consistent-access-control" tabindex="-1">Backend Filters for Consistent Access Control <a class="header-anchor" href="#backend-filters-for-consistent-access-control" aria-label="Permalink to &quot;Backend Filters for Consistent Access Control&quot;">â€‹</a></h3><p>To apply similar filtering logic to backend queries, you can use <code>backendPrefilter</code> and <code>backendPreprocessFilter</code>:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">Entity</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C0CAF5;">Task</span><span style="color:#89DDFF;">&gt;</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">tasks</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#7AA2F7;">  backendPrefilter</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> ()</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">    // Admins can access all rows</span></span>
<span class="line"><span style="color:#BB9AF7;">    if</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">remult</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">isAllowed</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">admin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)) </span><span style="color:#BB9AF7;font-style:italic;">return</span><span style="color:#9ABDF5;"> {}</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">    // Non-admins can only access rows where they are the owner</span></span>
<span class="line"><span style="color:#BB9AF7;font-style:italic;">    return</span><span style="color:#9ABDF5;"> { </span><span style="color:#73DACA;">owner</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> remult</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">user</span><span style="color:#BB9AF7;">!</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">id</span><span style="color:#9ABDF5;"> }</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#7AA2F7;">  backendPreprocessFilter</span><span style="color:#89DDFF;">:</span><span style="color:#9D7CD8;font-style:italic;"> async</span><span style="color:#9ABDF5;"> (</span><span style="color:#E0AF68;">filter</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#E0AF68;">getPreciseValues</span><span style="color:#89DDFF;">}</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">    // Apply additional filtering logic for backend queries</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">    const</span><span style="color:#BB9AF7;"> preciseValues</span><span style="color:#89DDFF;"> =</span><span style="color:#BB9AF7;font-style:italic;"> await</span><span style="color:#7AA2F7;"> getPreciseValues</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">filter</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BB9AF7;">    if</span><span style="color:#9ABDF5;"> (</span><span style="color:#BB9AF7;">!</span><span style="color:#C0CAF5;">preciseValues</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">owner</span><span style="color:#9ABDF5;">) {</span></span>
<span class="line"><span style="color:#BB9AF7;">      throw</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> ForbiddenError</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">You must specify a valid owner filter</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#9ABDF5;">    }</span></span>
<span class="line"><span style="color:#BB9AF7;font-style:italic;">    return</span><span style="color:#C0CAF5;"> filter</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span></code></pre></div><p>In this example, <code>backendPrefilter</code> and <code>backendPreprocessFilter</code> ensure that non-admin users can only access their own tasks in backend queries, providing consistent access control across both API and backend operations.</p><h2 id="field-level-authorization" tabindex="-1">Field-Level Authorization <a class="header-anchor" href="#field-level-authorization" aria-label="Permalink to &quot;Field-Level Authorization&quot;">â€‹</a></h2><p>Field-level authorization allows control over individual fields within an entity:</p><p><em>Field level authorization happens after entity level authorization AND if it&#39;s allowed.</em></p><ul><li><code>includeInApi</code>: Determines if the field is included in the API response.</li><li><code>allowApiUpdate</code>: Controls if a field can be updated. If false, any change to the field is ignored.</li></ul><p>Examples:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// This field will not be included in the API response</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">string</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;"> includeInApi</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> false</span><span style="color:#9ABDF5;"> })</span></span>
<span class="line"><span style="color:#C0CAF5;">password</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// Only users with the &#39;admin&#39; role can update this field</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">boolean</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;"> allowApiUpdate</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">admin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;"> })</span></span>
<span class="line"><span style="color:#C0CAF5;">admin</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9E64;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// Titles can only be updated by the task owner</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">string</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C0CAF5;">Task</span><span style="color:#89DDFF;">&gt;</span><span style="color:#9ABDF5;">({</span><span style="color:#7AA2F7;"> allowApiUpdate</span><span style="color:#89DDFF;">:</span><span style="color:#E0AF68;"> task</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#C0CAF5;"> task</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">owner</span><span style="color:#BB9AF7;"> ===</span><span style="color:#C0CAF5;"> remult</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">user</span><span style="color:#BB9AF7;">!</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">id</span><span style="color:#9ABDF5;"> })</span></span>
<span class="line"><span style="color:#C0CAF5;">title</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// This field can only be updated when creating a new entity</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">string</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C0CAF5;">Category</span><span style="color:#89DDFF;">&gt;</span><span style="color:#9ABDF5;">({</span><span style="color:#7AA2F7;"> allowApiUpdate</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> (</span><span style="color:#E0AF68;">c</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#7AA2F7;"> getEntityRef</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">c</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">isNew</span><span style="color:#9ABDF5;">()</span><span style="color:#9ABDF5;"> })</span></span>
<span class="line"><span style="color:#C0CAF5;">Description</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &quot;&quot;</span></span></code></pre></div><h3 id="field-masking" tabindex="-1">Field Masking <a class="header-anchor" href="#field-masking" aria-label="Permalink to &quot;Field Masking&quot;">â€‹</a></h3><p>To mask a field, combine a non-API field with a <code>serverExpression</code> that returns the masked value:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// This field is not included in the API response</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">string</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;"> includeInApi</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> false</span><span style="color:#9ABDF5;"> })</span></span>
<span class="line"><span style="color:#C0CAF5;">password</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// The field value is masked in the API response</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">string</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C0CAF5;">User</span><span style="color:#89DDFF;">&gt;</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#7AA2F7;">  serverExpression</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> ()</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">***</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  // Update the real password field when the masked field is changed</span></span>
<span class="line"><span style="color:#7AA2F7;">  saving</span><span style="color:#89DDFF;">:</span><span style="color:#9D7CD8;font-style:italic;"> async</span><span style="color:#9ABDF5;"> (</span><span style="color:#E0AF68;">user</span><span style="color:#89DDFF;">,</span><span style="color:#E0AF68;"> fieldRef</span><span style="color:#89DDFF;">,</span><span style="color:#E0AF68;"> e</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#BB9AF7;">    if</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">fieldRef</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">valueChanged</span><span style="color:#9ABDF5;">()) {</span></span>
<span class="line"><span style="color:#C0CAF5;">      user</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">password</span><span style="color:#89DDFF;"> =</span><span style="color:#BB9AF7;font-style:italic;"> await</span><span style="color:#C0CAF5;"> User</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">hash</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">user</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">updatePassword</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#9ABDF5;">    }</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span>
<span class="line"><span style="color:#C0CAF5;">updatePassword</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &quot;&quot;</span></span></code></pre></div><h2 id="backendmethod-authorization" tabindex="-1">BackendMethod Authorization <a class="header-anchor" href="#backendmethod-authorization" aria-label="Permalink to &quot;BackendMethod Authorization&quot;">â€‹</a></h2><p>Backend methods use the <code>allowed</code> option to determine authorization:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// Only authenticated users can execute this method</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">BackendMethod</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;"> allowed</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> Allow</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">authenticated</span><span style="color:#9ABDF5;"> })</span></span>
<span class="line"><span style="color:#C0CAF5;">static</span><span style="color:#C0CAF5;"> async</span><span style="color:#7AA2F7;"> doSomething</span><span style="color:#9ABDF5;">()</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  // something</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div><p>The <code>allowed</code> option can receive a boolean, a string role, an array of role strings, or a function.</p><h2 id="reusing-access-control-definitions-in-the-frontend" tabindex="-1">Reusing Access Control Definitions in the Frontend <a class="header-anchor" href="#reusing-access-control-definitions-in-the-frontend" aria-label="Permalink to &quot;Reusing Access Control Definitions in the Frontend&quot;">â€‹</a></h2><p>Access control definitions set in entities can be reused as a single source of truth in the frontend. This allows for consistent and centralized management of access control logic across your application. For example, in a React component, you can conditionally render UI elements based on the access control rules defined in the entity:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-9K8u0" id="tab-KEFeOrc" checked><label data-title="React" for="tab-KEFeOrc">React</label><input type="radio" name="group-9K8u0" id="tab-lw9Guxc"><label data-title="Angular" for="tab-lw9Guxc">Angular</label><input type="radio" name="group-9K8u0" id="tab-2OeKhUz"><label data-title="Vue" for="tab-2OeKhUz">Vue</label><input type="radio" name="group-9K8u0" id="tab-rJXdKlR"><label data-title="Svelte" for="tab-rJXdKlR">Svelte</label></div><div class="blocks"><div class="language-tsx active"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;">function</span><span style="color:#7AA2F7;"> UserComponent</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">{</span><span style="color:#E0AF68;"> user</span><span style="color:#89DDFF;"> }:</span><span style="color:#9ABDF5;"> {</span><span style="color:#C0CAF5;"> user</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> User</span><span style="color:#9ABDF5;"> })</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  //...</span></span>
<span class="line"><span style="color:#BB9AF7;font-style:italic;">  return</span><span style="color:#9ABDF5;"> (</span></span>
<span class="line"><span style="color:#BA3C97;">    &lt;</span><span style="color:#F7768E;">tr</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#BA3C97;">      &lt;</span><span style="color:#F7768E;">td</span><span style="color:#BA3C97;">&gt;</span><span style="color:#7DCFFF;">{</span><span style="color:#C0CAF5;">user</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">name}</span><span style="color:#BA3C97;">&lt;/</span><span style="color:#F7768E;">td</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#7DCFFF;">      {</span><span style="color:#51597D;font-style:italic;">/* Only show the admin field if the user is allowed to see it */</span><span style="color:#7DCFFF;">}</span></span>
<span class="line"><span style="color:#7DCFFF;">      {</span><span style="color:#C0CAF5;">userRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">fields</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">admin</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">includeInApi</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">user</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> &amp;&amp;</span><span style="color:#BA3C97;"> &lt;</span><span style="color:#F7768E;">td</span><span style="color:#BA3C97;">&gt;</span><span style="color:#7DCFFF;">{</span><span style="color:#C0CAF5;">user</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">admin}</span><span style="color:#BA3C97;">&lt;/</span><span style="color:#F7768E;">td</span><span style="color:#BA3C97;">&gt;</span><span style="color:#7DCFFF;">}</span></span>
<span class="line"><span style="color:#7DCFFF;">      {</span><span style="color:#51597D;font-style:italic;">/* Only show the delete button if the user is allowed to delete the admin */</span><span style="color:#7DCFFF;">}</span></span>
<span class="line"><span style="color:#7DCFFF;">      {</span><span style="color:#C0CAF5;">userRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">metadata</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">apiDeleteAllowed</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">user</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> &amp;&amp;</span><span style="color:#9ABDF5;"> (</span></span>
<span class="line"><span style="color:#BA3C97;">        &lt;</span><span style="color:#F7768E;">td</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#BA3C97;">          &lt;</span><span style="color:#F7768E;">button</span><span style="color:#BB9AF7;"> onClick</span><span style="color:#89DDFF;">=</span><span style="color:#7DCFFF;">{</span><span style="color:#C0CAF5;">deleteUser</span><span style="color:#7DCFFF;">}</span><span style="color:#BA3C97;">&gt;</span><span style="color:#9AA5CE;">Delete</span><span style="color:#BA3C97;">&lt;/</span><span style="color:#F7768E;">button</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#BA3C97;">        &lt;/</span><span style="color:#F7768E;">td</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#9ABDF5;">      )</span><span style="color:#7DCFFF;">}</span></span>
<span class="line"><span style="color:#BA3C97;">    &lt;/</span><span style="color:#F7768E;">tr</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#9ABDF5;">  )</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BA3C97;">&lt;</span><span style="color:#F7768E;">tr</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#BA3C97;">  &lt;</span><span style="color:#F7768E;">td</span><span style="color:#BA3C97;">&gt;</span><span style="color:#9AA5CE;">{{user.name}}</span><span style="color:#BA3C97;">&lt;/</span><span style="color:#F7768E;">td</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  &lt;!-- Only show the admin field if the user is allowed to see it --&gt;</span></span>
<span class="line"><span style="color:#BA3C97;">  &lt;</span><span style="color:#F7768E;">td</span><span style="color:#BB9AF7;"> *ngIf</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">userRepo.fields.admin.includeInApi(user)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BA3C97;">&gt;</span><span style="color:#9AA5CE;">{{user.admin}}</span><span style="color:#BA3C97;">&lt;/</span><span style="color:#F7768E;">td</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  &lt;!-- Only show the delete button if the user is allowed to delete the admin--&gt;</span></span>
<span class="line"><span style="color:#BA3C97;">  &lt;</span><span style="color:#F7768E;">td</span><span style="color:#BB9AF7;"> *ngIf</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">userRepo.metadata.apiDeleteAllowed(user)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#BA3C97;">    &lt;</span><span style="color:#F7768E;">button</span><span style="color:#BB9AF7;"> (click)</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">deleteUser(user)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BA3C97;">&gt;</span><span style="color:#9AA5CE;">Delete</span><span style="color:#BA3C97;">&lt;/</span><span style="color:#F7768E;">button</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#BA3C97;">  &lt;/</span><span style="color:#F7768E;">td</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#BA3C97;">&lt;/</span><span style="color:#F7768E;">tr</span><span style="color:#BA3C97;">&gt;</span></span></code></pre></div><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BA3C97;">&lt;</span><span style="color:#F7768E;">tr</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#A9B1D6;">  &lt;td&gt;{{user.name}}&lt;/td&gt;</span></span>
<span class="line"><span style="color:#A9B1D6;">  &lt;!-- Only show the admin field if the user is allowed to see it --&gt;</span></span>
<span class="line"><span style="color:#A9B1D6;">  &lt;td v-if=&quot;userRepo.fields.admin.includeInApi(user)&quot;&gt;{{user.admin}}&lt;/td&gt;</span></span>
<span class="line"><span style="color:#A9B1D6;">  &lt;!-- Only show the delete button if the user is allowed to delete the admin--&gt;</span></span>
<span class="line"><span style="color:#A9B1D6;">  &lt;td v-if=&quot;userRepo.metadata.apiDeleteAllowed(user)&quot;&gt;</span></span>
<span class="line"><span style="color:#A9B1D6;">    &lt;button @click=&quot;deleteUser(user)&quot;&gt;Delete&lt;/button&gt;</span></span>
<span class="line"><span style="color:#A9B1D6;">  &lt;/td&gt;</span></span>
<span class="line"><span style="color:#BA3C97;">&lt;/</span><span style="color:#F7768E;">tr</span><span style="color:#BA3C97;">&gt;</span></span></code></pre></div><div class="language-svelte"><button title="Copy Code" class="copy"></button><span class="lang">svelte</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BA3C97;">&lt;</span><span style="color:#F7768E;">tr</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#BA3C97;">  &lt;</span><span style="color:#F7768E;">td</span><span style="color:#BA3C97;">&gt;</span><span style="color:#7DCFFF;">{</span><span style="color:#9ABDF5;">{</span><span style="color:#A9B1D6;">user.</span><span style="color:#C0CAF5;">name</span><span style="color:#9ABDF5;">}</span><span style="color:#7DCFFF;">}</span><span style="color:#BA3C97;">&lt;/</span><span style="color:#F7768E;">td</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  &lt;!-- Only show the admin field if the user is allowed to see it --&gt;</span></span>
<span class="line"><span style="color:#9ABDF5;">  {</span><span style="color:#89DDFF;">#</span><span style="color:#BB9AF7;">if</span><span style="color:#C0CAF5;"> userRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">fields</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">admin</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">includeInApi</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">user</span><span style="color:#9ABDF5;">)}</span></span>
<span class="line"><span style="color:#BA3C97;">  &lt;</span><span style="color:#F7768E;">td</span><span style="color:#BA3C97;">&gt;</span><span style="color:#7DCFFF;">{</span><span style="color:#9ABDF5;">{</span><span style="color:#A9B1D6;">user.</span><span style="color:#C0CAF5;">admin</span><span style="color:#9ABDF5;">}</span><span style="color:#7DCFFF;">}</span><span style="color:#BA3C97;">&lt;/</span><span style="color:#F7768E;">td</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#9ABDF5;">  {</span><span style="color:#89DDFF;">/</span><span style="color:#BB9AF7;">if</span><span style="color:#9ABDF5;">}</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  &lt;!-- Only show the delete button if the user is allowed to delete the admin--&gt;</span></span>
<span class="line"><span style="color:#9ABDF5;">  {</span><span style="color:#89DDFF;">#</span><span style="color:#BB9AF7;">if</span><span style="color:#C0CAF5;"> userRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">metadata</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">apiDeleteAllowed</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">user</span><span style="color:#9ABDF5;">)}</span></span>
<span class="line"><span style="color:#BA3C97;">  &lt;</span><span style="color:#F7768E;">td</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#BA3C97;">    &lt;</span><span style="color:#F7768E;">button</span><span style="color:#DE5971;"> (</span><span style="color:#BB9AF7;">click</span><span style="color:#DE5971;">)=&quot;</span><span style="color:#BB9AF7;">deleteUser</span><span style="color:#DE5971;">(</span><span style="color:#BB9AF7;">user</span><span style="color:#DE5971;">)&quot;</span><span style="color:#BA3C97;">&gt;</span><span style="color:#A9B1D6;">Delete</span><span style="color:#BA3C97;">&lt;/</span><span style="color:#F7768E;">button</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#BA3C97;">  &lt;/</span><span style="color:#F7768E;">td</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#9ABDF5;">  {</span><span style="color:#89DDFF;">/</span><span style="color:#BB9AF7;">if</span><span style="color:#9ABDF5;">}</span></span>
<span class="line"><span style="color:#BA3C97;">&lt;/</span><span style="color:#F7768E;">tr</span><span style="color:#BA3C97;">&gt;</span></span></code></pre></div></div></div><h2 id="additional-resources" tabindex="-1">Additional Resources <a class="header-anchor" href="#additional-resources" aria-label="Permalink to &quot;Additional Resources&quot;">â€‹</a></h2><p>Check out this informative <a href="https://www.youtube.com/watch?v=9lWQwAUcKEM" target="_blank" rel="noreferrer">YouTube video</a>. It discusses the concepts covered in this article and provides practical examples to help you understand how to implement robust access control in your applications.</p><hr><p>This article provides a comprehensive overview of the layers of access control in web applications, offering a granular approach to securing your application at the entity, row, field, and method levels.</p>`,50)]))}const d=a(e,[["render",p]]);export{D as __pageData,d as default};
