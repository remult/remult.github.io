import{_ as a,c as n,o as l,L as o}from"./chunks/framework.DdPzwmCl.js";const D=JSON.parse('{"title":"SvelteKit","description":"","frontmatter":{},"headers":[],"relativePath":"docs/installation/framework/sveltekit.md","filePath":"docs/installation/framework/sveltekit.md","lastUpdated":1746535795000}'),p={name:"docs/installation/framework/sveltekit.md"};function e(t,s,c,r,y,F){return l(),n("div",null,s[0]||(s[0]=[o(`<h1 id="sveltekit" tabindex="-1">SvelteKit <a class="header-anchor" href="#sveltekit" aria-label="Permalink to &quot;SvelteKit&quot;">​</a></h1><h2 id="create-a-sveltekit-project" tabindex="-1">Create a SvelteKit Project <a class="header-anchor" href="#create-a-sveltekit-project" aria-label="Permalink to &quot;Create a SvelteKit Project&quot;">​</a></h2><p>To create a new SvelteKit project, run the following command:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#C0CAF5;">npx</span><span style="color:#9ECE6A;"> sv@latest</span><span style="color:#9ECE6A;"> create</span><span style="color:#9ECE6A;"> remult-sveltekit-todo</span></span></code></pre></div><p>During the setup, answer the prompts as follows:</p><ol><li><strong>Which Svelte app template?</strong>: ... <code>minimal</code> Project</li><li><strong>Add type checking with TypeScript?</strong> ... Yes, using <code>TypeScript</code> syntax</li><li><strong>Select additional options</strong>: ... We didn&#39;t select anything for this tutorial. Feel free to adapt it to your needs.</li><li><strong>Which package manager?</strong>: ... We took <code>npm</code>, if you perfer others, feel free.</li></ol><p>Once the setup is complete, navigate into the project directory:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#0DB9D7;">cd</span><span style="color:#9ECE6A;"> remult-sveltekit-todo</span></span></code></pre></div><h2 id="install-required-packages-and-remult" tabindex="-1">Install Required Packages and Remult <a class="header-anchor" href="#install-required-packages-and-remult" aria-label="Permalink to &quot;Install Required Packages and Remult&quot;">​</a></h2><p>Install Remult and any necessary dependencies by running:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#C0CAF5;">npm</span><span style="color:#9ECE6A;"> install</span><span style="color:#9ECE6A;"> remult</span><span style="color:#E0AF68;"> --save-dev</span></span></code></pre></div><h2 id="bootstrap-remult" tabindex="-1">Bootstrap Remult <a class="header-anchor" href="#bootstrap-remult" aria-label="Permalink to &quot;Bootstrap Remult&quot;">​</a></h2><p>To set up Remult in your SvelteKit project:</p><ol><li>Create your remult <code>api</code></li></ol><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-I-fYz" id="tab-Z9Us5YD" checked><label data-title="src/server/api.ts" for="tab-Z9Us5YD">src/server/api.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">remultApi</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult/remult-sveltekit</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#9D7CD8;font-style:italic;"> const</span><span style="color:#BB9AF7;"> api</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> remultApi</span><span style="color:#9ABDF5;">({})</span></span></code></pre></div></div></div><ol start="2"><li>Create a remult <code>api route</code></li></ol><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-xfENS" id="tab-0MP9xQo" checked><label data-title="src/routes/api/[...remult]/+server.ts" for="tab-0MP9xQo">src/routes/api/[...remult]/+server.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">api</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">../../../server/api</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#9D7CD8;font-style:italic;"> const</span><span style="color:#89DDFF;"> {</span><span style="color:#BB9AF7;"> GET</span><span style="color:#89DDFF;">,</span><span style="color:#BB9AF7;"> POST</span><span style="color:#89DDFF;">,</span><span style="color:#BB9AF7;"> PUT</span><span style="color:#89DDFF;">,</span><span style="color:#BB9AF7;"> DELETE</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;"> =</span><span style="color:#C0CAF5;"> api</span></span></code></pre></div></div></div><h2 id="final-tweaks" tabindex="-1">Final Tweaks <a class="header-anchor" href="#final-tweaks" aria-label="Permalink to &quot;Final Tweaks&quot;">​</a></h2><p>Remult uses TypeScript decorators to enhance classes into entities. To enable decorators in your SvelteKit project, modify the <code>tsconfig.json</code> file by adding the following to the <code>compilerOptions</code> section:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki tokyo-night has-diff vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#9ABDF5;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#7AA2F7;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line diff add"><span style="color:#89DDFF;">    &quot;</span><span style="color:#0DB9D7;">experimentalDecorators</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> true</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div><h2 id="run-the-app" tabindex="-1">Run the App <a class="header-anchor" href="#run-the-app" aria-label="Permalink to &quot;Run the App&quot;">​</a></h2><p>To start the development server, run the following command:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#C0CAF5;">npm</span><span style="color:#9ECE6A;"> run</span><span style="color:#9ECE6A;"> dev</span></span></code></pre></div><p>Your SvelteKit app will be available at <a href="http://localhost:5173" target="_blank" rel="noreferrer">http://localhost:5173</a>.</p><p>Your SvelteKit project with Remult is now up and running.</p><h1 id="extra" tabindex="-1">Extra <a class="header-anchor" href="#extra" aria-label="Permalink to &quot;Extra&quot;">​</a></h1><h2 id="extra-remult-in-other-sveltekit-routes" tabindex="-1">Extra - Remult in other SvelteKit routes <a class="header-anchor" href="#extra-remult-in-other-sveltekit-routes" aria-label="Permalink to &quot;Extra - Remult in other SvelteKit routes&quot;">​</a></h2><p>To enable remult across all sveltekit route</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-JBGvt" id="tab-uEmEz2_" checked><label data-title="src/hooks.server.ts" for="tab-uEmEz2_">src/hooks.server.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">sequence</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">@sveltejs/kit/hooks</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#C0CAF5;">api</span><span style="color:#89DDFF;"> as</span><span style="color:#0DB9D7;"> handleRemult</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">./server/api</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#9D7CD8;font-style:italic;"> const</span><span style="color:#BB9AF7;"> handle</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> sequence</span><span style="color:#9ABDF5;">(</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  // Manage your sequence of handlers here</span></span>
<span class="line"><span style="color:#C0CAF5;">  handleRemult</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">)</span></span></code></pre></div></div></div><h2 id="extra-universal-load-ssr" tabindex="-1">Extra - Universal load &amp; SSR <a class="header-anchor" href="#extra-universal-load-ssr" aria-label="Permalink to &quot;Extra - Universal load &amp; SSR&quot;">​</a></h2><p>To Use remult in ssr <code>PageLoad</code> - this will leverage the <code>event</code>&#39;s fetch to load data on the server without reloading it on the frontend, and abiding to all api rules even when it runs on the server</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-S52oO" id="tab-xm1y1vI" checked><label data-title="src/routes/+page.ts" for="tab-xm1y1vI">src/routes/+page.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">remult</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#BB9AF7;"> type</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">PageLoad</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">./$types</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#9D7CD8;font-style:italic;"> const</span><span style="color:#BB9AF7;"> load</span><span style="color:#89DDFF;"> =</span><span style="color:#9ABDF5;"> (</span><span style="color:#9D7CD8;font-style:italic;">async</span><span style="color:#9ABDF5;"> (</span><span style="color:#E0AF68;">event</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  // Instruct remult to use the special svelte fetch</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  // Like this univeral load will work in SSR &amp; CSR</span></span>
<span class="line"><span style="color:#C0CAF5;">  remult</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">useFetch</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">event</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">fetch</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#BB9AF7;font-style:italic;">  return</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Task</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">find</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span><span style="color:#BB9AF7;"> satisfies</span><span style="color:#C0CAF5;"> PageLoad</span></span></code></pre></div></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can add this in <code>+layout.ts</code> as well and all routes <strong>under</strong> will have the correct fetch out of the box.</p></div><h2 id="extra-server-load" tabindex="-1">Extra - Server load <a class="header-anchor" href="#extra-server-load" aria-label="Permalink to &quot;Extra - Server load&quot;">​</a></h2><p>If you return a remult entity from the <code>load</code> function of a <code>+page.server.ts</code>, SvelteKit will complain and show this error:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#C0CAF5;">Error:</span><span style="color:#9ECE6A;"> Data</span><span style="color:#9ECE6A;"> returned</span><span style="color:#9ECE6A;"> from</span><span style="color:#89DDFF;"> \`</span><span style="color:#C0CAF5;">load</span><span style="color:#89DDFF;">\`</span><span style="color:#BB9AF7;"> while</span><span style="color:#C0CAF5;"> rendering</span><span style="color:#9ECE6A;"> /</span><span style="color:#9ECE6A;"> is</span><span style="color:#9ECE6A;"> not</span><span style="color:#9ECE6A;"> serializable:</span></span>
<span class="line"><span style="color:#C0CAF5;">Cannot</span><span style="color:#9ECE6A;"> stringify</span><span style="color:#9ECE6A;"> arbitrary</span><span style="color:#9ECE6A;"> non-POJOs</span><span style="color:#A9B1D6;"> (data.tasks[0])</span></span></code></pre></div><p>To fix this, you can use <code>repo(Entity).toJson()</code> in the server load function and <code>repo(Entity).fromJson()</code> in the .svelte file to serialize and deserialize well the entity.</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-xaKr5" id="tab-_e86arc" checked><label data-title="src/routes/+page.server.ts" for="tab-_e86arc">src/routes/+page.server.ts</label><input type="radio" name="group-xaKr5" id="tab-Jb80QZg"><label data-title="src/routes/+page.svelte" for="tab-Jb80QZg">src/routes/+page.svelte</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">repo</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#BB9AF7;"> type</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">PageServerLoad</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">./$types</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">Task</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">../demo/todo/Task</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#9D7CD8;font-style:italic;"> const</span><span style="color:#BB9AF7;"> load</span><span style="color:#89DDFF;"> =</span><span style="color:#9ABDF5;"> (</span><span style="color:#9D7CD8;font-style:italic;">async</span><span style="color:#9ABDF5;"> ()</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">  const</span><span style="color:#BB9AF7;"> tasks</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Task</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">toJson</span><span style="color:#9ABDF5;">(</span><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Task</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">find</span><span style="color:#9ABDF5;">())</span></span>
<span class="line"><span style="color:#BB9AF7;font-style:italic;">  return</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#C0CAF5;">    tasks</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span><span style="color:#BB9AF7;"> satisfies</span><span style="color:#C0CAF5;"> PageServerLoad</span></span></code></pre></div><div class="language-svelte"><button title="Copy Code" class="copy"></button><span class="lang">svelte</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BA3C97;">&lt;</span><span style="color:#F7768E;">script</span><span style="color:#BB9AF7;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#7DCFFF;">  import</span><span style="color:#BB9AF7;"> type</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">PageData</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">./$types</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#7DCFFF;">  import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">Task</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">../demo/todo/Task</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#7DCFFF;">  import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">repo</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">  let</span><span style="color:#89DDFF;"> {</span><span style="color:#BB9AF7;"> data</span><span style="color:#89DDFF;"> }:</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> data</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> PageData </span><span style="color:#9ABDF5;">}</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> $</span><span style="color:#7AA2F7;">props</span><span style="color:#9ABDF5;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">  let</span><span style="color:#BB9AF7;"> tasks</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Task</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">fromJson</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">data</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">tasks</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BA3C97;">&lt;/</span><span style="color:#F7768E;">script</span><span style="color:#BA3C97;">&gt;</span></span></code></pre></div></div></div><hr><h4 id="since-sveltejs-kit-2-11-0-there-is-a-new-feature-universal-hooks-transport" tabindex="-1">Since <code>@sveltejs/kit@2.11.0</code>, there is a new feature: <a href="https://svelte.dev/docs/kit/hooks#Universal-hooks-transport" target="_blank" rel="noreferrer">Universal-hooks-transport</a> <a class="header-anchor" href="#since-sveltejs-kit-2-11-0-there-is-a-new-feature-universal-hooks-transport" aria-label="Permalink to &quot;Since \`@sveltejs/kit@2.11.0\`, there is a new feature: [Universal-hooks-transport](https://svelte.dev/docs/kit/hooks#Universal-hooks-transport)&quot;">​</a></h4><p>With this new feature, you can get rid of <code>repo(Entity).toJson()</code> and <code>repo(Entity).fromJson()</code> thanks to this file: <code>hooks.ts</code>.</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-l4Vpz" id="tab-zVdGmBL" checked><label data-title="src/hooks.ts" for="tab-zVdGmBL">src/hooks.ts</label><input type="radio" name="group-l4Vpz" id="tab-w8u1q_4"><label data-title="src/routes/+page.server.ts" for="tab-w8u1q_4">src/routes/+page.server.ts</label><input type="radio" name="group-l4Vpz" id="tab-qBbwlzy"><label data-title="src/routes/+page.svelte" for="tab-qBbwlzy">src/routes/+page.svelte</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">repo</span><span style="color:#89DDFF;">,</span><span style="color:#BB9AF7;"> type</span><span style="color:#0DB9D7;"> ClassType</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">Task</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">./demo/todo/Task</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#BB9AF7;"> type</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">Transport</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">@sveltejs/kit</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">api</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">./server/api</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// You can have:</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// A/ a local entity array to work only these ones (like here)</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">//  or</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// B/ import a global entity array that will be</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">//    shared between backend and frontend (not in ./server/api.ts)</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> entities</span><span style="color:#89DDFF;"> =</span><span style="color:#9ABDF5;"> [</span><span style="color:#7DCFFF;">Task</span><span style="color:#9ABDF5;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#9D7CD8;font-style:italic;"> const</span><span style="color:#BB9AF7;"> transport</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> Transport</span><span style="color:#89DDFF;"> =</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#73DACA;">  remultTransport</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#7AA2F7;">    encode</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> (</span><span style="color:#E0AF68;">value</span><span style="color:#89DDFF;">:</span><span style="color:#0DB9D7;"> any</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#BB9AF7;">      for</span><span style="color:#9ABDF5;"> (</span><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#BB9AF7;"> index</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9E64;"> 0</span><span style="color:#89DDFF;">;</span><span style="color:#C0CAF5;"> index</span><span style="color:#BB9AF7;"> &lt;</span><span style="color:#C0CAF5;"> entities</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">length</span><span style="color:#89DDFF;">;</span><span style="color:#C0CAF5;"> index</span><span style="color:#89DDFF;">++</span><span style="color:#9ABDF5;">) {</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">        const</span><span style="color:#BB9AF7;"> element</span><span style="color:#89DDFF;"> =</span><span style="color:#C0CAF5;"> entities</span><span style="color:#9ABDF5;">[</span><span style="color:#7DCFFF;">index</span><span style="color:#9ABDF5;">] </span><span style="color:#89DDFF;">as</span><span style="color:#C0CAF5;"> ClassType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#0DB9D7;">any</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BB9AF7;">        if</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">value</span><span style="color:#89DDFF;"> instanceof</span><span style="color:#C0CAF5;"> element</span><span style="color:#9ABDF5;">) {</span></span>
<span class="line"><span style="color:#BB9AF7;font-style:italic;">          return</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#F7768E;font-weight:bold;">            ...</span><span style="color:#7AA2F7;">repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">element</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">toJson</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">value</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#41A6B5;">            entity_key</span><span style="color:#89DDFF;">:</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">element</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">metadata</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">key</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">          }</span></span>
<span class="line"><span style="color:#9ABDF5;">        }</span></span>
<span class="line"><span style="color:#9ABDF5;">      }</span></span>
<span class="line"><span style="color:#9ABDF5;">    }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#7AA2F7;">    decode</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> (</span><span style="color:#E0AF68;">value</span><span style="color:#89DDFF;">:</span><span style="color:#0DB9D7;"> any</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#BB9AF7;">      for</span><span style="color:#9ABDF5;"> (</span><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#BB9AF7;"> index</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9E64;"> 0</span><span style="color:#89DDFF;">;</span><span style="color:#C0CAF5;"> index</span><span style="color:#BB9AF7;"> &lt;</span><span style="color:#C0CAF5;"> entities</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">length</span><span style="color:#89DDFF;">;</span><span style="color:#C0CAF5;"> index</span><span style="color:#89DDFF;">++</span><span style="color:#9ABDF5;">) {</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">        const</span><span style="color:#BB9AF7;"> element</span><span style="color:#89DDFF;"> =</span><span style="color:#C0CAF5;"> entities</span><span style="color:#9ABDF5;">[</span><span style="color:#7DCFFF;">index</span><span style="color:#9ABDF5;">] </span><span style="color:#89DDFF;">as</span><span style="color:#C0CAF5;"> ClassType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#0DB9D7;">any</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BB9AF7;">        if</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">value</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">entity_key</span><span style="color:#BB9AF7;"> ===</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">element</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">metadata</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">key</span><span style="color:#9ABDF5;">) {</span></span>
<span class="line"><span style="color:#BB9AF7;font-style:italic;">          return</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">element</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">fromJson</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">value</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#9ABDF5;">        }</span></span>
<span class="line"><span style="color:#9ABDF5;">      }</span></span>
<span class="line"><span style="color:#9ABDF5;">    }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night has-diff vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">repo</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#BB9AF7;"> type</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">PageServerLoad</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">./$types</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">Task</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">../demo/todo/Task</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#9D7CD8;font-style:italic;"> const</span><span style="color:#BB9AF7;"> load</span><span style="color:#89DDFF;"> =</span><span style="color:#9ABDF5;"> (</span><span style="color:#9D7CD8;font-style:italic;">async</span><span style="color:#9ABDF5;"> ()</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line diff remove"><span style="color:#51597D;font-style:italic;">  // const tasks = repo(Task).toJson(await repo(Task).find())</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">  const</span><span style="color:#BB9AF7;"> tasks</span><span style="color:#89DDFF;"> =</span><span style="color:#BB9AF7;font-style:italic;"> await</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Task</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">find</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#BB9AF7;font-style:italic;">  return</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#C0CAF5;">    tasks</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span><span style="color:#BB9AF7;"> satisfies</span><span style="color:#C0CAF5;"> PageServerLoad</span></span></code></pre></div><div class="language-svelte"><button title="Copy Code" class="copy"></button><span class="lang">svelte</span><pre class="shiki tokyo-night has-diff vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BA3C97;">&lt;</span><span style="color:#F7768E;">script</span><span style="color:#BB9AF7;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#7DCFFF;">  import</span><span style="color:#BB9AF7;"> type</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">PageData</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">./$types</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#7DCFFF;">  import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">repo</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">  let</span><span style="color:#89DDFF;"> {</span><span style="color:#BB9AF7;"> data</span><span style="color:#89DDFF;"> }:</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> data</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> PageData </span><span style="color:#9ABDF5;">}</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> $</span><span style="color:#7AA2F7;">props</span><span style="color:#9ABDF5;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line diff remove"><span style="color:#51597D;font-style:italic;">  // let tasks = repo(Task).fromJson(data.tasks)</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">  let</span><span style="color:#BB9AF7;"> tasks</span><span style="color:#89DDFF;"> =</span><span style="color:#C0CAF5;"> data</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">tasks</span></span>
<span class="line"><span style="color:#BA3C97;">&lt;/</span><span style="color:#F7768E;">script</span><span style="color:#BA3C97;">&gt;</span></span></code></pre></div></div></div><h2 id="extra-svelte-5-reactivity" tabindex="-1">Extra - Svelte 5 &amp; Reactivity <a class="header-anchor" href="#extra-svelte-5-reactivity" aria-label="Permalink to &quot;Extra - Svelte 5 &amp; Reactivity&quot;">​</a></h2><p>Remult is fully compatible with Svelte 5, Rune, and Reactivity.</p><p>To take full advantage of it, add this snippet:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-ilrtM" id="tab-yEVJiCb" checked><label data-title="src/routes/+layout.svelte" for="tab-yEVJiCb">src/routes/+layout.svelte</label></div><div class="blocks"><div class="language-html active"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BA3C97;">&lt;</span><span style="color:#F7768E;">script</span><span style="color:#BB9AF7;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#7DCFFF;">  import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">Remult</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">  import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">createSubscriber</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">svelte/reactivity</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  // To be done once in the application.</span></span>
<span class="line"><span style="color:#BB9AF7;">  function</span><span style="color:#7AA2F7;"> initRemultSvelteReactivity</span><span style="color:#9ABDF5;">()</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">    // Auth reactivity (remult.user, remult.authenticated(), ...)</span></span>
<span class="line"><span style="color:#9ABDF5;">    {</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">      let</span><span style="color:#7AA2F7;"> update</span><span style="color:#89DDFF;"> =</span><span style="color:#9ABDF5;"> () </span><span style="color:#BB9AF7;">=&gt;</span><span style="color:#9ABDF5;"> {}</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">      let</span><span style="color:#BB9AF7;"> s</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> createSubscriber</span><span style="color:#9ABDF5;">((</span><span style="color:#E0AF68;">u</span><span style="color:#9ABDF5;">) </span><span style="color:#BB9AF7;">=&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#C0CAF5;">        update</span><span style="color:#89DDFF;"> =</span><span style="color:#C0CAF5;"> u</span></span>
<span class="line"><span style="color:#9ABDF5;">      })</span></span>
<span class="line"><span style="color:#C0CAF5;">      remult</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">subscribeAuth</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#7AA2F7;">        reportObserved</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> () </span><span style="color:#BB9AF7;">=&gt;</span><span style="color:#7AA2F7;"> s</span><span style="color:#9ABDF5;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#7AA2F7;">        reportChanged</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> () </span><span style="color:#BB9AF7;">=&gt;</span><span style="color:#7AA2F7;"> update</span><span style="color:#9ABDF5;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">      })</span></span>
<span class="line"><span style="color:#9ABDF5;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">    // Entities reactivity</span></span>
<span class="line"><span style="color:#9ABDF5;">    {</span></span>
<span class="line"><span style="color:#C0CAF5;">      Remult</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">entityRefInit</span><span style="color:#89DDFF;"> =</span><span style="color:#9ABDF5;"> (</span><span style="color:#E0AF68;">x</span><span style="color:#9ABDF5;">) </span><span style="color:#BB9AF7;">=&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">        let</span><span style="color:#7AA2F7;"> update</span><span style="color:#89DDFF;"> =</span><span style="color:#9ABDF5;"> () </span><span style="color:#BB9AF7;">=&gt;</span><span style="color:#9ABDF5;"> {}</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">        let</span><span style="color:#BB9AF7;"> s</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> createSubscriber</span><span style="color:#9ABDF5;">((</span><span style="color:#E0AF68;">u</span><span style="color:#9ABDF5;">) </span><span style="color:#BB9AF7;">=&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#C0CAF5;">          update</span><span style="color:#89DDFF;"> =</span><span style="color:#C0CAF5;"> u</span></span>
<span class="line"><span style="color:#9ABDF5;">        })</span></span>
<span class="line"><span style="color:#C0CAF5;">        x</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">subscribe</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#7AA2F7;">          reportObserved</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> () </span><span style="color:#BB9AF7;">=&gt;</span><span style="color:#7AA2F7;"> s</span><span style="color:#9ABDF5;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#7AA2F7;">          reportChanged</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> () </span><span style="color:#BB9AF7;">=&gt;</span><span style="color:#7AA2F7;"> update</span><span style="color:#9ABDF5;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">        })</span></span>
<span class="line"><span style="color:#9ABDF5;">      }</span></span>
<span class="line"><span style="color:#9ABDF5;">    }</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#7AA2F7;">  initRemultSvelteReactivity</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#BA3C97;">&lt;/</span><span style="color:#F7768E;">script</span><span style="color:#BA3C97;">&gt;</span></span></code></pre></div></div></div><p>Then you can use <code>$state</code>, <code>$derived</code> like any other places</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-yGMG9" id="tab-6AUbXFX" checked><label data-title="src/routes/+page.svelte" for="tab-6AUbXFX">src/routes/+page.svelte</label></div><div class="blocks"><div class="language-html active"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BA3C97;">&lt;</span><span style="color:#F7768E;">script</span><span style="color:#BB9AF7;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  // Prepare a new task</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">  let</span><span style="color:#BB9AF7;"> editingTask</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> $state</span><span style="color:#9ABDF5;">(</span><span style="color:#7AA2F7;">repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Task</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">create</span><span style="color:#9ABDF5;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  // Check if the form has empty fields</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">  let</span><span style="color:#BB9AF7;"> formHasEmpty</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> $derived</span><span style="color:#9ABDF5;">(</span><span style="color:#BB9AF7;">!</span><span style="color:#C0CAF5;">editingTask </span><span style="color:#BB9AF7;">||</span><span style="color:#C0CAF5;"> editingTask</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">title</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">length</span><span style="color:#BB9AF7;"> ===</span><span style="color:#FF9E64;"> 0</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  // Clone the task to edit</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">  const</span><span style="color:#7AA2F7;"> editTask</span><span style="color:#89DDFF;"> =</span><span style="color:#9D7CD8;font-style:italic;"> async</span><span style="color:#9ABDF5;"> (</span><span style="color:#E0AF68;">task</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> Task</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#C0CAF5;">    editingTask</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Task</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">getEntityRef</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">task</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">clone</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#BA3C97;">&lt;/</span><span style="color:#F7768E;">script</span><span style="color:#BA3C97;">&gt;</span></span></code></pre></div></div></div><h3 id="focus-on-auth-reactivity" tabindex="-1">Focus on auth reactivity <a class="header-anchor" href="#focus-on-auth-reactivity" aria-label="Permalink to &quot;Focus on auth reactivity&quot;">​</a></h3><p>Anywhere in your frontend code you can set <code>remult.user = xxx</code> and all remult auth reactivity will work (remult.user, remult.authenticated(), ...)</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#7AA2F7;"> logout</span><span style="color:#89DDFF;"> =</span><span style="color:#9D7CD8;font-style:italic;"> async</span><span style="color:#9ABDF5;"> ()</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#BB9AF7;">  try</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#C0CAF5;">    remult</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">user</span><span style="color:#89DDFF;"> =</span><span style="color:#BB9AF7;font-style:italic;"> await</span><span style="color:#C0CAF5;"> AuthController</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">signOut</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#9ABDF5;">  } </span><span style="color:#BB9AF7;">catch</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">error</span><span style="color:#9ABDF5;">) {</span></span>
<span class="line"><span style="color:#7AA2F7;">    alert</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">error</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">message</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div><p>If you want <code>remult.user</code> to be filled in SSR, here is the code:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group--bCr0" id="tab-0WRtgf3" checked><label data-title="src/routes/+layout.svelte" for="tab-0WRtgf3">src/routes/+layout.svelte</label><input type="radio" name="group--bCr0" id="tab-_4DGNG8"><label data-title="src/routes/+layout.server.ts" for="tab-_4DGNG8">src/routes/+layout.server.ts</label></div><div class="blocks"><div class="language-svelte active"><button title="Copy Code" class="copy"></button><span class="lang">svelte</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BA3C97;">&lt;</span><span style="color:#F7768E;">script</span><span style="color:#BB9AF7;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"><span style="color:#7DCFFF;">  import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">untrack</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">svelte</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">  import</span><span style="color:#BB9AF7;"> type</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">LayoutData</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">./$types</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BB9AF7;">  interface</span><span style="color:#C0CAF5;"> Props </span><span style="color:#9ABDF5;">{</span></span>
<span class="line"><span style="color:#73DACA;">    data</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> LayoutData</span></span>
<span class="line"><span style="color:#73DACA;">    children</span><span style="color:#89DDFF;">?:</span><span style="color:#89DDFF;"> import</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">svelte</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">)</span><span style="color:#C0CAF5;">.Snippet</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">  let</span><span style="color:#89DDFF;"> {</span><span style="color:#BB9AF7;"> data</span><span style="color:#89DDFF;">,</span><span style="color:#BB9AF7;"> children</span><span style="color:#89DDFF;"> }:</span><span style="color:#C0CAF5;"> Props </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> $</span><span style="color:#7AA2F7;">props</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  $</span><span style="color:#7AA2F7;">effect</span><span style="color:#9ABDF5;">(()</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">    // Trigger the effect only on data.user update</span></span>
<span class="line"><span style="color:#C0CAF5;">    data</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">user</span></span>
<span class="line"><span style="color:#7AA2F7;">    untrack</span><span style="color:#9ABDF5;">(() </span><span style="color:#BB9AF7;">=&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#C0CAF5;">      remult</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">user</span><span style="color:#89DDFF;"> =</span><span style="color:#C0CAF5;"> data</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">user</span></span>
<span class="line"><span style="color:#9ABDF5;">    })</span></span>
<span class="line"><span style="color:#9ABDF5;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  // initRemultSvelteReactivity stuff</span></span>
<span class="line"><span style="color:#BA3C97;">&lt;/</span><span style="color:#F7768E;">script</span><span style="color:#BA3C97;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ABDF5;">{</span><span style="color:#89DDFF;">@render</span><span style="color:#7AA2F7;"> children</span><span style="color:#89DDFF;">?.</span><span style="color:#9ABDF5;">()}</span></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">remult</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#BB9AF7;"> type</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">LayoutServerLoad</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">./$types</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#9D7CD8;font-style:italic;"> const</span><span style="color:#BB9AF7;"> load</span><span style="color:#89DDFF;"> =</span><span style="color:#9ABDF5;"> (</span><span style="color:#9D7CD8;font-style:italic;">async</span><span style="color:#9ABDF5;"> ()</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#BB9AF7;font-style:italic;">  return</span><span style="color:#9ABDF5;"> { </span><span style="color:#73DACA;">user</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> remult</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">user</span><span style="color:#9ABDF5;"> }</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span><span style="color:#BB9AF7;"> satisfies</span><span style="color:#C0CAF5;"> LayoutServerLoad</span></span></code></pre></div></div></div><p>And you can trigger this with :</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">invalidateAll</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">$app/navigation</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#7AA2F7;"> logout</span><span style="color:#89DDFF;"> =</span><span style="color:#9D7CD8;font-style:italic;"> async</span><span style="color:#9ABDF5;"> ()</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#BB9AF7;">  try</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#BB9AF7;font-style:italic;">    await</span><span style="color:#C0CAF5;"> AuthController</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">signOut</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#7AA2F7;">    invalidateAll</span><span style="color:#9ABDF5;">() </span><span style="color:#51597D;font-style:italic;">// [!code ++]</span><span style="color:#51597D;font-style:italic;"> // This will trigger the layout.server.ts load function</span></span>
<span class="line"><span style="color:#9ABDF5;">  } </span><span style="color:#BB9AF7;">catch</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">error</span><span style="color:#9ABDF5;">) {</span></span>
<span class="line"><span style="color:#7AA2F7;">    alert</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">error</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">message</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div>`,55)]))}const A=a(p,[["render",e]]);export{D as __pageData,A as default};
