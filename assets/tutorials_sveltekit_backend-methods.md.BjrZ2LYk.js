import{_ as s,c as a,o,a5 as e}from"./chunks/framework.C7bC4sbb.js";const m=JSON.parse('{"title":"Backend methods","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/sveltekit/backend-methods.md","filePath":"tutorials/sveltekit/backend-methods.md","lastUpdated":1731249948000}'),n={name:"tutorials/sveltekit/backend-methods.md"},l=e(`<h1 id="backend-methods" tabindex="-1">Backend methods <a class="header-anchor" href="#backend-methods" aria-label="Permalink to &quot;Backend methods&quot;">​</a></h1><p>When performing operations on multiple entity objects, performance considerations may necessitate running them on the server. <strong>With Remult, moving client-side logic to run on the server is a simple refactoring</strong>.</p><h2 id="set-all-tasks-as-un-complete" tabindex="-1">Set All Tasks as Un/complete <a class="header-anchor" href="#set-all-tasks-as-un-complete" aria-label="Permalink to &quot;Set All Tasks as Un/complete&quot;">​</a></h2><p>Let&#39;s add two buttons to the todo app: &quot;Set all as completed&quot; and &quot;Set all as uncompleted&quot;.</p><ol><li>Add a <code>setAllCompleted</code> async function to <code>+page.svelte</code> function component, which accepts a <code>completed</code> boolean argument and sets the value of the <code>completed</code> field of all the tasks accordingly.</li></ol><div class="vp-code-group"><div class="tabs"><input type="radio" name="group--EOoz" id="tab-3zCradE" checked><label for="tab-3zCradE">src/routes/+page.svelte</label></div><div class="blocks"><div class="language-svelte active"><button title="Copy Code" class="copy"></button><span class="lang">svelte</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> lang</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;ts&quot;</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#6A9955;">  // ...</span></span>
<span class="line"><span style="color:#569CD6;">	async</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> setAllCompleted</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">completed</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">		for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> task</span><span style="color:#569CD6;"> of</span><span style="color:#C586C0;"> await</span><span style="color:#DCDCAA;"> repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#C586C0;">			await</span><span style="color:#DCDCAA;"> repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">save</span><span style="color:#D4D4D4;">({ ...</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">completed</span><span style="color:#D4D4D4;"> });</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#6A9955;">  // ...</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></code></pre></div></div></div><p>The <code>for</code> loop iterates the array of <code>Task</code> objects returned from the backend, and saves each task back to the backend with a modified value in the <code>completed</code> field.</p><ol start="2"><li>Add the two buttons to the end of the <code>&lt;/main&gt;</code> section of the markup. Both of the buttons&#39; <code>on:click</code> events will call the <code>setAllCompleted</code> function with the appropriate value of the <code>completed</code> argument.</li></ol><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-csnYW" id="tab-H3XUHG7" checked><label for="tab-H3XUHG7">src/routes/+page.svelte</label></div><div class="blocks"><div class="language-svelte active"><button title="Copy Code" class="copy"></button><span class="lang">svelte</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">main</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#6A9955;">  &lt;!-- ... --&gt;</span></span>
<span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onclick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> setAllCompleted</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Mark All Completed</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onclick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> setAllCompleted</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Mark All Incomplete</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">main</span><span style="color:#808080;">&gt;</span></span></code></pre></div></div></div><p>Make sure the buttons are working as expected before moving on to the next step.</p><h2 id="refactor-from-front-end-to-back-end" tabindex="-1">Refactor from Front-end to Back-end <a class="header-anchor" href="#refactor-from-front-end-to-back-end" aria-label="Permalink to &quot;Refactor from Front-end to Back-end&quot;">​</a></h2><p>With the current state of the <code>setAllCompleted</code> function, each modified task being saved pushes a <code>PUT</code> request handled separately by the server. As the number of tasks in the todo list grows, this may become a performance issue. You can verify this on the Network tab of your browser&#39;s Developer Tools.</p><p>A simple way to prevent this is to expose an API endpoint for <code>setAllCompleted</code> requests, and run the same logic on the server instead of the client.</p><ol><li>Create a new <code>TasksController</code> class, in the <code>shared</code> folder, and refactor into a new, <code>static</code>, <code>setAllCompleted</code> method in the <code>TasksController</code> class, which will run on the server.</li></ol><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-R723S" id="tab-AqPingn" checked><label for="tab-AqPingn">src/shared/TasksController.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">BackendMethod</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;./Task&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> TasksController</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  @</span><span style="color:#DCDCAA;">BackendMethod</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">allowed:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line"><span style="color:#569CD6;">  static</span><span style="color:#569CD6;"> async</span><span style="color:#DCDCAA;"> setAllCompleted</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">completed</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> taskRepo</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> task</span><span style="color:#569CD6;"> of</span><span style="color:#C586C0;"> await</span><span style="color:#9CDCFE;"> taskRepo</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#C586C0;">      await</span><span style="color:#9CDCFE;"> taskRepo</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">update</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">completed</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div></div></div><p>The <code>@BackendMethod</code> decorator tells Remult to expose the method as an API endpoint (<code>/api/setAllCompleted</code>) and allow CRUD operations on this end-point (<code>{allowed: true}</code> - more details to follow).</p><p><strong>Unlike the front-end <code>Remult</code> object, the server implementation interacts directly with the database.</strong></p><ol start="2"><li>Register the new <code>TasksController</code> class by adding it to the <code>controllers</code> array of the <code>options</code> object passed to <code>remultSveltekit()</code>:</li></ol><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-A6BFT" id="tab-X35wJpG" checked><label for="tab-X35wJpG">src/server/api.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus has-diff vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">remultSveltekit</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult/remult-sveltekit&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;../shared/Task&#39;</span></span>
<span class="line diff add"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">TasksController</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;../shared/TasksController&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> api</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">remultSveltekit</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  admin:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">,</span></span>
<span class="line diff add"><span style="color:#9CDCFE;">  entities:</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">], </span></span>
<span class="line diff add"><span style="color:#9CDCFE;">  controllers:</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">TasksController</span><span style="color:#D4D4D4;">], </span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre></div></div></div><p>3.Replace the for iteration in the <code>setAllCompleted</code> function of with a call to the <code>setAllCompleted</code> method in the <code>TasksController</code>.</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-P75am" id="tab-JB6FZBS" checked><label for="tab-JB6FZBS">src/routes/+page.svelte</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus has-diff vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> setAllCompleted</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">completed</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line diff remove"><span style="color:#6A9955;">  // for (const task of await repo(Task).find()) {</span></span>
<span class="line diff remove"><span style="color:#6A9955;">  //   await repo(Task).save({ ...task, completed });</span></span>
<span class="line diff remove"><span style="color:#6A9955;">  // }</span></span>
<span class="line diff add"><span style="color:#C586C0;">  await</span><span style="color:#9CDCFE;"> TasksController</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setAllCompleted</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">completed</span><span style="color:#D4D4D4;">) </span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div></div></div><div class="warning custom-block"><p class="custom-block-title">Import TasksController</p><p>Remember to add an import of <code>TasksController</code> in <code>+page.svelte</code>.</p></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>With Remult backend methods, argument types are compile-time checked. 👍</p></div><p>After the browser is refreshed, the <em>&quot;Set all...&quot;</em> buttons function exactly the same but now makes only a single request to the back, and is faster.</p>`,24),t=[l];function p(c,r,d,D,i,y){return o(),a("div",null,t)}const h=s(n,[["render",p]]);export{m as __pageData,h as default};
