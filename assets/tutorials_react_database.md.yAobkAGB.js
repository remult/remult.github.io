import{_ as a,c as t,o as e,L as o}from"./chunks/framework.DdPzwmCl.js";const u=JSON.parse('{"title":"Database","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/react/database.md","filePath":"tutorials/react/database.md","lastUpdated":1746265022000}'),n={name:"tutorials/react/database.md"};function l(p,s,r,c,i,d){return e(),t("div",null,s[0]||(s[0]=[o(`<h1 id="database" tabindex="-1">Database <a class="header-anchor" href="#database" aria-label="Permalink to &quot;Database&quot;">â€‹</a></h1><p>Up until now the todo app has been using a plain JSON file to store the list of tasks. <strong>In production, we&#39;d like to use a <code>Postgres</code> database table instead.</strong></p><div class="tip custom-block"><p class="custom-block-title">Learn more</p><p>See the <a href="https://remult.dev/docs/quickstart.html#connecting-a-database" target="_blank" rel="noreferrer">Quickstart</a> article for the (long) list of relational and non-relational databases Remult supports.</p></div><div class="warning custom-block"><p class="custom-block-title">Don&#39;t have Postgres installed? Don&#39;t have to.</p><p>Don&#39;t worry if you don&#39;t have Postgres installed locally. In the next step of the tutorial, we&#39;ll configure the app to use Postgres in production, and keep using JSON files in our dev environment.</p><p><strong>Simply install <code>postgres-node</code> per step 1 below and move on to the <a href="./deployment">Deployment section of the tutorial</a>.</strong></p></div><ol><li><p>Install <code>postgres-node</code> (&quot;pg&quot;).</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#C0CAF5;">npm</span><span style="color:#9ECE6A;"> i</span><span style="color:#9ECE6A;"> pg</span></span></code></pre></div></li><li><p>Add the highlighted code to the <code>api</code> server module.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// src/server/api.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">//...</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">createPostgresDataProvider</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">remult/postgres</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#9D7CD8;font-style:italic;"> const</span><span style="color:#BB9AF7;"> api</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> remultApi</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  //...</span></span>
<span class="line highlighted"><span style="color:#73DACA;">  dataProvider</span><span style="color:#89DDFF;">:</span><span style="color:#7AA2F7;"> createPostgresDataProvider</span><span style="color:#9ABDF5;">({</span></span>
<span class="line highlighted"><span style="color:#73DACA;">    connectionString</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">your connection string</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line highlighted"><span style="color:#9ABDF5;">  })</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span></code></pre></div></li></ol>`,5)]))}const h=a(n,[["render",l]]);export{u as __pageData,h as default};
