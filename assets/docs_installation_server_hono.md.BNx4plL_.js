import{_ as a,c as o,o as n,L as e}from"./chunks/framework.DdPzwmCl.js";const d=JSON.parse('{"title":"Hono","description":"","frontmatter":{},"headers":[],"relativePath":"docs/installation/server/hono.md","filePath":"docs/installation/server/hono.md","lastUpdated":1746535795000}'),l={name:"docs/installation/server/hono.md"};function t(p,s,r,c,i,F){return n(),o("div",null,s[0]||(s[0]=[e(`<h1 id="hono" tabindex="-1">Hono <a class="header-anchor" href="#hono" aria-label="Permalink to &quot;Hono&quot;">​</a></h1><h3 id="install-required-packages" tabindex="-1">Install Required Packages <a class="header-anchor" href="#install-required-packages" aria-label="Permalink to &quot;Install Required Packages&quot;">​</a></h3><p>To set up your Hono server with Remult, install the necessary packages:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#C0CAF5;">npm</span><span style="color:#9ECE6A;"> install</span><span style="color:#9ECE6A;"> hono</span><span style="color:#9ECE6A;"> remult</span></span>
<span class="line"><span style="color:#C0CAF5;">npm</span><span style="color:#9ECE6A;"> install</span><span style="color:#E0AF68;"> --save-dev</span><span style="color:#9ECE6A;"> tsx</span></span></code></pre></div><h3 id="bootstrap-remult-in-the-backend" tabindex="-1">Bootstrap Remult in the Backend <a class="header-anchor" href="#bootstrap-remult-in-the-backend" aria-label="Permalink to &quot;Bootstrap Remult in the Backend&quot;">​</a></h3><p>Remult is integrated into your backend using the <code>remultApi</code> adapter for Hono.</p><ol><li><p><strong>Create the API File</strong></p><p>Create a new <code>api.ts</code> file in the <code>src/server/</code> folder with the following code to set up the Remult middleware for Hono:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// src/server/api.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">remultApi</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult/remult-hono</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#9D7CD8;font-style:italic;"> const</span><span style="color:#BB9AF7;"> api</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> remultApi</span><span style="color:#9ABDF5;">()</span></span></code></pre></div></li><li><p><strong>Register the Middleware</strong></p><p>Update the <code>index.ts</code> file in your <code>src/server/</code> folder to include the Remult middleware. Add the following code:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// src/server/index.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">Hono</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">hono</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">serve</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">@hono/node-server</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line highlighted"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">api</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">./api.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> app</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> Hono</span><span style="color:#9ABDF5;">()</span></span>
<span class="line highlighted"><wbr></span>
<span class="line"><span style="color:#C0CAF5;">app</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">route</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> api</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7AA2F7;">serve</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">app</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;">{</span><span style="color:#73DACA;"> port</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;">3002</span><span style="color:#9ABDF5;"> })</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">ESM Configuration</p><p>When using ECMAScript modules (<code>esm</code>) in Hono, ensure you include the <code>.js</code> suffix when importing files, as shown in the <code>import { api } from &#39;./api.js&#39;</code> statement.</p><p>Also, make sure that <code>&quot;type&quot;: &quot;module&quot;</code> is set in your <code>package.json</code>.</p></div></li></ol><h4 id="create-the-server-s-typescript-configuration" tabindex="-1">Create the Server&#39;s TypeScript Configuration <a class="header-anchor" href="#create-the-server-s-typescript-configuration" aria-label="Permalink to &quot;Create the Server&#39;s TypeScript Configuration&quot;">​</a></h4><p>In the root folder, create a TypeScript configuration file named <code>tsconfig.server.json</code> for the Hono server:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#9ABDF5;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#7AA2F7;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#0DB9D7;">experimentalDecorators</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#0DB9D7;">skipLibCheck</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#0DB9D7;">esModuleInterop</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#0DB9D7;">outDir</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">dist</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#0DB9D7;">rootDir</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">src</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#0DB9D7;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">nodenext</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#7AA2F7;">include</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">src/server/**/*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">src/shared/**/*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">]</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div><p>This configuration enables TypeScript decorators, ensures compatibility with ECMAScript modules, and specifies the file paths for the server and shared code.</p><h4 id="create-an-npm-script-to-start-the-api-server" tabindex="-1">Create an <code>npm</code> Script to Start the API Server <a class="header-anchor" href="#create-an-npm-script-to-start-the-api-server" aria-label="Permalink to &quot;Create an \`npm\` Script to Start the API Server&quot;">​</a></h4><p>Add a new script in your <code>package.json</code> to start the Hono server in development mode:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// package.json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">dev-node</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A9B1D6;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">tsx watch --env-file=.env --tsconfig tsconfig.server.json src/server</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><ul><li><code>tsx</code>: A TypeScript execution environment that watches for file changes and automatically restarts the server on each save.</li><li><code>--env-file=.env</code>: Ensures environment variables are loaded from the <code>.env</code> file.</li><li><code>--tsconfig tsconfig.server.json</code>: Specifies the TypeScript configuration file for the server.</li></ul><h4 id="start-the-hono-server" tabindex="-1">Start the Hono Server <a class="header-anchor" href="#start-the-hono-server" aria-label="Permalink to &quot;Start the Hono Server&quot;">​</a></h4><p>Open a new terminal and run the following command to start the development server:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#C0CAF5;">npm</span><span style="color:#9ECE6A;"> run</span><span style="color:#9ECE6A;"> dev-node</span></span></code></pre></div><p>The server will now run on port 3002. <code>tsx</code> will watch for file changes, automatically restarting the Hono server whenever updates are made.</p>`,19)]))}const D=a(l,[["render",t]]);export{d as __pageData,D as default};
