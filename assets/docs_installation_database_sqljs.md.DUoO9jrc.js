import{_ as s,c as a,o as n,a5 as l}from"./chunks/framework.ChN904aB.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/installation/database/sqljs.md","filePath":"docs/installation/database/sqljs.md","lastUpdated":1729890666000}'),e={name:"docs/installation/database/sqljs.md"},o=l(`<h3 id="sql-js" tabindex="-1">sql.js <a class="header-anchor" href="#sql-js" aria-label="Permalink to &quot;sql.js&quot;">​</a></h3><h3 id="step-1-install-sql-js" tabindex="-1">Step 1: Install sql.js <a class="header-anchor" href="#step-1-install-sql-js" aria-label="Permalink to &quot;Step 1: Install sql.js&quot;">​</a></h3><p>Run the following command to install the <code>sql.js</code> package:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npm</span><span style="color:#CE9178;"> i</span><span style="color:#CE9178;"> sql.js</span></span></code></pre></div><h3 id="step-2-configure-the-dataprovider" tabindex="-1">Step 2: Configure the <code>dataProvider</code> <a class="header-anchor" href="#step-2-configure-the-dataprovider" aria-label="Permalink to &quot;Step 2: Configure the \`dataProvider\`&quot;">​</a></h3><p>In your <code>api.ts</code> or server file, configure the <code>dataProvider</code> to use <code>sql.js</code>:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> express</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;express&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">remultExpress</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult/remult-express&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">SqlDatabase</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> initSqlJs</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;sql.js&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">SqlJsDataProvider</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult/remult-sql-js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> app</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">express</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">use</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#DCDCAA;">  remultExpress</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">    dataProvider:</span><span style="color:#569CD6;"> new</span><span style="color:#DCDCAA;"> SqlDatabase</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#569CD6;">      new</span><span style="color:#DCDCAA;"> SqlJsDataProvider</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">initSqlJs</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">SQL</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#569CD6;"> new</span><span style="color:#4FC1FF;"> SQL</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Database</span><span style="color:#D4D4D4;">())),</span></span>
<span class="line"><span style="color:#D4D4D4;">    ),</span></span>
<span class="line"><span style="color:#D4D4D4;">  }),</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span></code></pre></div><h3 id="explanation" tabindex="-1">Explanation: <a class="header-anchor" href="#explanation" aria-label="Permalink to &quot;Explanation:&quot;">​</a></h3><ul><li><strong>sql.js</strong>: This setup initializes an in-memory SQLite database using <code>sql.js</code>, a library that runs SQLite in the browser or in Node.js.</li><li><strong>SqlJsDataProvider</strong>: The <code>SqlJsDataProvider</code> is used to integrate the <code>sql.js</code> database as a Remult data provider.</li><li><strong>Async Initialization</strong>: The <code>initSqlJs()</code> function initializes the SQL.js engine and sets up the database instance.</li></ul><p>This configuration allows you to use an in-memory SQLite database in your Remult application, powered by <code>sql.js</code>.</p>`,10),t=[o];function p(r,c,i,D,d,C){return n(),a("div",null,t)}const h=s(e,[["render",p]]);export{u as __pageData,h as default};
