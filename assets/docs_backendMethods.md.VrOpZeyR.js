import{_ as a,c as n,o,L as e}from"./chunks/framework.DdPzwmCl.js";const F=JSON.parse('{"title":"Backend Methods","description":"","frontmatter":{},"headers":[],"relativePath":"docs/backendMethods.md","filePath":"docs/backendMethods.md","lastUpdated":1746535795000}'),t={name:"docs/backendMethods.md"};function l(p,s,c,r,i,d){return o(),n("div",null,s[0]||(s[0]=[e(`<h1 id="backend-methods" tabindex="-1">Backend Methods <a class="header-anchor" href="#backend-methods" aria-label="Permalink to &quot;Backend Methods&quot;">​</a></h1><p>Backend methods run on the backend and are used to improve performance, execute server-only code (e.g., sending emails), or perform operations not accessible through the API.</p><h2 id="static-backend-methods" tabindex="-1">Static Backend Methods <a class="header-anchor" href="#static-backend-methods" aria-label="Permalink to &quot;Static Backend Methods&quot;">​</a></h2><p>Static backend methods represent the most straightforward type, transmitting their parameters to the backend and delivering their outcome to the frontend.</p><ol><li><strong>Define the Backend Method:</strong></li></ol><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">BackendMethod</span><span style="color:#89DDFF;">,</span><span style="color:#0DB9D7;"> repo</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">Task</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">./Task</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#BB9AF7;"> class</span><span style="color:#C0CAF5;"> TasksController</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  /**</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">   * Sets the completion status of all tasks.</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">   * </span><span style="color:#646E9C;font-style:italic;">@param</span><span style="color:#51597D;font-style:italic;"> {</span><span style="color:#646E9C;font-style:italic;">boolean</span><span style="color:#51597D;font-style:italic;">} </span><span style="color:#5A638C;font-style:italic;">completed</span><span style="color:#51597D;font-style:italic;"> - The completion status to set for all tasks.</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#7AA2F7;">BackendMethod</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;"> allowed</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> true</span><span style="color:#9ABDF5;"> })</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">  static</span><span style="color:#9D7CD8;font-style:italic;"> async</span><span style="color:#7AA2F7;"> setAll</span><span style="color:#9ABDF5;">(</span><span style="color:#E0AF68;">completed</span><span style="color:#89DDFF;">:</span><span style="color:#0DB9D7;"> boolean</span><span style="color:#9ABDF5;">)</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">    const</span><span style="color:#BB9AF7;"> taskRepo</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Task</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BB9AF7;">    for</span><span style="color:#9ABDF5;"> (</span><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> task</span><span style="color:#89DDFF;"> of</span><span style="color:#BB9AF7;font-style:italic;"> await</span><span style="color:#C0CAF5;"> taskRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">find</span><span style="color:#9ABDF5;">()) {</span></span>
<span class="line"><span style="color:#BB9AF7;font-style:italic;">      await</span><span style="color:#C0CAF5;"> taskRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">save</span><span style="color:#9ABDF5;">({ </span><span style="color:#F7768E;font-weight:bold;">...</span><span style="color:#C0CAF5;">task</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> completed</span><span style="color:#9ABDF5;"> })</span></span>
<span class="line"><span style="color:#9ABDF5;">    }</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div><p>Each controller can house one or more backend methods, each serving distinct purposes tailored to your application&#39;s needs. In the provided example, the <code>TasksController</code> class contains a single backend method named <code>setAll</code>, responsible for setting the completion status of all tasks.</p><p>The method name, such as <code>setAll</code>, serves as the URL for the corresponding REST endpoint on the backend server. It&#39;s worth noting that you can configure a prefix for these endpoints using the <code>apiPrefix</code> option, providing flexibility in structuring your backend API routes.</p><p>The allowed: true parameter signifies that the backend method can be invoked by anyone. Alternatively, you can customize the authorization settings for finer control over who can access the method.</p><p>For instance, setting allow: Allow.authenticated restricts access to authenticated users only, ensuring that only logged-in users can utilize the method.</p><p>Similarly, specifying allow: &#39;admin&#39; limits access to users with administrative privileges, granting access exclusively to administrators.</p><p>These options offer granular control over authorization, allowing you to tailor access permissions based on your application&#39;s specific requirements and security considerations.</p><ol start="2"><li><strong>Register the Controller:</strong></li></ol><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// Register TasksController in the controllers array of the remultApi options</span></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#9D7CD8;font-style:italic;"> const</span><span style="color:#BB9AF7;"> api</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> remultApi</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#73DACA;">  entities</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> [</span><span style="color:#7DCFFF;">Task</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">  controllers</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> [</span><span style="color:#7DCFFF;">TasksController</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span></code></pre></div><ol start="3"><li><strong>Call from the Frontend:</strong></li></ol><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#C0CAF5;"> TasksController</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">setAll</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">true</span><span style="color:#9ABDF5;">)</span></span></code></pre></div><p>This example demonstrates how to define and use a static backend method, <code>setAll</code>, within the <code>TasksController</code> class. When called from the frontend, this method sets the completion status of all tasks to the specified value (<code>true</code> in this case). The method leverages Remult&#39;s <code>BackendMethod</code> decorator to handle the communication between the frontend and backend seamlessly.</p>`,17)]))}const h=a(t,[["render",l]]);export{F as __pageData,h as default};
