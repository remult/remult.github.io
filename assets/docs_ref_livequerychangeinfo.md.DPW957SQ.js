import{_ as e,c as s,o as n,L as o}from"./chunks/framework.DxxKE4lP.js";const u=JSON.parse('{"title":"LiveQueryChangeInfo","description":"","frontmatter":{},"headers":[],"relativePath":"docs/ref_livequerychangeinfo.md","filePath":"docs/ref_livequerychangeinfo.md","lastUpdated":1724738315000}'),l={name:"docs/ref_livequerychangeinfo.md"};function t(p,a,r,c,i,h){return n(),s("div",null,a[0]||(a[0]=[o(`<h1 id="livequerychangeinfo" tabindex="-1">LiveQueryChangeInfo <a class="header-anchor" href="#livequerychangeinfo" aria-label="Permalink to &quot;LiveQueryChangeInfo&quot;">​</a></h1><p>The <code>LiveQueryChangeInfo</code> interface represents information about changes in the results of a live query.</p><h2 id="items" tabindex="-1">items <a class="header-anchor" href="#items" aria-label="Permalink to &quot;items&quot;">​</a></h2><p>The updated array of result items.</p><h2 id="changes" tabindex="-1">changes <a class="header-anchor" href="#changes" aria-label="Permalink to &quot;changes&quot;">​</a></h2><p>The changes received in the specific message. The change types can be &quot;all&quot; (replace all), &quot;add&quot;, &quot;replace&quot;, or &quot;remove&quot;.</p><h2 id="applychanges" tabindex="-1">applyChanges <a class="header-anchor" href="#applychanges" aria-label="Permalink to &quot;applyChanges&quot;">​</a></h2><p>Applies the changes received in the message to an existing array. This method is particularly useful with React to update the component&#39;s state based on the live query changes.</p><h4 id="returns" tabindex="-1">returns: <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;returns:&quot;">​</a></h4><p>The updated array of result items after applying the changes.</p><h4 id="example" tabindex="-1">example: <a class="header-anchor" href="#example" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// Using applyChanges in a React component with useEffect hook</span></span>
<span class="line"><span style="color:#7AA2F7;">useEffect</span><span style="color:#9ABDF5;">(()</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#BB9AF7;font-style:italic;">  return</span><span style="color:#C0CAF5;"> taskRepo</span></span>
<span class="line"><span style="color:#89DDFF;">    .</span><span style="color:#7AA2F7;">liveQuery</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#73DACA;">      limit</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> 20</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">      orderBy</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> { </span><span style="color:#73DACA;">createdAt</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">asc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;"> }</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">      //where: { completed: true },</span></span>
<span class="line"><span style="color:#9ABDF5;">    })</span></span>
<span class="line"><span style="color:#89DDFF;">    .</span><span style="color:#7AA2F7;">subscribe</span><span style="color:#9ABDF5;">(</span><span style="color:#E0AF68;">info</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#7AA2F7;"> setTasks</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">info</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">applyChanges</span><span style="color:#9ABDF5;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;"> [])</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>Arguments:</p><ul><li><strong>prevState</strong> - The previous state of the array of result items.</li></ul>`,14)]))}const d=e(l,[["render",t]]);export{u as __pageData,d as default};
