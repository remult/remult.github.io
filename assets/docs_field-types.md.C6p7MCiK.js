import{_ as a,c as n,o,L as l}from"./chunks/framework.BLY-PH98.js";const d=JSON.parse('{"title":"Field Types","description":"","frontmatter":{},"headers":[],"relativePath":"docs/field-types.md","filePath":"docs/field-types.md","lastUpdated":1753700867000}'),e={name:"docs/field-types.md"};function p(t,s,c,r,i,F){return o(),n("div",null,s[0]||(s[0]=[l(`<h1 id="field-types" tabindex="-1">Field Types <a class="header-anchor" href="#field-types" aria-label="Permalink to &quot;Field Types&quot;">​</a></h1><h2 id="common-field-types" tabindex="-1">Common field types <a class="header-anchor" href="#common-field-types" aria-label="Permalink to &quot;Common field types&quot;">​</a></h2><p>There are also several built in Field decorators for common use case:</p><h3 id="fields-string" tabindex="-1">@Fields.string <a class="header-anchor" href="#fields-string" aria-label="Permalink to &quot;@Fields.string&quot;">​</a></h3><p>A field of type string</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">string</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#C0CAF5;">title</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="fields-number" tabindex="-1">@Fields.number <a class="header-anchor" href="#fields-number" aria-label="Permalink to &quot;@Fields.number&quot;">​</a></h3><p>Just like TypeScript, by default any number is a decimal (or float).</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">number</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#C0CAF5;">price</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9E64;"> 1.5</span></span></code></pre></div><h3 id="fields-integer" tabindex="-1">@Fields.integer <a class="header-anchor" href="#fields-integer" aria-label="Permalink to &quot;@Fields.integer&quot;">​</a></h3><p>For cases where you don&#39;t want to have decimal values, you can use the <code>@Fields.integer</code> decorator</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">integer</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#C0CAF5;">quantity</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9E64;"> 0</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="fields-boolean" tabindex="-1">@Fields.boolean <a class="header-anchor" href="#fields-boolean" aria-label="Permalink to &quot;@Fields.boolean&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">boolean</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#C0CAF5;">completed</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9E64;"> false</span></span></code></pre></div><h3 id="fields-date" tabindex="-1">@Fields.date <a class="header-anchor" href="#fields-date" aria-label="Permalink to &quot;@Fields.date&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">date</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#C0CAF5;">statusDate</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> Date</span><span style="color:#9ABDF5;">()</span></span></code></pre></div><h3 id="fields-dateonly" tabindex="-1">@Fields.dateOnly <a class="header-anchor" href="#fields-dateonly" aria-label="Permalink to &quot;@Fields.dateOnly&quot;">​</a></h3><p>Just like TypeScript, by default any <code>Date</code> field includes the time as well. For cases where you only want a date, and don&#39;t want to meddle with time and time zone issues, use the <code>@Fields.dateOnly</code></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">dateOnly</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#C0CAF5;">birthDate</span><span style="color:#BB9AF7;">?:</span><span style="color:#C0CAF5;">Date</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="fields-createdat" tabindex="-1">@Fields.createdAt <a class="header-anchor" href="#fields-createdat" aria-label="Permalink to &quot;@Fields.createdAt&quot;">​</a></h3><p>Automatically set on the backend on insert, and can&#39;t be set through the API</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">createdAt</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#C0CAF5;">createdAt</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> Date</span><span style="color:#9ABDF5;">()</span></span></code></pre></div><h3 id="fields-updatedat" tabindex="-1">@Fields.updatedAt <a class="header-anchor" href="#fields-updatedat" aria-label="Permalink to &quot;@Fields.updatedAt&quot;">​</a></h3><p>Automatically set on the backend on update, and can&#39;t be set through the API</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">updatedAt</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#C0CAF5;">updatedAt</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> Date</span><span style="color:#9ABDF5;">()</span></span></code></pre></div><h2 id="json-field" tabindex="-1">JSON Field <a class="header-anchor" href="#json-field" aria-label="Permalink to &quot;JSON Field&quot;">​</a></h2><p>You can store JSON data and arrays in fields.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">json</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#C0CAF5;">tags</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> string</span><span style="color:#9ABDF5;">[]</span><span style="color:#89DDFF;"> =</span><span style="color:#9ABDF5;"> []</span></span></code></pre></div><h2 id="auto-generated-id-field-types" tabindex="-1">Auto Generated Id Field Types <a class="header-anchor" href="#auto-generated-id-field-types" aria-label="Permalink to &quot;Auto Generated Id Field Types&quot;">​</a></h2><h3 id="fields-id" tabindex="-1">@Fields.id <a class="header-anchor" href="#fields-id" aria-label="Permalink to &quot;@Fields.id&quot;">​</a></h3><p>This id value is determined on the backend on insert, and can&#39;t be updated through the API.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">id</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#C0CAF5;">id</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;">string</span></span></code></pre></div><p>By default it uses <code>crypto.randomUUID</code> to generate the id.</p><p>You can change the algorithm used to generate the id by setting the <code>Fields.defaultIdFactory</code> to a different function like:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">createId</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">@paralleldrive/cuid2</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">defaultIdOptions</span><span style="color:#89DDFF;"> =</span><span style="color:#9ABDF5;"> {</span><span style="color:#7AA2F7;"> idFactory</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> ()</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#7AA2F7;"> createId</span><span style="color:#9ABDF5;">()</span><span style="color:#9ABDF5;"> }</span></span></code></pre></div><p>You can also pass an id factory as an option to the <code>@Fields.id</code> to have a different value locally.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">createId</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">@paralleldrive/cuid2</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// import { v4 as uuid } from &#39;uuid&#39;</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// import { nanoid } from &#39;nanoid&#39;</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// import { ulid } from &#39;ulid&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BB9AF7;">class</span><span style="color:#C0CAF5;"> MyEntity</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">id</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#7AA2F7;">    idFactory</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> ()</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#7AA2F7;"> createId</span><span style="color:#9ABDF5;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">    // idFactory: () =&gt; uuid()</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">    // idFactory: () =&gt; nanoid()</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">    // idFactory: () =&gt; ulid()</span></span>
<span class="line"><span style="color:#9ABDF5;">  })</span></span>
<span class="line"><span style="color:#73DACA;">  id</span><span style="color:#89DDFF;">:</span><span style="color:#0DB9D7;"> string</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div><p>So, you can select the algorithm you prefer:</p><ul><li><code>cuid</code>: <code>import { createId } from &#39;@paralleldrive/cuid2&#39;</code></li><li><code>uuid</code>: <code>import { v4 as uuid } from &#39;uuid&#39;</code></li><li><code>nanoid</code>: <code>import { nanoid } from &#39;nanoid&#39;</code></li><li><code>ulid</code>: <code>import { ulid } from &#39;ulid&#39;</code></li><li>and any other function that returns a string! Let us know what&#39;s your favorite!</li></ul><h3 id="fields-autoincrement" tabindex="-1">@Fields.autoIncrement <a class="header-anchor" href="#fields-autoincrement" aria-label="Permalink to &quot;@Fields.autoIncrement&quot;">​</a></h3><p>This id value is determined by the underlying database on insert, and can&#39;t be updated through the API.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">autoIncrement</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#C0CAF5;">id</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;">number</span></span></code></pre></div><h3 id="mongodb-objectid-field" tabindex="-1">MongoDB ObjectId Field <a class="header-anchor" href="#mongodb-objectid-field" aria-label="Permalink to &quot;MongoDB ObjectId Field&quot;">​</a></h3><p>To indicate that a field is of type object id, change it&#39;s <code>fieldTypeInDb</code> to <code>dbid</code>.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">string</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#73DACA;">  dbName</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">_id</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">  valueConverter</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#73DACA;">    fieldTypeInDb</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">dbid</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span>
<span class="line"><span style="color:#C0CAF5;">id</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> string</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;&#39;</span></span></code></pre></div><h2 id="enum-field" tabindex="-1">Enum Field <a class="header-anchor" href="#enum-field" aria-label="Permalink to &quot;Enum Field&quot;">​</a></h2><p>Enum fields allow you to define a field that can only hold values from a specific enumeration. The <code>@Fields.enum</code> decorator is used to specify that a field is an enum type. When using the <code>@Fields.enum</code> decorator, an automatic validation is added that checks if the value is valid in the specified enum.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">enum</span><span style="color:#9ABDF5;">(()</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#C0CAF5;"> Priority</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#C0CAF5;">priority</span><span style="color:#89DDFF;"> =</span><span style="color:#C0CAF5;"> Priority</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">Low</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>In this example, the <code>priority</code> field is defined as an enum type using the <code>@Fields.enum</code> decorator. The <code>Priority</code> enum is passed as an argument to the decorator, ensuring that only valid <code>Priority</code> enum values can be assigned to the <code>priority</code> field. The <code>Validators.enum</code> validation is used and ensures that any value assigned to this field must be a member of the <code>Priority</code> enum, providing type safety and preventing invalid values.</p><h2 id="literal-fields-union-of-string-values" tabindex="-1">Literal Fields (Union of string values) <a class="header-anchor" href="#literal-fields-union-of-string-values" aria-label="Permalink to &quot;Literal Fields (Union of string values)&quot;">​</a></h2><p>Literal fields let you restrict a field to a specific set of string values using the <code>@Fields.literal</code> decorator. This is useful for fields with a finite set of possible values.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">literal</span><span style="color:#9ABDF5;">(()</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">open</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">closed</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">frozen</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">in progress</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;"> as</span><span style="color:#9D7CD8;font-style:italic;"> const</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#C0CAF5;">status</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">open</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BB9AF7;"> |</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">closed</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BB9AF7;"> |</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">frozen</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BB9AF7;"> |</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">in progress</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">open</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>In this example, we use the <code>as const</code> assertion to ensure that the array <code>[&#39;open&#39;, &#39;closed&#39;, &#39;frozen&#39;, &#39;in progress&#39;]</code> is treated as a readonly array, which allows TypeScript to infer the literal types &#39;open&#39;, &#39;closed&#39;, &#39;frozen&#39;, and &#39;in progress&#39; for the elements of the array. This is important for the type safety of the <code>status</code> field.</p><p>The <code>status</code> field is typed as <code>&#39;open&#39; | &#39;closed&#39; | &#39;frozen&#39; | &#39;in progress&#39;</code>, which means it can only hold one of these string literals. The <code>@Fields.literal</code> decorator is used to specify that the <code>status</code> field can hold values from this set of strings, and it uses the <code>Validators.in</code> validator to ensure that the value of <code>status</code> matches one of the allowed values.</p><p>For better reusability and maintainability, and to follow the DRY (Don&#39;t Repeat Yourself) principle, it is recommended to refactor the literal type and the array of allowed values into separate declarations:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> statuses</span><span style="color:#89DDFF;"> =</span><span style="color:#9ABDF5;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">open</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">closed</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">frozen</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">in progress</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;"> as</span><span style="color:#9D7CD8;font-style:italic;"> const</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BB9AF7;">type</span><span style="color:#C0CAF5;"> StatusType</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> typeof</span><span style="color:#C0CAF5;"> statuses</span><span style="color:#9ABDF5;">[</span><span style="color:#7DCFFF;">number</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">literal</span><span style="color:#9ABDF5;">(()</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#C0CAF5;"> statuses</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#C0CAF5;">status</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> StatusType</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">open</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>In this refactored example, <code>statuses</code> is a readonly array of the allowed values, and <code>StatusType</code> is a type derived from the elements of <code>statuses</code>. The <code>@Fields.literal</code> decorator is then used with the <code>statuses</code> array, and the <code>status</code> field is typed as <code>StatusType</code>. This approach makes it easier to manage and update the allowed values for the <code>status</code> field, reducing duplication and making the code more robust and easier to maintain.</p><h2 id="valuelistfieldtype" tabindex="-1">ValueListFieldType <a class="header-anchor" href="#valuelistfieldtype" aria-label="Permalink to &quot;ValueListFieldType&quot;">​</a></h2><h3 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h3><p>The <code>ValueListFieldType</code> is useful in cases where simple enums and unions are not enough, such as when you want to have more properties for each value. For example, consider representing countries where you want to have a country code, description, currency, and international phone prefix.</p><h3 id="defining-a-valuelistfieldtype" tabindex="-1">Defining a ValueListFieldType <a class="header-anchor" href="#defining-a-valuelistfieldtype" aria-label="Permalink to &quot;Defining a ValueListFieldType&quot;">​</a></h3><p>Using enums or union types for this purpose can be challenging. Instead, you can use the <code>ValueListFieldType</code>:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">ValueListFieldType</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#BB9AF7;"> class</span><span style="color:#C0CAF5;"> Country</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">  static</span><span style="color:#73DACA;"> us</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> Country</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">us</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">United States</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">USD</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">  static</span><span style="color:#73DACA;"> canada</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> Country</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">ca</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">Canada</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">CAD</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">  static</span><span style="color:#73DACA;"> france</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> Country</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">fr</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">France</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">EUR</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">33</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BB9AF7;">  constructor</span><span style="color:#9ABDF5;">(</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">    public</span><span style="color:#E0AF68;"> id</span><span style="color:#89DDFF;">:</span><span style="color:#0DB9D7;"> string</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">    public</span><span style="color:#E0AF68;"> label</span><span style="color:#89DDFF;">:</span><span style="color:#0DB9D7;"> string</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">    public</span><span style="color:#E0AF68;"> currency</span><span style="color:#89DDFF;">:</span><span style="color:#0DB9D7;"> string</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">    public</span><span style="color:#E0AF68;"> phonePrefix</span><span style="color:#89DDFF;">:</span><span style="color:#0DB9D7;"> string</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">  )</span><span style="color:#9ABDF5;"> {}</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div><h3 id="using-in-an-entity" tabindex="-1">Using in an Entity <a class="header-anchor" href="#using-in-an-entity" aria-label="Permalink to &quot;Using in an Entity&quot;">​</a></h3><p>In your entity, you can define the field as follows:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">Field</span><span style="color:#9ABDF5;">(()</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#C0CAF5;"> Country</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#C0CAF5;">country</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> Country</span><span style="color:#89DDFF;"> =</span><span style="color:#C0CAF5;"> Country</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">us</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="accessing-properties" tabindex="-1">Accessing Properties <a class="header-anchor" href="#accessing-properties" aria-label="Permalink to &quot;Accessing Properties&quot;">​</a></h3><p>The property called <code>id</code> will be stored in the database and used through the API, while in the code itself, you can use each property:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7AA2F7;">call</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">+</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> +</span><span style="color:#C0CAF5;"> person</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">country</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">phonePrefix</span><span style="color:#89DDFF;"> +</span><span style="color:#C0CAF5;"> person</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">phone</span><span style="color:#9ABDF5;">)</span></span></code></pre></div><p>Note: Only the <code>id</code> property is saved in the database and used in the API. Other properties, such as <code>label</code>, <code>currency</code>, and <code>phonePrefix</code>, are only accessible in the code and are not persisted in the database.</p><h3 id="getting-optional-values" tabindex="-1">Getting Optional Values <a class="header-anchor" href="#getting-optional-values" aria-label="Permalink to &quot;Getting Optional Values&quot;">​</a></h3><p>To get the optional values for <code>Country</code>, you can use the <code>getValueList</code> function, which is useful for populating combo boxes:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#C0CAF5;">console</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">table</span><span style="color:#9ABDF5;">(</span><span style="color:#7AA2F7;">getValueList</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Country</span><span style="color:#9ABDF5;">))</span></span></code></pre></div><h3 id="special-properties-id-and-label" tabindex="-1">Special Properties: id and label <a class="header-anchor" href="#special-properties-id-and-label" aria-label="Permalink to &quot;Special Properties: id and label&quot;">​</a></h3><p>The <code>id</code> and <code>label</code> properties are special in that the <code>id</code> will be used to save and load from the database, and the <code>label</code> will be used as the display value.</p><h3 id="automatic-generation-of-id-caption-and-label" tabindex="-1">Automatic Generation of id, caption and label <a class="header-anchor" href="#automatic-generation-of-id-caption-and-label" aria-label="Permalink to &quot;Automatic Generation of id, caption and label&quot;">​</a></h3><p>If <code>id</code> and/or <code>caption</code> &amp; <code>label</code> are not provided, they are automatically generated based on the static member name. For example:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">ValueListFieldType</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#BB9AF7;"> class</span><span style="color:#C0CAF5;"> TaskStatus</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">  static</span><span style="color:#73DACA;"> open</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> TaskStatus</span><span style="color:#9ABDF5;">()</span><span style="color:#51597D;font-style:italic;"> // { id: &#39;open&#39;, label: &#39;Open&#39; }</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">  static</span><span style="color:#73DACA;"> closed</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> TaskStatus</span><span style="color:#9ABDF5;">()</span><span style="color:#51597D;font-style:italic;"> // { id: &#39;closed&#39;, label: &#39;Closed&#39; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#73DACA;">  id</span><span style="color:#89DDFF;">!:</span><span style="color:#0DB9D7;"> string</span></span>
<span class="line"><span style="color:#73DACA;">  label</span><span style="color:#89DDFF;">!:</span><span style="color:#0DB9D7;"> string</span></span>
<span class="line"><span style="color:#BB9AF7;">  constructor</span><span style="color:#9ABDF5;">()</span><span style="color:#9ABDF5;"> {}</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div><p>In this case, the <code>open</code> member will have an <code>id</code> of <code>&#39;open&#39;</code> and a <code>label</code> of <code>&#39;Open&#39;</code>, and similarly for the <code>closed</code> member.</p><h3 id="handling-partial-lists-of-values" tabindex="-1">Handling Partial Lists of Values <a class="header-anchor" href="#handling-partial-lists-of-values" aria-label="Permalink to &quot;Handling Partial Lists of Values&quot;">​</a></h3><p>In cases where you only want to generate members for a subset of values, you can use the <code>getValues</code> option of <code>@ValueListFieldType</code> to specify which values should be included:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">ValueListFieldType</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#7AA2F7;">  getValues</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> ()</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> [</span></span>
<span class="line"><span style="color:#C0CAF5;">    Country</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">us</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#C0CAF5;">    Country</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">canada</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#C0CAF5;">    Country</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">france</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">    {</span><span style="color:#73DACA;"> id</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">uk</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#73DACA;"> label</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">United Kingdom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#73DACA;"> currency</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">GBP</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#73DACA;"> phonePrefix</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">44</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;"> }</span></span>
<span class="line"><span style="color:#9ABDF5;">  ]</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span></code></pre></div><p>This approach is useful when you want to limit the options available for a field to a specific subset of values, without needing to define all possible values as static members.</p><div class="warning custom-block"><p class="custom-block-title">Warning: TypeScript may throw an error similar to <code>Uncaught TypeError: Currency_1 is not a constructor</code>.</p><p>This happens in TypeScript versions &lt;5.1.6 and target es2022. It&#39;s a TypeScript bug. To fix it, upgrade to version &gt;=5.1.6 or change the target from es2022. Alternatively, you can call the <code>ValueListFieldType</code> decorator as a function after the type:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#BB9AF7;"> class</span><span style="color:#C0CAF5;"> TaskStatus</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">  static</span><span style="color:#73DACA;"> open</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> TaskStatus</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">  static</span><span style="color:#73DACA;"> closed</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> TaskStatus</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#73DACA;">  id</span><span style="color:#89DDFF;">!:</span><span style="color:#0DB9D7;"> string</span></span>
<span class="line"><span style="color:#73DACA;">  label</span><span style="color:#89DDFF;">!:</span><span style="color:#0DB9D7;"> string</span></span>
<span class="line"><span style="color:#BB9AF7;">  constructor</span><span style="color:#9ABDF5;">()</span><span style="color:#9ABDF5;"> {}</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span>
<span class="line"><span style="color:#7AA2F7;">ValueListFieldType</span><span style="color:#9ABDF5;">()(</span><span style="color:#C0CAF5;">TaskStatus</span><span style="color:#9ABDF5;">)</span></span></code></pre></div></div><h3 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h3><p>The <code>ValueListFieldType</code> enables the creation of more complex value lists that provide greater flexibility and functionality for your application&#39;s needs beyond what enums and unions can offer. By allowing for additional properties and partial lists of values, it offers a versatile solution for representing and managing data with multiple attributes.</p><h2 id="control-field-type-in-database" tabindex="-1">Control Field Type in Database <a class="header-anchor" href="#control-field-type-in-database" aria-label="Permalink to &quot;Control Field Type in Database&quot;">​</a></h2><p>In some cases, you may want to explicitly specify the type of a field in the database. This can be useful when you need to ensure a specific data type or precision for your field. To control the field type in the database, you can use the <code>fieldTypeInDb</code> option within the <code>valueConverter</code> property of a field decorator.</p><p>For example, if you want to ensure that a numeric field is stored as a decimal with specific precision in the database, you can specify the <code>fieldTypeInDb</code> as follows:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">number</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#73DACA;">  valueConverter</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#73DACA;">    fieldTypeInDb</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">decimal(16,8)</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span>
<span class="line"><span style="color:#C0CAF5;">price</span><span style="color:#89DDFF;">=</span><span style="color:#FF9E64;">0</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>In this example, the <code>price</code> field will be stored as a <code>decimal</code> with 16 digits in total and 8 digits after the decimal point in the database. This allows you to control the storage format and precision of numeric fields in your database schema.</p><h2 id="creating-custom-field-types" tabindex="-1">Creating Custom Field Types <a class="header-anchor" href="#creating-custom-field-types" aria-label="Permalink to &quot;Creating Custom Field Types&quot;">​</a></h2><p>Sometimes, you may need to create custom field types to handle specific requirements or use cases in your application. By creating custom field types, you can encapsulate the logic for generating, validating, and converting field values.</p><h3 id="example-creating-a-custom-id-field-type-with-nanoid" tabindex="-1">Example: Creating a Custom ID Field Type with NanoID <a class="header-anchor" href="#example-creating-a-custom-id-field-type-with-nanoid" aria-label="Permalink to &quot;Example: Creating a Custom ID Field Type with NanoID&quot;">​</a></h3><p>NanoID is a tiny, secure, URL-friendly, unique string ID generator. You can create a custom field type using NanoID to generate unique IDs for your entities. Here&#39;s an example of how to create a custom NanoID field type:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">nanoid</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">nanoid</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">Fields</span><span style="color:#89DDFF;">,</span><span style="color:#BB9AF7;"> type</span><span style="color:#0DB9D7;"> FieldOptions</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#BB9AF7;"> function</span><span style="color:#7AA2F7;"> NanoIdField</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C0CAF5;">entityType</span><span style="color:#89DDFF;"> =</span><span style="color:#0DB9D7;"> any</span><span style="color:#89DDFF;">&gt;</span><span style="color:#9ABDF5;">(</span></span>
<span class="line"><span style="color:#F7768E;font-weight:bold;">  ...</span><span style="color:#E0AF68;">options</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> FieldOptions</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C0CAF5;">entityType</span><span style="color:#89DDFF;">,</span><span style="color:#0DB9D7;"> string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#9ABDF5;">[]</span></span>
<span class="line"><span style="color:#9ABDF5;">)</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#BB9AF7;font-style:italic;">  return</span><span style="color:#C0CAF5;"> Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">string</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C0CAF5;">entityType</span><span style="color:#89DDFF;">&gt;</span><span style="color:#9ABDF5;">(</span></span>
<span class="line"><span style="color:#9ABDF5;">    {</span></span>
<span class="line"><span style="color:#73DACA;">      allowApiUpdate</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> false</span><span style="color:#89DDFF;">,</span><span style="color:#51597D;font-style:italic;"> // Disallow updating the ID through the API</span></span>
<span class="line"><span style="color:#7AA2F7;">      defaultValue</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> () </span><span style="color:#BB9AF7;">=&gt;</span><span style="color:#7AA2F7;"> nanoid</span><span style="color:#9ABDF5;">()</span><span style="color:#89DDFF;">,</span><span style="color:#51597D;font-style:italic;"> // Generate a new NanoID as the default value</span></span>
<span class="line"><span style="color:#7AA2F7;">      saving</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> (</span><span style="color:#E0AF68;">_</span><span style="color:#89DDFF;">,</span><span style="color:#E0AF68;"> record</span><span style="color:#9ABDF5;">) </span><span style="color:#BB9AF7;">=&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#BB9AF7;">        if</span><span style="color:#9ABDF5;"> (</span><span style="color:#BB9AF7;">!</span><span style="color:#C0CAF5;">record</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">value</span><span style="color:#9ABDF5;">) {</span></span>
<span class="line"><span style="color:#C0CAF5;">          record</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">value</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> nanoid</span><span style="color:#9ABDF5;">() </span><span style="color:#51597D;font-style:italic;">// Generate a new NanoID if the value is not set</span></span>
<span class="line"><span style="color:#9ABDF5;">        }</span></span>
<span class="line"><span style="color:#9ABDF5;">      }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">    }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F7768E;font-weight:bold;">    ...</span><span style="color:#C0CAF5;">options</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">  )</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div><p>In this example, the <code>NanoIdField</code> function creates a custom field type based on the <code>Fields.string</code> type. It uses the <code>nanoid</code> function to generate a unique ID as the default value and ensures that the ID is generated before saving the record if it hasn&#39;t been set yet. This custom field type can be used in your entities to automatically generate and assign unique IDs using NanoID.</p><h2 id="customize-db-value-conversions" tabindex="-1">Customize DB Value Conversions <a class="header-anchor" href="#customize-db-value-conversions" aria-label="Permalink to &quot;Customize DB Value Conversions&quot;">​</a></h2><p>Sometimes you want to control how data is saved to the db, or the dto object. You can do that using the <code>valueConverter</code> option.</p><p>For example, the following code will save the <code>tags</code> as a comma separated string in the db.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C0CAF5;">Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">object</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C0CAF5;">Task</span><span style="color:#89DDFF;">,</span><span style="color:#0DB9D7;"> string</span><span style="color:#9ABDF5;">[]</span><span style="color:#89DDFF;">&gt;</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#73DACA;">  valueConverter</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#7AA2F7;">    toDb</span><span style="color:#89DDFF;">:</span><span style="color:#E0AF68;"> x</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">x</span><span style="color:#BB9AF7;"> ?</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">join</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> :</span><span style="color:#FF9E64;"> undefined</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#7AA2F7;">    fromDb</span><span style="color:#89DDFF;">:</span><span style="color:#E0AF68;"> x</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">x</span><span style="color:#BB9AF7;"> ?</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">split</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> :</span><span style="color:#FF9E64;"> undefined</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span>
<span class="line"><span style="color:#C0CAF5;">tags</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> string</span><span style="color:#9ABDF5;">[]</span><span style="color:#89DDFF;"> =</span><span style="color:#9ABDF5;"> []</span></span></code></pre></div><p>You can also refactor it to create your own FieldType</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">Field</span><span style="color:#89DDFF;">,</span><span style="color:#0DB9D7;"> FieldOptions</span><span style="color:#89DDFF;">,</span><span style="color:#0DB9D7;"> Remult</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#BB9AF7;"> function</span><span style="color:#7AA2F7;"> CommaSeparatedStringArrayField</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C0CAF5;">entityType</span><span style="color:#89DDFF;"> =</span><span style="color:#0DB9D7;"> any</span><span style="color:#89DDFF;">&gt;</span><span style="color:#9ABDF5;">(</span></span>
<span class="line"><span style="color:#F7768E;font-weight:bold;">  ...</span><span style="color:#7AA2F7;">options</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> (</span></span>
<span class="line"><span style="color:#89DDFF;">    |</span><span style="color:#C0CAF5;"> FieldOptions</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C0CAF5;">entityType</span><span style="color:#89DDFF;">,</span><span style="color:#0DB9D7;"> string</span><span style="color:#9ABDF5;">[]</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    |</span><span style="color:#9ABDF5;"> ((</span><span style="color:#E0AF68;">options</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> FieldOptions</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C0CAF5;">entityType</span><span style="color:#89DDFF;">,</span><span style="color:#0DB9D7;"> string</span><span style="color:#9ABDF5;">[]</span><span style="color:#89DDFF;">&gt;,</span><span style="color:#E0AF68;"> remult</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> Remult</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#0DB9D7;"> void</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#9ABDF5;">  )[]</span></span>
<span class="line"><span style="color:#9ABDF5;">)</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#BB9AF7;font-style:italic;">  return</span><span style="color:#C0CAF5;"> Fields</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">object</span><span style="color:#9ABDF5;">(</span></span>
<span class="line"><span style="color:#9ABDF5;">    {</span></span>
<span class="line"><span style="color:#73DACA;">      valueConverter</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#7AA2F7;">        toDb</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> (</span><span style="color:#E0AF68;">x</span><span style="color:#9ABDF5;">) </span><span style="color:#BB9AF7;">=&gt;</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">x</span><span style="color:#BB9AF7;"> ?</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">join</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">) </span><span style="color:#BB9AF7;">:</span><span style="color:#FF9E64;"> undefined</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#7AA2F7;">        fromDb</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> (</span><span style="color:#E0AF68;">x</span><span style="color:#9ABDF5;">) </span><span style="color:#BB9AF7;">=&gt;</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">x</span><span style="color:#BB9AF7;"> ?</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">split</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">) </span><span style="color:#BB9AF7;">:</span><span style="color:#FF9E64;"> undefined</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">      }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">    }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F7768E;font-weight:bold;">    ...</span><span style="color:#C0CAF5;">options</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">  )</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div><p>And then use it:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">CommaSeparatedStringArrayField</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#C0CAF5;">tags</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> string</span><span style="color:#9ABDF5;">[]</span><span style="color:#89DDFF;"> =</span><span style="color:#9ABDF5;"> []</span></span></code></pre></div><p>There are several ready made valueConverters included in the <code>remult</code> package, which can be found in <code>remult/valueConverters</code></p><h2 id="class-fields" tabindex="-1">Class Fields <a class="header-anchor" href="#class-fields" aria-label="Permalink to &quot;Class Fields&quot;">​</a></h2><p>Sometimes you may want a field type to be a class, you can do that, you just need to provide an implementation for its transition from and to JSON.</p><p>For example:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#BB9AF7;"> class</span><span style="color:#C0CAF5;"> Phone</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#BB9AF7;">  constructor</span><span style="color:#9ABDF5;">(</span><span style="color:#9D7CD8;font-style:italic;">public</span><span style="color:#E0AF68;"> phone</span><span style="color:#89DDFF;">:</span><span style="color:#0DB9D7;"> string</span><span style="color:#9ABDF5;">)</span><span style="color:#9ABDF5;"> {}</span></span>
<span class="line"><span style="color:#7AA2F7;">  call</span><span style="color:#9ABDF5;">()</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#C0CAF5;">    window</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">open</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">tel:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> +</span><span style="color:#F7768E;"> this</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">phone</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">Entity</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">contacts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#BB9AF7;"> class</span><span style="color:#C0CAF5;"> Contact</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  //...</span></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#7AA2F7;">Field</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C0CAF5;">Contact</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> Phone</span><span style="color:#89DDFF;">&gt;</span><span style="color:#9ABDF5;">(()</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#C0CAF5;"> Phone</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#73DACA;">    valueConverter</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#7AA2F7;">      fromJson</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> (</span><span style="color:#E0AF68;">x</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">x</span><span style="color:#BB9AF7;"> ?</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> Phone</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> :</span><span style="color:#FF9E64;"> undefined</span><span style="color:#BB9AF7;">!</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#7AA2F7;">      toJson</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> (</span><span style="color:#E0AF68;">x</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">x</span><span style="color:#BB9AF7;"> ?</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">phone</span><span style="color:#BB9AF7;"> :</span><span style="color:#FF9E64;"> undefined</span><span style="color:#BB9AF7;">!</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">    }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">  })</span></span>
<span class="line"><span style="color:#73DACA;">  phone</span><span style="color:#89DDFF;">?:</span><span style="color:#C0CAF5;"> Phone</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div><p>Alternatively you can decorate the <code>Phone</code> class with the <code>FieldType</code> decorator, so that whenever you use it, its <code>valueConverter</code> will be used.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">FieldType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C0CAF5;">Phone</span><span style="color:#89DDFF;">&gt;</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#73DACA;">  valueConverter</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#7AA2F7;">    fromJson</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> (</span><span style="color:#E0AF68;">x</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">x</span><span style="color:#BB9AF7;"> ?</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> Phone</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> :</span><span style="color:#FF9E64;"> undefined</span><span style="color:#BB9AF7;">!</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#7AA2F7;">    toJson</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> (</span><span style="color:#E0AF68;">x</span><span style="color:#9ABDF5;">)</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">x</span><span style="color:#BB9AF7;"> ?</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">phone</span><span style="color:#BB9AF7;"> :</span><span style="color:#FF9E64;"> undefined</span><span style="color:#BB9AF7;">!</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#BB9AF7;"> class</span><span style="color:#C0CAF5;"> Phone</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#BB9AF7;">  constructor</span><span style="color:#9ABDF5;">(</span><span style="color:#9D7CD8;font-style:italic;">public</span><span style="color:#E0AF68;"> phone</span><span style="color:#89DDFF;">:</span><span style="color:#0DB9D7;"> string</span><span style="color:#9ABDF5;">)</span><span style="color:#9ABDF5;"> {}</span></span>
<span class="line"><span style="color:#7AA2F7;">  call</span><span style="color:#9ABDF5;">()</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#C0CAF5;">    window</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">open</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">tel:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> +</span><span style="color:#F7768E;"> this</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">phone</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">Entity</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">contacts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#BB9AF7;"> class</span><span style="color:#C0CAF5;"> Contact</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  //...</span></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#7AA2F7;">Field</span><span style="color:#9ABDF5;">(()</span><span style="color:#BB9AF7;"> =&gt;</span><span style="color:#C0CAF5;"> Phone</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#73DACA;">  phone</span><span style="color:#89DDFF;">?:</span><span style="color:#C0CAF5;"> Phone</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div>`,112)]))}const D=a(e,[["render",p]]);export{d as __pageData,D as default};
