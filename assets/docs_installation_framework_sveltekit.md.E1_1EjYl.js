import{_ as s,c as a,o as n,a5 as l}from"./chunks/framework.C7bC4sbb.js";const u=JSON.parse('{"title":"SvelteKit","description":"","frontmatter":{},"headers":[],"relativePath":"docs/installation/framework/sveltekit.md","filePath":"docs/installation/framework/sveltekit.md","lastUpdated":1735038488000}'),e={name:"docs/installation/framework/sveltekit.md"},o=l(`<h1 id="sveltekit" tabindex="-1">SvelteKit <a class="header-anchor" href="#sveltekit" aria-label="Permalink to &quot;SvelteKit&quot;">​</a></h1><h2 id="create-a-sveltekit-project" tabindex="-1">Create a SvelteKit Project <a class="header-anchor" href="#create-a-sveltekit-project" aria-label="Permalink to &quot;Create a SvelteKit Project&quot;">​</a></h2><p>To create a new SvelteKit project, run the following command:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npx</span><span style="color:#CE9178;"> sv@latest</span><span style="color:#CE9178;"> create</span><span style="color:#CE9178;"> remult-sveltekit-todo</span></span></code></pre></div><p>During the setup, answer the prompts as follows:</p><ol><li><strong>Which Svelte app template?</strong>: ... <code>minimal</code> Project</li><li><strong>Add type checking with TypeScript?</strong> ... Yes, using <code>TypeScript</code> syntax</li><li><strong>Select additional options</strong>: ... We didn&#39;t select anything for this tutorial. Feel free to adapt it to your needs.</li><li><strong>Which package manager?</strong>: ... We took <code>npm</code>, if you perfer others, feel free.</li></ol><p>Once the setup is complete, navigate into the project directory:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#CE9178;"> remult-sveltekit-todo</span></span></code></pre></div><h2 id="install-required-packages-and-remult" tabindex="-1">Install Required Packages and Remult <a class="header-anchor" href="#install-required-packages-and-remult" aria-label="Permalink to &quot;Install Required Packages and Remult&quot;">​</a></h2><p>Install Remult and any necessary dependencies by running:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npm</span><span style="color:#CE9178;"> install</span><span style="color:#CE9178;"> remult</span><span style="color:#569CD6;"> --save-dev</span></span></code></pre></div><h2 id="bootstrap-remult" tabindex="-1">Bootstrap Remult <a class="header-anchor" href="#bootstrap-remult" aria-label="Permalink to &quot;Bootstrap Remult&quot;">​</a></h2><p>To set up Remult in your SvelteKit project:</p><ol><li>Create your remult <code>api</code></li></ol><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-hTFrl" id="tab-v4MUqsS" checked><label for="tab-v4MUqsS">src/server/api.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">remultSveltekit</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult/remult-sveltekit&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> api</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">remultSveltekit</span><span style="color:#D4D4D4;">({})</span></span></code></pre></div></div></div><ol start="2"><li>Create a remult <code>api route</code></li></ol><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-pUrPI" id="tab-p_1WZqs" checked><label for="tab-p_1WZqs">src/routes/api/[...remult]/+server.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">api</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;../../../server/api&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">GET</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">POST</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">PUT</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">DELETE</span><span style="color:#D4D4D4;"> } = </span><span style="color:#9CDCFE;">api</span></span></code></pre></div></div></div><h2 id="final-tweaks" tabindex="-1">Final Tweaks <a class="header-anchor" href="#final-tweaks" aria-label="Permalink to &quot;Final Tweaks&quot;">​</a></h2><p>Remult uses TypeScript decorators to enhance classes into entities. To enable decorators in your SvelteKit project, modify the <code>tsconfig.json</code> file by adding the following to the <code>compilerOptions</code> section:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki dark-plus has-diff vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#9CDCFE;">  &quot;compilerOptions&quot;</span><span style="color:#D4D4D4;">: {</span></span>
<span class="line diff add"><span style="color:#9CDCFE;">    &quot;experimentalDecorators&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">true</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><h2 id="run-the-app" tabindex="-1">Run the App <a class="header-anchor" href="#run-the-app" aria-label="Permalink to &quot;Run the App&quot;">​</a></h2><p>To start the development server, run the following command:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npm</span><span style="color:#CE9178;"> run</span><span style="color:#CE9178;"> dev</span></span></code></pre></div><p>Your SvelteKit app will be available at <a href="http://localhost:5173" target="_blank" rel="noreferrer">http://localhost:5173</a>.</p><p>Your SvelteKit project with Remult is now up and running.</p><h1 id="extra" tabindex="-1">Extra <a class="header-anchor" href="#extra" aria-label="Permalink to &quot;Extra&quot;">​</a></h1><h2 id="extra-remult-in-other-sveltekit-routes" tabindex="-1">Extra - Remult in other SvelteKit routes <a class="header-anchor" href="#extra-remult-in-other-sveltekit-routes" aria-label="Permalink to &quot;Extra - Remult in other SvelteKit routes&quot;">​</a></h2><p>To enable remult across all sveltekit route</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-7UvSH" id="tab-kL_ZSzk" checked><label for="tab-kL_ZSzk">src/hooks.server.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">sequence</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;@sveltejs/kit/hooks&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">api</span><span style="color:#C586C0;"> as</span><span style="color:#9CDCFE;"> handleRemult</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;./server/api&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> handle</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">sequence</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#6A9955;">  // Manage your sequence of handlers here</span></span>
<span class="line"><span style="color:#9CDCFE;">  handleRemult</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span></code></pre></div></div></div><h2 id="extra-ssr-and-pageload" tabindex="-1">Extra - SSR and PageLoad <a class="header-anchor" href="#extra-ssr-and-pageload" aria-label="Permalink to &quot;Extra - SSR and PageLoad&quot;">​</a></h2><p>To Use remult in ssr <code>PageLoad</code> - this will leverage the <code>event</code>&#39;s fetch to load data on the server without reloading it on the frontend, and abiding to all api rules even when it runs on the server</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-5vxEv" id="tab-b5-bL-J" checked><label for="tab-b5-bL-J">src/routes/+page.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#C586C0;"> type</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">PageLoad</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;./$types&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> load</span><span style="color:#D4D4D4;"> = (</span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">  // Instruct remult to use the special svelte fetch</span></span>
<span class="line"><span style="color:#6A9955;">  // Like this univeral load will work in SSR &amp; CSR</span></span>
<span class="line"><span style="color:#9CDCFE;">  remult</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">useFetch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">fetch</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#DCDCAA;"> repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">}) </span><span style="color:#C586C0;">satisfies</span><span style="color:#4EC9B0;"> PageLoad</span></span></code></pre></div></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can add this in <code>+layout.ts</code> as well and all routes <strong>under</strong> will have the correct fetch out of the box.</p></div><h2 id="extra-svelte-5-reactivity" tabindex="-1">Extra - Svelte 5 &amp; Reactivity <a class="header-anchor" href="#extra-svelte-5-reactivity" aria-label="Permalink to &quot;Extra - Svelte 5 &amp; Reactivity&quot;">​</a></h2><p>Remult is fully compatible with Svelte 5, Rune, and Reactivity.</p><p>To take full advantage of it, add this snippet:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-ojIPP" id="tab-_qILOOJ" checked><label for="tab-_qILOOJ">src/routes/+layout.svelte</label></div><div class="blocks"><div class="language-html active"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> lang</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;ts&quot;</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#C586C0;">  import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Remult</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult&#39;</span></span>
<span class="line"><span style="color:#C586C0;">  import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">createSubscriber</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;svelte/reactivity&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // To be done once in the application.</span></span>
<span class="line"><span style="color:#569CD6;">  function</span><span style="color:#DCDCAA;"> initRemultSvelteReactivity</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#9CDCFE;">    Remult</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">entityRefInit</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">      let</span><span style="color:#DCDCAA;"> update</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {}</span></span>
<span class="line"><span style="color:#569CD6;">      let</span><span style="color:#9CDCFE;"> s</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">createSubscriber</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">u</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">        update</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">u</span></span>
<span class="line"><span style="color:#D4D4D4;">      })</span></span>
<span class="line"><span style="color:#9CDCFE;">      x</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">subscribe</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#DCDCAA;">        reportObserved</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> s</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#DCDCAA;">        reportChanged</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> update</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">      })</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#DCDCAA;">  initRemultSvelteReactivity</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></code></pre></div></div></div><p>Then you can use <code>$state</code>, <code>$derived</code> like any other places</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-DPg9Y" id="tab-I3hQUy4" checked><label for="tab-I3hQUy4">src/routes/+page.svelte</label></div><div class="blocks"><div class="language-html active"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> lang</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;ts&quot;</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#6A9955;">  // Prepare a new task</span></span>
<span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> editingTask</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">$state</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">create</span><span style="color:#D4D4D4;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // Check if the form has empty fields</span></span>
<span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> formHasEmpty</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">$derived</span><span style="color:#D4D4D4;">(!</span><span style="color:#9CDCFE;">editingTask</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">editingTask</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">title</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> === </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // Clone the task to edit</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#DCDCAA;"> editTask</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Task</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    editingTask</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">getEntityRef</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">clone</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></code></pre></div></div></div>`,39),p=[o];function t(c,r,i,D,y,d){return n(),a("div",null,p)}const v=s(e,[["render",t]]);export{u as __pageData,v as default};
