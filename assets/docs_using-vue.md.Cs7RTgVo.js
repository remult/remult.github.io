import{_ as a,c as r,o as t,L as s}from"./chunks/framework.DxxKE4lP.js";const m=JSON.parse('{"title":"Using Vue in Markdown","description":"","frontmatter":{},"headers":[],"relativePath":"docs/using-vue.md","filePath":"docs/using-vue.md","lastUpdated":1639585287000}'),o={name:"docs/using-vue.md"};function n(i,e,c,d,u,h){return t(),r("div",null,e[0]||(e[0]=[s('<h1 id="using-vue-in-markdown" tabindex="-1">Using Vue in Markdown <a class="header-anchor" href="#using-vue-in-markdown" aria-label="Permalink to &quot;Using Vue in Markdown&quot;">​</a></h1><h2 id="browser-api-access-restrictions" tabindex="-1">Browser API Access Restrictions <a class="header-anchor" href="#browser-api-access-restrictions" aria-label="Permalink to &quot;Browser API Access Restrictions&quot;">​</a></h2><p>Because VuePress applications are server-rendered in Node.js when generating static builds, any Vue usage must conform to the <a href="https://ssr.vuejs.org/en/universal.html" target="_blank" rel="noreferrer">universal code requirements</a>. In short, make sure to only access Browser / DOM APIs in <code>beforeMount</code> or <code>mounted</code> hooks.</p><p>If you are using or demoing components that are not SSR friendly (for example containing custom directives), you can wrap them inside the built-in <code>&lt;ClientOnly&gt;</code> component:</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2><h2 id="what-the-fuck" tabindex="-1">what the fuck <a class="header-anchor" href="#what-the-fuck" aria-label="Permalink to &quot;what the fuck&quot;">​</a></h2><p>asdfsdaf asdf</p><h2 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-label="Permalink to &quot;&quot;">​</a></h2>',8)]))}const f=a(o,[["render",n]]);export{m as __pageData,f as default};
