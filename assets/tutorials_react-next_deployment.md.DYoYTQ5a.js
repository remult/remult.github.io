import{_ as e,c as a,o,L as n}from"./chunks/framework.DdPzwmCl.js";const F=JSON.parse('{"title":"Deployment","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/react-next/deployment.md","filePath":"tutorials/react-next/deployment.md","lastUpdated":1737990475000}'),l={name:"tutorials/react-next/deployment.md"};function t(p,s,r,c,i,y){return o(),a("div",null,s[0]||(s[0]=[n(`<h1 id="deployment" tabindex="-1">Deployment <a class="header-anchor" href="#deployment" aria-label="Permalink to &quot;Deployment&quot;">​</a></h1><p>You can deploy the application to a standard node.js server, or a server-less server.</p><p>We&#39;ll review both options.</p><h2 id="deploy-to-a-node-js-server" tabindex="-1">Deploy to a node.js server <a class="header-anchor" href="#deploy-to-a-node-js-server" aria-label="Permalink to &quot;Deploy to a node.js server&quot;">​</a></h2><p>Let&#39;s deploy the todo app to <a href="https://railway.app/" target="_blank" rel="noreferrer">railway.app</a>.</p><p>In order to deploy the todo app to <a href="https://railway.app/" target="_blank" rel="noreferrer">railway</a> you&#39;ll need a <code>railway</code> account. You&#39;ll also need <a href="https://docs.railway.app/develop/cli#npm" target="_blank" rel="noreferrer">Railway CLI</a> installed, and you&#39;ll need to login to railway from the cli, using <code>railway login</code>.</p><p>Click enter multiple times to answer all its questions with the default answer</p><ol><li><p>Create a Railway <code>project</code>.</p><p>From the terminal in your project folder run:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#C0CAF5;">railway</span><span style="color:#9ECE6A;"> init</span></span></code></pre></div></li><li><p>Select <code>Empty Project</code></p></li><li><p>Set a project name.</p></li><li><p>Once it&#39;s done add a database by running the following command:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#C0CAF5;">railway</span><span style="color:#9ECE6A;"> add</span></span></code></pre></div></li><li><p>Select <code>postgressql</code> as the database.</p></li><li><p>Once that&#39;s done run the following command to upload the project to railway:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#C0CAF5;">railway</span><span style="color:#9ECE6A;"> up</span></span></code></pre></div></li><li><p>got to the <code>railway</code> project&#39;s site and click on the project</p></li><li><p>Switch to the <code>settings</code> tab</p></li><li><p>Under <code>Environment</code> click on <code>Generate Domain</code></p></li><li><p>Copy the <code>generated url</code>, you&#39;ll need it for <a href="https://next-auth.js.org/configuration/options#nextauth_url" target="_blank" rel="noreferrer">NEXTAUTH_URL</a> on step 14</p></li><li><p>Switch to the <code>variables</code> tab</p></li><li><p>Click on <code>+ New Variable</code>, and in the <code>VARIABLE_NAME</code> click <code>Add Reference</code> and select <code>DATABASE_URL</code></p></li><li><p>Add another variable called <code>SESSION_SECRET</code> and set it to a random string, you can use an <a href="https://www.uuidgenerator.net/" target="_blank" rel="noreferrer">online UUID generator</a></p></li><li><p>Add another variable called <code>NEXTAUTH_URL</code> and set it to the <code>generated url</code> which was created on step 10.</p></li><li><p>Wait for railway to finish deploying your changes and Click on the newly generated url to open the app in the browser and you&#39;ll see the app live in production. (it may take a few minutes to go live)</p></li></ol><div class="warning custom-block"><p class="custom-block-title">Note</p><p>If you run into trouble deploying the app to Railway, try using Railway&#39;s <a href="https://docs.railway.app/deploy/deployments" target="_blank" rel="noreferrer">documentation</a>.</p></div><p>That&#39;s it - our application is deployed to production, on a node js server</p><p>Next we&#39;ll explore deployment to a server-less environment.</p><h2 id="deploying-to-a-serverless-environment" tabindex="-1">Deploying to a serverless environment <a class="header-anchor" href="#deploying-to-a-serverless-environment" aria-label="Permalink to &quot;Deploying to a serverless environment&quot;">​</a></h2><h3 id="livequery-serverless-support" tabindex="-1">LiveQuery Serverless Support <a class="header-anchor" href="#livequery-serverless-support" aria-label="Permalink to &quot;LiveQuery Serverless Support&quot;">​</a></h3><p>Any <code>serverless</code> platform can&#39;t be used to maintain an active subscription channel for our live query, we&#39;ll need to use a 3rd party provider for that.</p><p>If you&#39;re not using <code>liveQuery</code> you can skip to the next step.</p><p>In this demo, we&#39;ll use <a href="https://ably.com/" target="_blank" rel="noreferrer">ably.com</a> Follow these steps only if you want to use <code>liveQuery</code> in the app</p><ol><li><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#C0CAF5;">npm</span><span style="color:#9ECE6A;"> i</span><span style="color:#9ECE6A;"> ably</span></span></code></pre></div></li><li><p>Goto <a href="https://ably.com/" target="_blank" rel="noreferrer">ably.com</a> create a user and click on the &quot;Create new app&quot; button</p></li><li><p>Select a name and click <code>create app</code></p></li><li><p>Click on the <code>API Keys</code> button on top.</p></li><li><p>Copy the first api key (with the many capabilities), create an entry in the <code>.env.local</code> file, name it <code>ABLY_API_KEY</code> and paste the api key there.</p></li><li><p>Configure <code>ably</code> as the <code>subscriptionServer</code></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// src/api.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">//...</span></span>
<span class="line highlighted"><span style="color:#7DCFFF;">import</span><span style="color:#0DB9D7;"> ably</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">ably</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line highlighted"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">AblySubscriptionServer</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">remult/ably</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> api</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> remultNextApp</span><span style="color:#9ABDF5;">({</span></span>
<span class="line highlighted"><span style="color:#73DACA;">  subscriptionServer</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> AblySubscriptionServer</span><span style="color:#9ABDF5;">(</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">    new</span><span style="color:#C0CAF5;"> ably</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">Rest</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">process</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">env</span><span style="color:#9ABDF5;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">ABLY_API_KEY</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">]</span><span style="color:#BB9AF7;">!</span><span style="color:#9ABDF5;">)</span></span>
<span class="line highlighted"><span style="color:#9ABDF5;">  )</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  //...</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span></code></pre></div></li><li><p>Next, we&#39;ll need to create a route that <code>ably</code>&#39;s client on the front-end will use to get a <code>token</code> for a user that wants to subscribe to a channel - in the <code>src/app/api</code> folder, createa folder called <code>getAblyToken</code> and in it create a file called <code>route.ts</code></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// src/app/api/getAblyToken/route.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#0DB9D7;"> ably</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">ably</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">NextResponse</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">next/server</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#9D7CD8;font-style:italic;"> async</span><span style="color:#BB9AF7;"> function</span><span style="color:#7AA2F7;"> POST</span><span style="color:#9ABDF5;">()</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">  const</span><span style="color:#BB9AF7;"> token</span><span style="color:#89DDFF;"> =</span><span style="color:#BB9AF7;font-style:italic;"> await</span><span style="color:#89DDFF;"> new</span><span style="color:#C0CAF5;"> ably</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">Rest</span><span style="color:#9ABDF5;">(</span></span>
<span class="line"><span style="color:#C0CAF5;">    process</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">env</span><span style="color:#9ABDF5;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">ABLY_API_KEY</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">]</span><span style="color:#BB9AF7;">!</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">  )</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">auth</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">createTokenRequest</span><span style="color:#9ABDF5;">({ </span><span style="color:#73DACA;">capability</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> { </span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">*</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">subscribe</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">] } })</span></span>
<span class="line"><span style="color:#BB9AF7;font-style:italic;">  return</span><span style="color:#C0CAF5;"> NextResponse</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">json</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">token</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div></li></ol><ol start="8"><li><p>Configure the <code>front-end</code> to use ably as it&#39;s <code>subscriptionClient</code> by adding a new <code>useEffect</code> hook and configure <code>ably</code> to use the <code>api/getAblyToken</code> route we&#39;ve created as it&#39;s <code>authUrl</code> - we&#39;ll that in the <code>Auth</code> component</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// src/components/auth.tsx</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#7DCFFF;">import</span><span style="color:#0DB9D7;"> ably</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">ably</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line highlighted"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">AblySubscriptionClient</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">remult/ably</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7DCFFF;">export</span><span style="color:#7DCFFF;"> default</span><span style="color:#BB9AF7;"> function</span><span style="color:#7AA2F7;"> Auth</span><span style="color:#9ABDF5;">()</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">  const</span><span style="color:#BB9AF7;"> session</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> useSession</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#C0CAF5;">  remult</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">user</span><span style="color:#89DDFF;"> =</span><span style="color:#C0CAF5;"> session</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">data</span><span style="color:#89DDFF;">?.</span><span style="color:#7DCFFF;">user</span><span style="color:#89DDFF;"> as</span><span style="color:#C0CAF5;"> UserInfo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7AA2F7;">  useEffect</span><span style="color:#9ABDF5;">(() </span><span style="color:#BB9AF7;">=&gt;</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#BB9AF7;">    if</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">session</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">status</span><span style="color:#BB9AF7;"> ===</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">unauthenticated</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">) </span><span style="color:#7AA2F7;">signIn</span><span style="color:#9ABDF5;">()</span></span>
<span class="line highlighted"><span style="color:#BB9AF7;">    else</span><span style="color:#BB9AF7;"> if</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">session</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">status</span><span style="color:#BB9AF7;"> ===</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">authenticated</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span></span>
<span class="line highlighted"><span style="color:#C0CAF5;">      remult</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">apiClient</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">subscriptionClient</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> AblySubscriptionClient</span><span style="color:#9ABDF5;">(</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">        new</span><span style="color:#C0CAF5;"> ably</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">Realtime</span><span style="color:#9ABDF5;">({ </span><span style="color:#73DACA;">authUrl</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">/api/getAblyToken</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#73DACA;"> authMethod</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">POST</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;"> })</span></span>
<span class="line highlighted"><span style="color:#9ABDF5;">      )</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;"> [</span><span style="color:#7DCFFF;">session</span><span style="color:#9ABDF5;">])</span></span></code></pre></div></li><li><p>Configure <code>remultNextApp</code> to store live-queries in the <code>dataProvider</code></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// src/api.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">//...</span></span>
<span class="line highlighted"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">DataProviderLiveQueryStorage</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">remult/server</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> dataProvider</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> createPostgresDataProvider</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> api</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> remultNextApp</span><span style="color:#9ABDF5;">({</span></span>
<span class="line highlighted"><span style="color:#C0CAF5;">  dataProvider</span><span style="color:#89DDFF;">,</span></span>
<span class="line highlighted"><span style="color:#73DACA;">  liveQueryStorage</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> new</span><span style="color:#7AA2F7;"> DataProviderLiveQueryStorage</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">dataProvider</span><span style="color:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  //...</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span></code></pre></div></li></ol><p>Let&#39;s deploy the todo app to <a href="https://vercel.com/" target="_blank" rel="noreferrer">vercel</a>.</p><h3 id="postgres" tabindex="-1">Postgres <a class="header-anchor" href="#postgres" aria-label="Permalink to &quot;Postgres&quot;">​</a></h3><p>We&#39;ll use vercel&#39;s postgres as out database, and that requires the following changes to the <code>createPostgresDataProvider</code> options.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// src/api.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> dataProvider</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> createPostgresDataProvider</span><span style="color:#9ABDF5;">({</span></span>
<span class="line highlighted"><span style="color:#73DACA;">  connectionString</span><span style="color:#89DDFF;">:</span><span style="color:#C0CAF5;"> process</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">env</span><span style="color:#9ABDF5;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">POSTGRES_URL</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">]</span><span style="color:#BB9AF7;"> ||</span><span style="color:#C0CAF5;"> process</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">env</span><span style="color:#9ABDF5;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">DATABASE_URL</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line highlighted"><span style="color:#73DACA;">  configuration</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line highlighted"><span style="color:#73DACA;">    ssl</span><span style="color:#89DDFF;">:</span><span style="color:#7AA2F7;"> Boolean</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">process</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">env</span><span style="color:#9ABDF5;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">POSTGRES_URL</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">])</span><span style="color:#89DDFF;">,</span></span>
<span class="line highlighted"><span style="color:#9ABDF5;">  }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span></code></pre></div><ul><li>Vercel sends the connection string using the <code>POSTGRES_URL</code> environment variable, other providers use the <code>DATABASE_URL</code> - this code supports them both.</li><li>Ssl is required with vercel - by my local pg doesn&#39;t, so we condition ssl based on the environment variable.</li></ul><h3 id="create-a-github-repo" tabindex="-1">Create a github repo <a class="header-anchor" href="#create-a-github-repo" aria-label="Permalink to &quot;Create a github repo&quot;">​</a></h3><p>Vercel deploys automatically whenever you push to github, so the first step of deployment is to create a github repo and push all your changes to it.</p><h3 id="create-a-vercel-project" tabindex="-1">Create a vercel project <a class="header-anchor" href="#create-a-vercel-project" aria-label="Permalink to &quot;Create a vercel project&quot;">​</a></h3><ol><li>Create a vercel account if you don&#39;t already have one.</li><li>Goto <a href="https://vercel.com/new" target="_blank" rel="noreferrer">https://vercel.com/new</a></li><li>Select your <code>github</code> repo and click <code>import</code></li><li>Configure the project&#39;s name and in the <code>&gt; Environment Variables</code> section, <code>NEXTAUTH_SECRET</code> and <code>ABLY_API_KEY</code> environment variables</li><li>Click <code>Deploy</code></li><li>Now we need to define the postgres database.</li><li>Wait for vercel to complete it&#39;s deployment</li><li>Click on <code>Continue to Dashboard</code></li><li>Select the <code>Storage</code> tab</li><li>Create new Database and select Postgres</li><li>Accept the terms</li><li>Select region and click Create &amp; continue</li><li>Click Connect</li><li>Click on Settings, Environment Variables and see that the <code>POSTGRES_URL</code> and other environment variables were added.</li><li>At the time of this article, vercel did not yet automatically redeploy once you configure a database, so in order to redeploy, click on the <code>Deployments</code> tab</li><li>3 dots at the end of the deployment line and select <code>Redeploy</code> and click <code>Redeploy</code></li><li>Once completed click on &#39;Visit&#39;.</li></ol><p>That&#39;s it - our application is deployed to production on vercel, play with it and enjoy.</p><p><a href="https://github.com/noam-honig/remult-nextjs-app-router-todo" target="_blank" rel="noreferrer">Code at this stage</a></p><p>To see a larger more complex code base, visit our <a href="https://www.github.com/remult/crm-demo" target="_blank" rel="noreferrer">CRM example project</a></p><p>Love Remult? <a href="https://github.com/remult/remult" target="_blank" rel="noopener"> Give our repo a star.⭐</a></p>`,31)]))}const D=e(l,[["render",t]]);export{F as __pageData,D as default};
