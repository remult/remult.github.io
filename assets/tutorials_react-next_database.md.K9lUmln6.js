import{_ as s,c as a,o as n,a5 as e}from"./chunks/framework.ChN904aB.js";const h=JSON.parse('{"title":"Database","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/react-next/database.md","filePath":"tutorials/react-next/database.md","lastUpdated":1715855157000}'),o={name:"tutorials/react-next/database.md"},t=e(`<h1 id="database" tabindex="-1">Database <a class="header-anchor" href="#database" aria-label="Permalink to &quot;Database&quot;">â€‹</a></h1><p>Up until now the todo app has been using a plain JSON file to store the list of tasks. <strong>In production, we&#39;d like to use a <code>Postgres</code> database table instead.</strong></p><div class="tip custom-block"><p class="custom-block-title">Learn more</p><p>See the <a href="https://remult.dev/docs/quickstart.html#connecting-a-database" target="_blank" rel="noreferrer">Quickstart</a> article for the (long) list of relational and non-relational databases Remult supports.</p></div><div class="warning custom-block"><p class="custom-block-title">Don&#39;t have Postgres installed? Don&#39;t have to.</p><p>Don&#39;t worry if you don&#39;t have Postgres installed locally. In the next step of the tutorial, we&#39;ll configure the app to use Postgres in production, and keep using JSON files in our dev environment.</p><p><strong>Simply install <code>postgres-node</code> per step 1 below and move on to the <a href="./deployment">Deployment section of the tutorial</a>.</strong></p></div><ol><li><p>Install <code>postgres-node</code> (&quot;pg&quot;).</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npm</span><span style="color:#CE9178;"> i</span><span style="color:#CE9178;"> pg</span></span></code></pre></div></li><li><p>Add an environment variables called <code>DATABASE_URL</code> and set it with your connection string</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span>// .env.local</span></span>
<span class="line"><span></span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>DATABASE_URL=your connection string</span></span></code></pre></div></li><li><p>Add the highlighted code to the <code>api</code> server module.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/api.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">//...</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">createPostgresDataProvider</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;remult/postgres&quot;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> DATABASE_URL</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">process</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">env</span><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">&quot;DATABASE_URL&quot;</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> api</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">remultNextApp</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#6A9955;">  //...</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;"> dataProvider:</span><span style="color:#4FC1FF;"> DATABASE_URL</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">   ? </span><span style="color:#DCDCAA;">createPostgresDataProvider</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">connectionString:</span><span style="color:#4FC1FF;"> DATABASE_URL</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">   : </span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre></div><p>Once the application restarts, it&#39;ll try to use postgres as the data source for your application.</p><p>If <code>DATABASE_URL</code> env variable has found, it&#39;ll automatically create the <code>tasks</code> table for you - as you&#39;ll see in the <code>terminal</code> window.</p><p>If no <code>DATABASE_URL</code> has found, it&#39;ll just fallback to our local JSON files.</p></li></ol><div class="tip custom-block"><p class="custom-block-title">Database configurations</p><p>You can set more options using the <code>configuration</code> property, for example <code>ssl</code> and others.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">createPostgresDataProvider</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  configuration:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    ssl:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre></div></div>`,6),l=[t];function p(c,r,i,d,D,u){return n(),a("div",null,l)}const g=s(o,[["render",p]]);export{h as __pageData,g as default};
