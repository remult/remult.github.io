import{_ as a,c as o,o as n,L as e}from"./chunks/framework.DdPzwmCl.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/installation/database/json.md","filePath":"docs/installation/database/json.md","lastUpdated":1746535795000}'),l={name:"docs/installation/database/json.md"};function t(p,s,r,i,c,d){return n(),o("div",null,s[0]||(s[0]=[e(`<h2 id="json-files" tabindex="-1">JSON Files <a class="header-anchor" href="#json-files" aria-label="Permalink to &quot;JSON Files&quot;">​</a></h2><p>You can store data in JSON files using Remult. Here&#39;s how to configure your server:</p><h3 id="step-1-configure-the-dataprovider" tabindex="-1">Step 1: Configure the <code>dataProvider</code> <a class="header-anchor" href="#step-1-configure-the-dataprovider" aria-label="Permalink to &quot;Step 1: Configure the \`dataProvider\`&quot;">​</a></h3><p>In your <code>index.ts</code> (or server file), configure the <code>dataProvider</code> to use JSON files as the storage mechanism:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// index.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#0DB9D7;"> express</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">express</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">remultApi</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">remult/remult-express</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line highlighted"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">JsonDataProvider</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">remult</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line highlighted"><span style="color:#7DCFFF;">import</span><span style="color:#9ABDF5;"> { </span><span style="color:#0DB9D7;">JsonEntityFileStorage</span><span style="color:#9ABDF5;"> }</span><span style="color:#7DCFFF;"> from</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">remult/server</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> app</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> express</span><span style="color:#9ABDF5;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C0CAF5;">app</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">use</span><span style="color:#9ABDF5;">(</span></span>
<span class="line"><span style="color:#7AA2F7;">  remultApi</span><span style="color:#9ABDF5;">({</span></span>
<span class="line highlighted"><span style="color:#7AA2F7;">    dataProvider</span><span style="color:#89DDFF;">:</span><span style="color:#9D7CD8;font-style:italic;"> async</span><span style="color:#9ABDF5;"> ()</span><span style="color:#BB9AF7;"> =&gt;</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">      new</span><span style="color:#7AA2F7;"> JsonDataProvider</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">new</span><span style="color:#7AA2F7;"> JsonEntityFileStorage</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">./db</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">))</span><span style="color:#51597D;font-style:italic;"> // Data will be stored in the &#39;db&#39; folder</span></span>
<span class="line highlighted"><span style="color:#9ABDF5;">  })</span></span>
<span class="line"><span style="color:#9ABDF5;">)</span></span></code></pre></div><h3 id="explanation" tabindex="-1">Explanation: <a class="header-anchor" href="#explanation" aria-label="Permalink to &quot;Explanation:&quot;">​</a></h3><ul><li><strong><code>JsonDataProvider</code></strong>: This is the data provider that will store your data in JSON format.</li><li><strong><code>JsonEntityFileStorage</code></strong>: Specifies the directory where the JSON files will be stored (in this case, <code>./db</code>).</li><li><strong><code>&quot;./db&quot;</code></strong>: The path where JSON files for entities will be created. Ensure the folder exists or it will be created automatically.</li></ul><p>This configuration allows you to store and manage your application data in JSON files, ideal for small projects or quick setups.</p>`,8)]))}const D=a(l,[["render",t]]);export{y as __pageData,D as default};
