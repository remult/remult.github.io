import{_ as a,c as e,o as n,L as l}from"./chunks/framework.BLY-PH98.js";const F=JSON.parse('{"title":"Repository","description":"","frontmatter":{},"headers":[],"relativePath":"docs/ref_repository.md","filePath":"docs/ref_repository.md","lastUpdated":1753700867000}'),o={name:"docs/ref_repository.md"};function t(p,s,r,c,i,y){return n(),e("div",null,s[0]||(s[0]=[l(`<h1 id="repository" tabindex="-1">Repository <a class="header-anchor" href="#repository" aria-label="Permalink to &quot;Repository&quot;">​</a></h1><p>used to perform CRUD operations on an <code>entityType</code></p><h2 id="find" tabindex="-1">find <a class="header-anchor" href="#find" aria-label="Permalink to &quot;find&quot;">​</a></h2><p>returns a result array based on the provided options</p><p>Arguments:</p><ul><li><p><strong>options</strong></p><ul><li><strong>limit</strong> - Determines the number of rows returned by the request, on the browser the default is 100 rows</li></ul><h4 id="example" tabindex="-1">example: <a class="header-anchor" href="#example" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Products</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">find</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#73DACA;">  limit</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> 10</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">  page</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> 2</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span></code></pre></div><ul><li><strong>page</strong> - Determines the page number that will be used to extract the data</li></ul><h4 id="example-1" tabindex="-1">example: <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Products</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">find</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#73DACA;">  limit</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> 10</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;"> page</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> 2</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span></code></pre></div><ul><li><strong>load</strong></li><li><strong>include</strong> - An option used in the <code>find</code> and <code>findFirst</code> methods to specify which related entities should be included when querying the source entity. It allows you to eagerly load related data to avoid N+1 query problems.</li></ul><h4 id="param" tabindex="-1">param: <a class="header-anchor" href="#param" aria-label="Permalink to &quot;param:&quot;">​</a></h4><p>An object specifying the related entities to include, their options, and filtering criteria.</p><p>Example usage:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span>const orders = await customerRepo.find({</span></span>
<span class="line"><span>  include: {</span></span>
<span class="line"><span>    // Include the &#39;tags&#39; relation for each customer.</span></span>
<span class="line"><span>    tags: true,</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>});</span></span></code></pre></div><p>In this example, the <code>tags</code> relation for each customer will be loaded and included in the query result.</p><h4 id="see" tabindex="-1">see: <a class="header-anchor" href="#see" aria-label="Permalink to &quot;see:&quot;">​</a></h4><ul><li>Relations.toMany</li><li>Relations.toOne</li><li>RelationOptions</li></ul><ul><li><strong>where</strong> - filters the data</li></ul><h4 id="example-2" tabindex="-1">example: <a class="header-anchor" href="#example-2" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#C0CAF5;"> taskRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">find</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;">where</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> completed</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;">false</span><span style="color:#9ABDF5;"> }})</span></span></code></pre></div><h4 id="see-1" tabindex="-1">see: <a class="header-anchor" href="#see-1" aria-label="Permalink to &quot;see:&quot;">​</a></h4><p>For more usage examples see <a href="https://remult.dev/docs/entityFilter.html" target="_blank" rel="noreferrer">EntityFilter</a></p><ul><li><strong>orderBy</strong> - Determines the order of items returned .</li></ul><h4 id="example-3" tabindex="-1">example: <a class="header-anchor" href="#example-3" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Products</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">find</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;"> orderBy</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">asc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;"> }})</span></span></code></pre></div><h4 id="example-4" tabindex="-1">example: <a class="header-anchor" href="#example-4" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Products</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">find</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;"> orderBy</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> price</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">desc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#73DACA;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">asc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;"> }})</span></span></code></pre></div></li></ul><h2 id="livequery" tabindex="-1">liveQuery <a class="header-anchor" href="#livequery" aria-label="Permalink to &quot;liveQuery&quot;">​</a></h2><p>returns a result array based on the provided options</p><p>Arguments:</p><ul><li><p><strong>options</strong></p><ul><li><strong>limit</strong> - Determines the number of rows returned by the request, on the browser the default is 100 rows</li></ul><h4 id="example-5" tabindex="-1">example: <a class="header-anchor" href="#example-5" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Products</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">find</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#73DACA;">  limit</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> 10</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">  page</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> 2</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span></code></pre></div><ul><li><strong>page</strong> - Determines the page number that will be used to extract the data</li></ul><h4 id="example-6" tabindex="-1">example: <a class="header-anchor" href="#example-6" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Products</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">find</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#73DACA;">  limit</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> 10</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;"> page</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> 2</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span></span></code></pre></div><ul><li><strong>load</strong></li><li><strong>include</strong> - An option used in the <code>find</code> and <code>findFirst</code> methods to specify which related entities should be included when querying the source entity. It allows you to eagerly load related data to avoid N+1 query problems.</li></ul><h4 id="param-1" tabindex="-1">param: <a class="header-anchor" href="#param-1" aria-label="Permalink to &quot;param:&quot;">​</a></h4><p>An object specifying the related entities to include, their options, and filtering criteria.</p><p>Example usage:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span>const orders = await customerRepo.find({</span></span>
<span class="line"><span>  include: {</span></span>
<span class="line"><span>    // Include the &#39;tags&#39; relation for each customer.</span></span>
<span class="line"><span>    tags: true,</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>});</span></span></code></pre></div><p>In this example, the <code>tags</code> relation for each customer will be loaded and included in the query result.</p><h4 id="see-2" tabindex="-1">see: <a class="header-anchor" href="#see-2" aria-label="Permalink to &quot;see:&quot;">​</a></h4><ul><li>Relations.toMany</li><li>Relations.toOne</li><li>RelationOptions</li></ul><ul><li><strong>where</strong> - filters the data</li></ul><h4 id="example-7" tabindex="-1">example: <a class="header-anchor" href="#example-7" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#C0CAF5;"> taskRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">find</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;">where</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> completed</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;">false</span><span style="color:#9ABDF5;"> }})</span></span></code></pre></div><h4 id="see-3" tabindex="-1">see: <a class="header-anchor" href="#see-3" aria-label="Permalink to &quot;see:&quot;">​</a></h4><p>For more usage examples see <a href="https://remult.dev/docs/entityFilter.html" target="_blank" rel="noreferrer">EntityFilter</a></p><ul><li><strong>orderBy</strong> - Determines the order of items returned .</li></ul><h4 id="example-8" tabindex="-1">example: <a class="header-anchor" href="#example-8" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Products</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">find</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;"> orderBy</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">asc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;"> }})</span></span></code></pre></div><h4 id="example-9" tabindex="-1">example: <a class="header-anchor" href="#example-9" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Products</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">find</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;"> orderBy</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> price</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">desc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#73DACA;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">asc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;"> }})</span></span></code></pre></div></li></ul><h2 id="findfirst" tabindex="-1">findFirst <a class="header-anchor" href="#findfirst" aria-label="Permalink to &quot;findFirst&quot;">​</a></h2><p>returns the first item that matchers the <code>where</code> condition</p><h4 id="example-10" tabindex="-1">example: <a class="header-anchor" href="#example-10" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#C0CAF5;"> taskRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">findFirst</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;"> completed</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;">false</span><span style="color:#9ABDF5;"> })</span></span></code></pre></div><h4 id="example-11" tabindex="-1">example: <a class="header-anchor" href="#example-11" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#C0CAF5;"> taskRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">findFirst</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;"> completed</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;">false</span><span style="color:#9ABDF5;"> }</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;">{</span><span style="color:#73DACA;"> createIfNotFound</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> true</span><span style="color:#9ABDF5;"> })</span></span></code></pre></div><p>Arguments:</p><ul><li><strong>where</strong> - filters the data</li></ul><h4 id="see-4" tabindex="-1">see: <a class="header-anchor" href="#see-4" aria-label="Permalink to &quot;see:&quot;">​</a></h4><p><a href="http://remult.dev/docs/entityFilter.html" target="_blank" rel="noreferrer">EntityFilter</a></p><ul><li><p><strong>options</strong></p><ul><li><strong>load</strong></li><li><strong>include</strong> - An option used in the <code>find</code> and <code>findFirst</code> methods to specify which related entities should be included when querying the source entity. It allows you to eagerly load related data to avoid N+1 query problems.</li></ul><h4 id="param-2" tabindex="-1">param: <a class="header-anchor" href="#param-2" aria-label="Permalink to &quot;param:&quot;">​</a></h4><p>An object specifying the related entities to include, their options, and filtering criteria.</p><p>Example usage:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span>const orders = await customerRepo.find({</span></span>
<span class="line"><span>  include: {</span></span>
<span class="line"><span>    // Include the &#39;tags&#39; relation for each customer.</span></span>
<span class="line"><span>    tags: true,</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>});</span></span></code></pre></div><p>In this example, the <code>tags</code> relation for each customer will be loaded and included in the query result.</p><h4 id="see-5" tabindex="-1">see: <a class="header-anchor" href="#see-5" aria-label="Permalink to &quot;see:&quot;">​</a></h4><ul><li>Relations.toMany</li><li>Relations.toOne</li><li>RelationOptions</li></ul><ul><li><strong>where</strong> - filters the data</li></ul><h4 id="example-12" tabindex="-1">example: <a class="header-anchor" href="#example-12" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#C0CAF5;"> taskRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">find</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;">where</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> completed</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;">false</span><span style="color:#9ABDF5;"> }})</span></span></code></pre></div><h4 id="see-6" tabindex="-1">see: <a class="header-anchor" href="#see-6" aria-label="Permalink to &quot;see:&quot;">​</a></h4><p>For more usage examples see <a href="https://remult.dev/docs/entityFilter.html" target="_blank" rel="noreferrer">EntityFilter</a></p><ul><li><strong>orderBy</strong> - Determines the order of items returned .</li></ul><h4 id="example-13" tabindex="-1">example: <a class="header-anchor" href="#example-13" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Products</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">find</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;"> orderBy</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">asc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;"> }})</span></span></code></pre></div><h4 id="example-14" tabindex="-1">example: <a class="header-anchor" href="#example-14" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Products</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">find</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;"> orderBy</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> price</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">desc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#73DACA;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">asc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;"> }})</span></span></code></pre></div><ul><li><strong>useCache</strong> - determines if to cache the result, and return the results from cache.</li><li><strong>createIfNotFound</strong> - If set to true and an item is not found, it&#39;s created and returned</li></ul></li></ul><h2 id="findone" tabindex="-1">findOne <a class="header-anchor" href="#findone" aria-label="Permalink to &quot;findOne&quot;">​</a></h2><p>returns the first item that matchers the <code>where</code> condition</p><h4 id="example-15" tabindex="-1">example: <a class="header-anchor" href="#example-15" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#C0CAF5;"> taskRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">findOne</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;"> where</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;">{</span><span style="color:#73DACA;"> completed</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;">false</span><span style="color:#9ABDF5;"> }})</span></span></code></pre></div><h4 id="example-16" tabindex="-1">example: <a class="header-anchor" href="#example-16" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#C0CAF5;"> taskRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">findFirst</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;"> where</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;">{</span><span style="color:#73DACA;"> completed</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;">false</span><span style="color:#9ABDF5;"> }</span><span style="color:#89DDFF;">,</span><span style="color:#73DACA;"> createIfNotFound</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> true</span><span style="color:#9ABDF5;"> })</span></span></code></pre></div><p>Arguments:</p><ul><li><p><strong>options</strong></p><ul><li><strong>load</strong></li><li><strong>include</strong> - An option used in the <code>find</code> and <code>findFirst</code> methods to specify which related entities should be included when querying the source entity. It allows you to eagerly load related data to avoid N+1 query problems.</li></ul><h4 id="param-3" tabindex="-1">param: <a class="header-anchor" href="#param-3" aria-label="Permalink to &quot;param:&quot;">​</a></h4><p>An object specifying the related entities to include, their options, and filtering criteria.</p><p>Example usage:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span>const orders = await customerRepo.find({</span></span>
<span class="line"><span>  include: {</span></span>
<span class="line"><span>    // Include the &#39;tags&#39; relation for each customer.</span></span>
<span class="line"><span>    tags: true,</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>});</span></span></code></pre></div><p>In this example, the <code>tags</code> relation for each customer will be loaded and included in the query result.</p><h4 id="see-7" tabindex="-1">see: <a class="header-anchor" href="#see-7" aria-label="Permalink to &quot;see:&quot;">​</a></h4><ul><li>Relations.toMany</li><li>Relations.toOne</li><li>RelationOptions</li></ul><ul><li><strong>where</strong> - filters the data</li></ul><h4 id="example-17" tabindex="-1">example: <a class="header-anchor" href="#example-17" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#C0CAF5;"> taskRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">find</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;">where</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> completed</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;">false</span><span style="color:#9ABDF5;"> }})</span></span></code></pre></div><h4 id="see-8" tabindex="-1">see: <a class="header-anchor" href="#see-8" aria-label="Permalink to &quot;see:&quot;">​</a></h4><p>For more usage examples see <a href="https://remult.dev/docs/entityFilter.html" target="_blank" rel="noreferrer">EntityFilter</a></p><ul><li><strong>orderBy</strong> - Determines the order of items returned .</li></ul><h4 id="example-18" tabindex="-1">example: <a class="header-anchor" href="#example-18" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Products</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">find</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;"> orderBy</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">asc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;"> }})</span></span></code></pre></div><h4 id="example-19" tabindex="-1">example: <a class="header-anchor" href="#example-19" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Products</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">find</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;"> orderBy</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> price</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">desc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#73DACA;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">asc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;"> }})</span></span></code></pre></div><ul><li><strong>useCache</strong> - determines if to cache the result, and return the results from cache.</li><li><strong>createIfNotFound</strong> - If set to true and an item is not found, it&#39;s created and returned</li></ul></li></ul><h2 id="findid" tabindex="-1">findId <a class="header-anchor" href="#findid" aria-label="Permalink to &quot;findId&quot;">​</a></h2><p>returns the items that matches the id. If id is undefined | null, returns null</p><p>Arguments:</p><ul><li><p><strong>id</strong></p></li><li><p><strong>options</strong></p><ul><li><strong>load</strong></li><li><strong>include</strong> - An option used in the <code>find</code> and <code>findFirst</code> methods to specify which related entities should be included when querying the source entity. It allows you to eagerly load related data to avoid N+1 query problems.</li></ul><h4 id="param-4" tabindex="-1">param: <a class="header-anchor" href="#param-4" aria-label="Permalink to &quot;param:&quot;">​</a></h4><p>An object specifying the related entities to include, their options, and filtering criteria.</p><p>Example usage:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span>const orders = await customerRepo.find({</span></span>
<span class="line"><span>  include: {</span></span>
<span class="line"><span>    // Include the &#39;tags&#39; relation for each customer.</span></span>
<span class="line"><span>    tags: true,</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>});</span></span></code></pre></div><p>In this example, the <code>tags</code> relation for each customer will be loaded and included in the query result.</p><h4 id="see-9" tabindex="-1">see: <a class="header-anchor" href="#see-9" aria-label="Permalink to &quot;see:&quot;">​</a></h4><ul><li>Relations.toMany</li><li>Relations.toOne</li><li>RelationOptions</li></ul><ul><li><strong>useCache</strong> - determines if to cache the result, and return the results from cache.</li><li><strong>createIfNotFound</strong> - If set to true and an item is not found, it&#39;s created and returned</li></ul></li></ul><h2 id="groupby" tabindex="-1">groupBy <a class="header-anchor" href="#groupby" aria-label="Permalink to &quot;groupBy&quot;">​</a></h2><p>Performs an aggregation on the repository&#39;s entity type based on the specified options.</p><h4 id="returns" tabindex="-1">returns: <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;returns:&quot;">​</a></h4><p>The result of the aggregation.</p><h4 id="example-20" tabindex="-1">example: <a class="header-anchor" href="#example-20" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// Grouping by country and city, summing the salary field, and ordering by country and sum of salary:</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> results</span><span style="color:#89DDFF;"> =</span><span style="color:#BB9AF7;font-style:italic;"> await</span><span style="color:#C0CAF5;"> repo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">groupBy</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#73DACA;">  group</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">country</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">city</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">  sum</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">salary</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">  where</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#73DACA;">    salary</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span><span style="color:#41A6B5;"> $ne</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> 1000</span><span style="color:#9ABDF5;"> }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">  orderBy</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#73DACA;">    country</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">asc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">    salary</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#41A6B5;">      sum</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">desc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">    }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// Accessing the results:</span></span>
<span class="line"><span style="color:#C0CAF5;">console</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">log</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">results</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">country</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">;</span><span style="color:#51597D;font-style:italic;"> // &#39;uk&#39;</span></span>
<span class="line"><span style="color:#C0CAF5;">console</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">log</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">results</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">city</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">;</span><span style="color:#51597D;font-style:italic;"> // &#39;London&#39;</span></span>
<span class="line"><span style="color:#C0CAF5;">console</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">log</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">results</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">$count</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">;</span><span style="color:#51597D;font-style:italic;"> // count for London, UK</span></span>
<span class="line"><span style="color:#C0CAF5;">console</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">log</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">results</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">salary</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">sum</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">;</span><span style="color:#51597D;font-style:italic;"> // Sum of salaries for London, UK</span></span></code></pre></div><p>Arguments:</p><ul><li><p><strong>options</strong> - The options for the aggregation.</p><ul><li><strong>group</strong> - Fields to group by. The result will include one entry per unique combination of these fields.</li><li><strong>sum</strong> - Fields to sum. The result will include the sum of these fields for each group.</li><li><strong>avg</strong> - Fields to average. The result will include the average of these fields for each group.</li><li><strong>min</strong> - Fields to find the minimum value. The result will include the minimum value of these fields for each group.</li><li><strong>max</strong> - Fields to find the maximum value. The result will include the maximum value of these fields for each group.</li><li><strong>distinctCount</strong> - Fields to count distinct values. The result will include the distinct count of these fields for each group.</li><li><strong>where</strong> - Filters to apply to the query before aggregation.</li></ul><h4 id="see-10" tabindex="-1">see: <a class="header-anchor" href="#see-10" aria-label="Permalink to &quot;see:&quot;">​</a></h4><p>EntityFilter</p><ul><li><strong>orderBy</strong> - Fields and aggregates to order the results by. The result can be ordered by groupBy fields, sum fields, average fields, min fields, max fields, and distinctCount fields.</li></ul></li></ul><h2 id="aggregate" tabindex="-1">aggregate <a class="header-anchor" href="#aggregate" aria-label="Permalink to &quot;aggregate&quot;">​</a></h2><p>Performs an aggregation on the repository&#39;s entity type based on the specified options.</p><h4 id="returns-1" tabindex="-1">returns: <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;returns:&quot;">​</a></h4><p>The result of the aggregation.</p><h4 id="example-21" tabindex="-1">example: <a class="header-anchor" href="#example-21" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// Aggregating  (summing the salary field across all items):</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> totalSalary</span><span style="color:#89DDFF;"> =</span><span style="color:#BB9AF7;font-style:italic;"> await</span><span style="color:#C0CAF5;"> repo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">aggregate</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#73DACA;">  sum</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">salary</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C0CAF5;">console</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">log</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">totalSalary</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">salary</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">sum</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">;</span><span style="color:#51597D;font-style:italic;"> // Outputs the total sum of salaries</span></span></code></pre></div><p>Arguments:</p><ul><li><strong>options</strong> - The options for the aggregation.</li></ul><h2 id="query" tabindex="-1">query <a class="header-anchor" href="#query" aria-label="Permalink to &quot;query&quot;">​</a></h2><p>Fetches data from the repository in a way that is optimized for handling large sets of entity objects.</p><p>Unlike the <code>find</code> method, which returns an array, the <code>query</code> method returns an iterable <code>QueryResult</code> object. This allows for more efficient data handling, particularly in scenarios that involve paging through large amounts of data.</p><p>The method supports pagination and aggregation in a single request. When aggregation options are provided, the result will include both the items from the current page and the results of the requested aggregation.</p><p>The <code>query</code> method is designed for asynchronous iteration using the <code>for await</code> statement.</p><h4 id="example-22" tabindex="-1">example: <a class="header-anchor" href="#example-22" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// Basic usage with asynchronous iteration:</span></span>
<span class="line"><span style="color:#BB9AF7;">for</span><span style="color:#BB9AF7;"> await</span><span style="color:#9ABDF5;"> (</span><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> task</span><span style="color:#89DDFF;"> of</span><span style="color:#C0CAF5;"> taskRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">query</span><span style="color:#9ABDF5;">())</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">  // Perform some operation on each task</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div><h4 id="example-23" tabindex="-1">example: <a class="header-anchor" href="#example-23" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// Querying with pagination:</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> query</span><span style="color:#89DDFF;"> =</span><span style="color:#C0CAF5;"> taskRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">query</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#73DACA;">  where</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> completed</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> false</span><span style="color:#9ABDF5;"> }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">  pageSize</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> 100</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#BB9AF7;"> paginator</span><span style="color:#89DDFF;"> =</span><span style="color:#BB9AF7;font-style:italic;"> await</span><span style="color:#C0CAF5;"> query</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">paginator</span><span style="color:#9ABDF5;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C0CAF5;">console</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">log</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">Number of items on the current page:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> paginator</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">items</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">length</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C0CAF5;">console</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">log</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">Total pages:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> Math</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">ceil</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">paginator</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">aggregate</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">$count</span><span style="color:#89DDFF;"> /</span><span style="color:#FF9E64;"> 100</span><span style="color:#9ABDF5;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BB9AF7;">if</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">paginator</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">hasNextPage</span><span style="color:#9ABDF5;">)</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#C0CAF5;">  paginator</span><span style="color:#89DDFF;"> =</span><span style="color:#BB9AF7;font-style:italic;"> await</span><span style="color:#C0CAF5;"> paginator</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">nextPage</span><span style="color:#9ABDF5;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C0CAF5;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">log</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">Items on the next page:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> paginator</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">items</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">length</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span></code></pre></div><h4 id="example-24" tabindex="-1">example: <a class="header-anchor" href="#example-24" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// Querying with aggregation:</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> query</span><span style="color:#89DDFF;"> =</span><span style="color:#BB9AF7;font-style:italic;"> await</span><span style="color:#C0CAF5;"> repo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">query</span><span style="color:#9ABDF5;">({</span></span>
<span class="line"><span style="color:#73DACA;">  where</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> completed</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> false</span><span style="color:#9ABDF5;"> }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">  pageSize</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> 50</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">  aggregates</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#73DACA;">    sum</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">salary</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#73DACA;">    average</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">age</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#9ABDF5;">})</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#BB9AF7;"> paginator</span><span style="color:#89DDFF;"> =</span><span style="color:#BB9AF7;font-style:italic;"> await</span><span style="color:#C0CAF5;"> query</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">paginator</span><span style="color:#9ABDF5;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// Accessing paginated items</span></span>
<span class="line"><span style="color:#C0CAF5;">console</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">table</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">paginator</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">items</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// Accessing aggregation results</span></span>
<span class="line"><span style="color:#C0CAF5;">console</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">log</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">Total salary:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> paginator</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">aggregates</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">salary</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">sum</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">;</span><span style="color:#51597D;font-style:italic;"> // Sum of all salaries</span></span>
<span class="line"><span style="color:#C0CAF5;">console</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">log</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">Average age:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> paginator</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">aggregates</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">age</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">average</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">;</span><span style="color:#51597D;font-style:italic;">  // Average age</span></span></code></pre></div><p>Arguments:</p><ul><li><strong>options</strong></li></ul><h2 id="count" tabindex="-1">count <a class="header-anchor" href="#count" aria-label="Permalink to &quot;count&quot;">​</a></h2><p>Returns a count of the items matching the criteria.</p><h4 id="see-11" tabindex="-1">see: <a class="header-anchor" href="#see-11" aria-label="Permalink to &quot;see:&quot;">​</a></h4><p><a href="http://remult.dev/docs/entityFilter.html" target="_blank" rel="noreferrer">EntityFilter</a></p><h4 id="example-25" tabindex="-1">example: <a class="header-anchor" href="#example-25" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#C0CAF5;"> taskRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">count</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;"> completed</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;">false</span><span style="color:#9ABDF5;"> })</span></span></code></pre></div><p>Arguments:</p><ul><li><strong>where</strong> - filters the data</li></ul><h4 id="see-12" tabindex="-1">see: <a class="header-anchor" href="#see-12" aria-label="Permalink to &quot;see:&quot;">​</a></h4><p><a href="http://remult.dev/docs/entityFilter.html" target="_blank" rel="noreferrer">EntityFilter</a></p><h2 id="validate" tabindex="-1">validate <a class="header-anchor" href="#validate" aria-label="Permalink to &quot;validate&quot;">​</a></h2><p>Validates an item</p><h4 id="example-26" tabindex="-1">example: <a class="header-anchor" href="#example-26" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> error</span><span style="color:#89DDFF;"> =</span><span style="color:#C0CAF5;"> repo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">validate</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">task</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BB9AF7;">if</span><span style="color:#9ABDF5;"> (</span><span style="color:#C0CAF5;">error</span><span style="color:#9ABDF5;">){</span></span>
<span class="line"><span style="color:#7AA2F7;">  alert</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">error</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">message</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#7AA2F7;">  alert</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">error</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">modelState</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">title</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">;</span><span style="color:#51597D;font-style:italic;">//shows the specific error for the title field</span></span>
<span class="line"><span style="color:#9ABDF5;">}</span></span>
<span class="line"><span style="color:#51597D;font-style:italic;">// Can also be used to validate specific fields</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> error</span><span style="color:#89DDFF;"> =</span><span style="color:#C0CAF5;"> repo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">validate</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">task</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">title</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span></span></code></pre></div><p>Arguments:</p><ul><li><strong>item</strong></li><li><strong>fields</strong></li></ul><h2 id="save" tabindex="-1">save <a class="header-anchor" href="#save" aria-label="Permalink to &quot;save&quot;">​</a></h2><p>saves an item or item[] to the data source. It assumes that if an <code>id</code> value exists, it&#39;s an existing row - otherwise it&#39;s a new row</p><h4 id="example-27" tabindex="-1">example: <a class="header-anchor" href="#example-27" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#C0CAF5;"> taskRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">save</span><span style="color:#9ABDF5;">({</span><span style="color:#F7768E;font-weight:bold;">...</span><span style="color:#C0CAF5;">task</span><span style="color:#89DDFF;">,</span><span style="color:#73DACA;"> completed</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;">true</span><span style="color:#9ABDF5;"> })</span></span></code></pre></div><p>Arguments:</p><ul><li><strong>item</strong></li></ul><h2 id="insert" tabindex="-1">insert <a class="header-anchor" href="#insert" aria-label="Permalink to &quot;insert&quot;">​</a></h2><p>Insert an item or item[] to the data source</p><h4 id="example-28" tabindex="-1">example: <a class="header-anchor" href="#example-28" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#C0CAF5;"> taskRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">insert</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;">title</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">task a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">})</span></span></code></pre></div><h4 id="example-29" tabindex="-1">example: <a class="header-anchor" href="#example-29" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#BB9AF7;font-style:italic;">await</span><span style="color:#C0CAF5;"> taskRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">insert</span><span style="color:#9ABDF5;">([{</span><span style="color:#73DACA;">title</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">task a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">}</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;">title</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">task b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#73DACA;"> completed</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;">true</span><span style="color:#9ABDF5;"> }])</span></span></code></pre></div><p>Arguments:</p><ul><li><strong>item</strong></li></ul><h2 id="update" tabindex="-1">update <a class="header-anchor" href="#update" aria-label="Permalink to &quot;update&quot;">​</a></h2><p>Updates an item, based on its <code>id</code></p><h4 id="example-30" tabindex="-1">example: <a class="header-anchor" href="#example-30" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#C0CAF5;">taskRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">update</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">task</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">id</span><span style="color:#89DDFF;">,</span><span style="color:#9ABDF5;">{</span><span style="color:#F7768E;font-weight:bold;">...</span><span style="color:#C0CAF5;">task</span><span style="color:#89DDFF;">,</span><span style="color:#73DACA;">completed</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;">true</span><span style="color:#9ABDF5;">})</span></span></code></pre></div><p>Arguments:</p><ul><li><strong>id</strong></li><li><strong>item</strong></li></ul><h2 id="updatemany" tabindex="-1">updateMany <a class="header-anchor" href="#updatemany" aria-label="Permalink to &quot;updateMany&quot;">​</a></h2><p>Updates all items that match the <code>where</code> condition.</p><p>Arguments:</p><ul><li><p><strong>options</strong></p><ul><li><strong>where</strong> - filters the data</li></ul><h4 id="see-13" tabindex="-1">see: <a class="header-anchor" href="#see-13" aria-label="Permalink to &quot;see:&quot;">​</a></h4><p><a href="http://remult.dev/docs/entityFilter.html" target="_blank" rel="noreferrer">EntityFilter</a></p><ul><li><strong>set</strong></li></ul></li></ul><h2 id="upsert" tabindex="-1">upsert <a class="header-anchor" href="#upsert" aria-label="Permalink to &quot;upsert&quot;">​</a></h2><p>Inserts a new entity or updates an existing entity based on the specified criteria. If an entity matching the <code>where</code> condition is found, it will be updated with the provided <code>set</code> values. If no matching entity is found, a new entity will be created with the given data.</p><p>The <code>upsert</code> method ensures that a row exists based on the <code>where</code> condition: if no entity is found, a new one is created. It can handle both single and multiple upserts.</p><h4 id="returns-2" tabindex="-1">returns: <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;returns:&quot;">​</a></h4><p>A promise that resolves with the inserted or updated entity, or an array of entities if multiple options were provided.</p><h4 id="example-31" tabindex="-1">example: <a class="header-anchor" href="#example-31" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// Upserting a single entity: updates &#39;task a&#39; if it exists, otherwise creates it.</span></span>
<span class="line"><span style="color:#C0CAF5;">taskRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">upsert</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;"> where</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> title</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">task a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;"> }</span><span style="color:#89DDFF;">,</span><span style="color:#73DACA;"> set</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> completed</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> true</span><span style="color:#9ABDF5;"> }</span><span style="color:#9ABDF5;"> })</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h4 id="example-32" tabindex="-1">example: <a class="header-anchor" href="#example-32" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// Upserting a single entity without additional \`set\` values: ensures that a row with the title &#39;task a&#39; exists.</span></span>
<span class="line"><span style="color:#C0CAF5;">taskRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">upsert</span><span style="color:#9ABDF5;">({</span><span style="color:#73DACA;"> where</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> title</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">task a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;"> }</span><span style="color:#9ABDF5;"> })</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h4 id="example-33" tabindex="-1">example: <a class="header-anchor" href="#example-33" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#51597D;font-style:italic;">// Upserting multiple entities: ensures both &#39;task a&#39; and &#39;task b&#39; exist, updating their \`completed\` status if found.</span></span>
<span class="line"><span style="color:#C0CAF5;">taskRepo</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">upsert</span><span style="color:#9ABDF5;">([</span></span>
<span class="line"><span style="color:#9ABDF5;">  {</span><span style="color:#73DACA;"> where</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> title</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">task a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;"> }</span><span style="color:#89DDFF;">,</span><span style="color:#73DACA;"> set</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> completed</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> true</span><span style="color:#9ABDF5;"> }</span><span style="color:#9ABDF5;"> }</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#9ABDF5;">  {</span><span style="color:#73DACA;"> where</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> title</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#9ECE6A;">task b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;"> }</span><span style="color:#89DDFF;">,</span><span style="color:#73DACA;"> set</span><span style="color:#89DDFF;">:</span><span style="color:#9ABDF5;"> {</span><span style="color:#73DACA;"> completed</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> true</span><span style="color:#9ABDF5;"> }</span><span style="color:#9ABDF5;"> }</span></span>
<span class="line"><span style="color:#9ABDF5;">])</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>Arguments:</p><ul><li><strong>options</strong> - The options that define the <code>where</code> condition and the <code>set</code> values. Can be a single object or an array of objects.</li></ul><h2 id="delete" tabindex="-1">delete <a class="header-anchor" href="#delete" aria-label="Permalink to &quot;delete&quot;">​</a></h2><p>Deletes an Item</p><p>Arguments:</p><ul><li><strong>id</strong></li></ul><h2 id="deletemany" tabindex="-1">deleteMany <a class="header-anchor" href="#deletemany" aria-label="Permalink to &quot;deleteMany&quot;">​</a></h2><p>Deletes all items that match the <code>where</code> condition.</p><p>Arguments:</p><ul><li><p><strong>options</strong></p><ul><li><strong>where</strong> - filters the data</li></ul><h4 id="see-14" tabindex="-1">see: <a class="header-anchor" href="#see-14" aria-label="Permalink to &quot;see:&quot;">​</a></h4><p><a href="http://remult.dev/docs/entityFilter.html" target="_blank" rel="noreferrer">EntityFilter</a></p></li></ul><h2 id="create" tabindex="-1">create <a class="header-anchor" href="#create" aria-label="Permalink to &quot;create&quot;">​</a></h2><p>Creates an instance of an item. It&#39;ll not be saved to the data source unless <code>save</code> or <code>insert</code> will be called.</p><p>It&#39;s useful to start or reset a form taking your entity default values into account.</p><p>Arguments:</p><ul><li><strong>item</strong></li></ul><h2 id="tojson" tabindex="-1">toJson <a class="header-anchor" href="#tojson" aria-label="Permalink to &quot;toJson&quot;">​</a></h2><p>Translates an entity to a json object.</p><ul><li>Ready to be sent to the client <em>(Date &amp; co are managed)</em></li><li>Strip out fields that are not allowed to be sent to the client! Check: <a href="http://remult.dev/docs/ref_field#includeinapi" target="_blank" rel="noreferrer">Field.includeInApi</a></li></ul><h4 id="example-34" tabindex="-1">example: <a class="header-anchor" href="#example-34" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> tasks</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Task</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">toJson</span><span style="color:#9ABDF5;">(</span><span style="color:#7AA2F7;">repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Task</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">find</span><span style="color:#9ABDF5;">())</span></span></code></pre></div><p>Arguments:</p><ul><li><strong>item</strong> - Can be an array or a single entity, awaitable or not</li></ul><h2 id="fromjson" tabindex="-1">fromJson <a class="header-anchor" href="#fromjson" aria-label="Permalink to &quot;fromJson&quot;">​</a></h2><p>Translates a json object to an item instance.</p><h4 id="example-35" tabindex="-1">example: <a class="header-anchor" href="#example-35" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> data</span><span style="color:#89DDFF;"> =</span><span style="color:#51597D;font-style:italic;"> // from the server</span></span>
<span class="line"><span style="color:#9D7CD8;font-style:italic;">const</span><span style="color:#BB9AF7;"> tasks</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> repo</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">Task</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">fromJson</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">data</span><span style="color:#9ABDF5;">)</span></span></code></pre></div><p>Arguments:</p><ul><li><strong>data</strong> - Can be an array or a single element</li><li><strong>isNew</strong> - To help the creation of the instance</li></ul><h2 id="getentityref" tabindex="-1">getEntityRef <a class="header-anchor" href="#getentityref" aria-label="Permalink to &quot;getEntityRef&quot;">​</a></h2><p>returns an <code>entityRef</code> for an item returned by <code>create</code>, <code>find</code> etc...</p><p>Arguments:</p><ul><li><strong>item</strong></li></ul><h2 id="fields" tabindex="-1">fields <a class="header-anchor" href="#fields" aria-label="Permalink to &quot;fields&quot;">​</a></h2><p>Provides information about the fields of the Repository&#39;s entity</p><h4 id="example-36" tabindex="-1">example: <a class="header-anchor" href="#example-36" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6;" tabindex="0"><code><span class="line"><span style="color:#C0CAF5;">console</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">log</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">repo</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">fields</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">title</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">label</span><span style="color:#9ABDF5;">)</span><span style="color:#51597D;font-style:italic;"> // displays the label of a specific field</span></span>
<span class="line"><span style="color:#C0CAF5;">console</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">log</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">repo</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">fields</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">title</span><span style="color:#89DDFF;">.</span><span style="color:#7DCFFF;">options</span><span style="color:#9ABDF5;">)</span><span style="color:#51597D;font-style:italic;">// writes the options that were defined for this field</span></span></code></pre></div><h2 id="metadata" tabindex="-1">metadata <a class="header-anchor" href="#metadata" aria-label="Permalink to &quot;metadata&quot;">​</a></h2><p>The metadata for the <code>entity</code></p><h4 id="see-15" tabindex="-1">See: <a class="header-anchor" href="#see-15" aria-label="Permalink to &quot;See:&quot;">​</a></h4><p><a href="https://remult.dev/docs/ref_entitymetadata.html" target="_blank" rel="noreferrer">EntityMetadata</a></p><h2 id="addeventlistener" tabindex="-1">addEventListener <a class="header-anchor" href="#addeventlistener" aria-label="Permalink to &quot;addEventListener&quot;">​</a></h2><ul><li><strong>addEventListener</strong></li></ul><p>Arguments:</p><ul><li><strong>listener</strong></li></ul><h2 id="relations" tabindex="-1">relations <a class="header-anchor" href="#relations" aria-label="Permalink to &quot;relations&quot;">​</a></h2><ul><li><strong>relations</strong></li></ul><p>Arguments:</p><ul><li><strong>item</strong></li></ul>`,161)]))}const D=a(o,[["render",t]]);export{F as __pageData,D as default};
