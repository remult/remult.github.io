import{_ as s,c as a,o as n,a5 as l}from"./chunks/framework.C7bC4sbb.js";const u=JSON.parse('{"title":"SvelteKit","description":"","frontmatter":{},"headers":[],"relativePath":"docs/installation/framework/sveltekit.md","filePath":"docs/installation/framework/sveltekit.md","lastUpdated":1737661368000}'),o={name:"docs/installation/framework/sveltekit.md"},p=l(`<h1 id="sveltekit" tabindex="-1">SvelteKit <a class="header-anchor" href="#sveltekit" aria-label="Permalink to &quot;SvelteKit&quot;">​</a></h1><h2 id="create-a-sveltekit-project" tabindex="-1">Create a SvelteKit Project <a class="header-anchor" href="#create-a-sveltekit-project" aria-label="Permalink to &quot;Create a SvelteKit Project&quot;">​</a></h2><p>To create a new SvelteKit project, run the following command:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npx</span><span style="color:#CE9178;"> sv@latest</span><span style="color:#CE9178;"> create</span><span style="color:#CE9178;"> remult-sveltekit-todo</span></span></code></pre></div><p>During the setup, answer the prompts as follows:</p><ol><li><strong>Which Svelte app template?</strong>: ... <code>minimal</code> Project</li><li><strong>Add type checking with TypeScript?</strong> ... Yes, using <code>TypeScript</code> syntax</li><li><strong>Select additional options</strong>: ... We didn&#39;t select anything for this tutorial. Feel free to adapt it to your needs.</li><li><strong>Which package manager?</strong>: ... We took <code>npm</code>, if you perfer others, feel free.</li></ol><p>Once the setup is complete, navigate into the project directory:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#CE9178;"> remult-sveltekit-todo</span></span></code></pre></div><h2 id="install-required-packages-and-remult" tabindex="-1">Install Required Packages and Remult <a class="header-anchor" href="#install-required-packages-and-remult" aria-label="Permalink to &quot;Install Required Packages and Remult&quot;">​</a></h2><p>Install Remult and any necessary dependencies by running:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npm</span><span style="color:#CE9178;"> install</span><span style="color:#CE9178;"> remult</span><span style="color:#569CD6;"> --save-dev</span></span></code></pre></div><h2 id="bootstrap-remult" tabindex="-1">Bootstrap Remult <a class="header-anchor" href="#bootstrap-remult" aria-label="Permalink to &quot;Bootstrap Remult&quot;">​</a></h2><p>To set up Remult in your SvelteKit project:</p><ol><li>Create your remult <code>api</code></li></ol><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-k_6bw" id="tab-IM0c5fM" checked><label for="tab-IM0c5fM">src/server/api.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">remultSveltekit</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult/remult-sveltekit&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> api</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">remultSveltekit</span><span style="color:#D4D4D4;">({})</span></span></code></pre></div></div></div><ol start="2"><li>Create a remult <code>api route</code></li></ol><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-0WMXx" id="tab-zPC7gWq" checked><label for="tab-zPC7gWq">src/routes/api/[...remult]/+server.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">api</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;../../../server/api&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">GET</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">POST</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">PUT</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">DELETE</span><span style="color:#D4D4D4;"> } = </span><span style="color:#9CDCFE;">api</span></span></code></pre></div></div></div><h2 id="final-tweaks" tabindex="-1">Final Tweaks <a class="header-anchor" href="#final-tweaks" aria-label="Permalink to &quot;Final Tweaks&quot;">​</a></h2><p>Remult uses TypeScript decorators to enhance classes into entities. To enable decorators in your SvelteKit project, modify the <code>tsconfig.json</code> file by adding the following to the <code>compilerOptions</code> section:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki dark-plus has-diff vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#9CDCFE;">  &quot;compilerOptions&quot;</span><span style="color:#D4D4D4;">: {</span></span>
<span class="line diff add"><span style="color:#9CDCFE;">    &quot;experimentalDecorators&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">true</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><h2 id="run-the-app" tabindex="-1">Run the App <a class="header-anchor" href="#run-the-app" aria-label="Permalink to &quot;Run the App&quot;">​</a></h2><p>To start the development server, run the following command:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npm</span><span style="color:#CE9178;"> run</span><span style="color:#CE9178;"> dev</span></span></code></pre></div><p>Your SvelteKit app will be available at <a href="http://localhost:5173" target="_blank" rel="noreferrer">http://localhost:5173</a>.</p><p>Your SvelteKit project with Remult is now up and running.</p><h1 id="extra" tabindex="-1">Extra <a class="header-anchor" href="#extra" aria-label="Permalink to &quot;Extra&quot;">​</a></h1><h2 id="extra-remult-in-other-sveltekit-routes" tabindex="-1">Extra - Remult in other SvelteKit routes <a class="header-anchor" href="#extra-remult-in-other-sveltekit-routes" aria-label="Permalink to &quot;Extra - Remult in other SvelteKit routes&quot;">​</a></h2><p>To enable remult across all sveltekit route</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-1WPjL" id="tab-4C_f32I" checked><label for="tab-4C_f32I">src/hooks.server.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">sequence</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;@sveltejs/kit/hooks&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">api</span><span style="color:#C586C0;"> as</span><span style="color:#9CDCFE;"> handleRemult</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;./server/api&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> handle</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">sequence</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#6A9955;">  // Manage your sequence of handlers here</span></span>
<span class="line"><span style="color:#9CDCFE;">  handleRemult</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span></code></pre></div></div></div><h2 id="extra-universal-load-ssr" tabindex="-1">Extra - Universal load &amp; SSR <a class="header-anchor" href="#extra-universal-load-ssr" aria-label="Permalink to &quot;Extra - Universal load &amp; SSR&quot;">​</a></h2><p>To Use remult in ssr <code>PageLoad</code> - this will leverage the <code>event</code>&#39;s fetch to load data on the server without reloading it on the frontend, and abiding to all api rules even when it runs on the server</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-f5mTk" id="tab-cP7DXV-" checked><label for="tab-cP7DXV-">src/routes/+page.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#C586C0;"> type</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">PageLoad</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;./$types&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> load</span><span style="color:#D4D4D4;"> = (</span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">  // Instruct remult to use the special svelte fetch</span></span>
<span class="line"><span style="color:#6A9955;">  // Like this univeral load will work in SSR &amp; CSR</span></span>
<span class="line"><span style="color:#9CDCFE;">  remult</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">useFetch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">fetch</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#DCDCAA;"> repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">}) </span><span style="color:#C586C0;">satisfies</span><span style="color:#4EC9B0;"> PageLoad</span></span></code></pre></div></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can add this in <code>+layout.ts</code> as well and all routes <strong>under</strong> will have the correct fetch out of the box.</p></div><h2 id="extra-server-load" tabindex="-1">Extra - Server load <a class="header-anchor" href="#extra-server-load" aria-label="Permalink to &quot;Extra - Server load&quot;">​</a></h2><p>If you return a remult entity from the <code>load</code> function of a <code>+page.server.ts</code>, SvelteKit will complain and show this error:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">Error:</span><span style="color:#CE9178;"> Data</span><span style="color:#CE9178;"> returned</span><span style="color:#CE9178;"> from</span><span style="color:#CE9178;"> \`</span><span style="color:#DCDCAA;">load</span><span style="color:#CE9178;">\`</span><span style="color:#C586C0;"> while</span><span style="color:#DCDCAA;"> rendering</span><span style="color:#CE9178;"> /</span><span style="color:#CE9178;"> is</span><span style="color:#CE9178;"> not</span><span style="color:#CE9178;"> serializable:</span></span>
<span class="line"><span style="color:#DCDCAA;">Cannot</span><span style="color:#CE9178;"> stringify</span><span style="color:#CE9178;"> arbitrary</span><span style="color:#CE9178;"> non-POJOs</span><span style="color:#D4D4D4;"> (data.tasks[0])</span></span></code></pre></div><p>To fix this, you can use <code>repo(Entity).toJson()</code> in the server load function and <code>repo(Entity).fromJson()</code> in the .svelte file to serialize and deserialize well the entity.</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-UnynJ" id="tab-qldGD8f" checked><label for="tab-qldGD8f">src/routes/+page.server.ts</label><input type="radio" name="group-UnynJ" id="tab-V6Aacpr"><label for="tab-V6Aacpr">src/routes/+page.svelte</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">repo</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#C586C0;"> type</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">PageServerLoad</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;./$types&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;../demo/todo/Task&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> load</span><span style="color:#D4D4D4;"> = (</span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> tasks</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">toJson</span><span style="color:#D4D4D4;">(</span><span style="color:#C586C0;">await</span><span style="color:#DCDCAA;"> repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">())</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    tasks</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}) </span><span style="color:#C586C0;">satisfies</span><span style="color:#4EC9B0;"> PageServerLoad</span></span></code></pre></div><div class="language-svelte"><button title="Copy Code" class="copy"></button><span class="lang">svelte</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> lang</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;ts&quot;</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#C586C0;">  import</span><span style="color:#C586C0;"> type</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">PageData</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;./$types&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">  import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;../demo/todo/Task&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">  import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">repo</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;remult&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  let</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;"> }: { </span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">PageData</span><span style="color:#D4D4D4;"> } = $</span><span style="color:#DCDCAA;">props</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> tasks</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">fromJson</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">tasks</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></code></pre></div></div></div><hr><h4 id="since-sveltejs-kit-2-11-0-there-is-a-new-feature-universal-hooks-transport" tabindex="-1">Since <code>@sveltejs/kit@2.11.0</code>, there is a new feature: <a href="https://svelte.dev/docs/kit/hooks#Universal-hooks-transport" target="_blank" rel="noreferrer">Universal-hooks-transport</a> <a class="header-anchor" href="#since-sveltejs-kit-2-11-0-there-is-a-new-feature-universal-hooks-transport" aria-label="Permalink to &quot;Since \`@sveltejs/kit@2.11.0\`, there is a new feature: [Universal-hooks-transport](https://svelte.dev/docs/kit/hooks#Universal-hooks-transport)&quot;">​</a></h4><p>With this new feature, you can get rid of <code>repo(Entity).toJson()</code> and <code>repo(Entity).fromJson()</code> thanks to this file: <code>hooks.ts</code>.</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-y7lJq" id="tab-4iygzOV" checked><label for="tab-4iygzOV">src/hooks.ts</label><input type="radio" name="group-y7lJq" id="tab-xxJiWnu"><label for="tab-xxJiWnu">src/routes/+page.server.ts</label><input type="radio" name="group-y7lJq" id="tab-iYFojlY"><label for="tab-iYFojlY">src/routes/+page.svelte</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">repo</span><span style="color:#D4D4D4;">, </span><span style="color:#C586C0;">type</span><span style="color:#9CDCFE;"> ClassType</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;./demo/todo/Task&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#C586C0;"> type</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Transport</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;@sveltejs/kit&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">api</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;./server/api&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// You can have:</span></span>
<span class="line"><span style="color:#6A9955;">// A/ a local entity array to work only these ones (like here)</span></span>
<span class="line"><span style="color:#6A9955;">//  or</span></span>
<span class="line"><span style="color:#6A9955;">// B/ import a global entity array that will be</span></span>
<span class="line"><span style="color:#6A9955;">//    shared between backend and frontend (not in ./server/api.ts)</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> entities</span><span style="color:#D4D4D4;"> = [</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> transport</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Transport</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  remultTransport:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">    encode</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">any</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">      for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> index</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">entities</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">++) {</span></span>
<span class="line"><span style="color:#569CD6;">        const</span><span style="color:#4FC1FF;"> element</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">entities</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">] </span><span style="color:#C586C0;">as</span><span style="color:#4EC9B0;"> ClassType</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">any</span><span style="color:#D4D4D4;">&gt;</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">value</span><span style="color:#569CD6;"> instanceof</span><span style="color:#4EC9B0;"> element</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">          return</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">            ...</span><span style="color:#DCDCAA;">repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">element</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">toJson</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#9CDCFE;">            entity_key:</span><span style="color:#DCDCAA;"> repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">element</span><span style="color:#D4D4D4;">).</span><span style="color:#9CDCFE;">metadata</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">          }</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">      }</span></span>
<span class="line"><span style="color:#D4D4D4;">    },</span></span>
<span class="line"><span style="color:#DCDCAA;">    decode</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">any</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">      for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> index</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">entities</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">++) {</span></span>
<span class="line"><span style="color:#569CD6;">        const</span><span style="color:#4FC1FF;"> element</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">entities</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">] </span><span style="color:#C586C0;">as</span><span style="color:#4EC9B0;"> ClassType</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">any</span><span style="color:#D4D4D4;">&gt;</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">entity_key</span><span style="color:#D4D4D4;"> === </span><span style="color:#DCDCAA;">repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">element</span><span style="color:#D4D4D4;">).</span><span style="color:#9CDCFE;">metadata</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">          return</span><span style="color:#DCDCAA;"> repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">element</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">fromJson</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">      }</span></span>
<span class="line"><span style="color:#D4D4D4;">    },</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus has-diff vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">repo</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#C586C0;"> type</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">PageServerLoad</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;./$types&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;../demo/todo/Task&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> load</span><span style="color:#D4D4D4;"> = (</span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line diff remove"><span style="color:#6A9955;">  // const tasks = repo(Task).toJson(await repo(Task).find())</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> tasks</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#DCDCAA;"> repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    tasks</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}) </span><span style="color:#C586C0;">satisfies</span><span style="color:#4EC9B0;"> PageServerLoad</span></span></code></pre></div><div class="language-svelte"><button title="Copy Code" class="copy"></button><span class="lang">svelte</span><pre class="shiki dark-plus has-diff vp-code" tabindex="0"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> lang</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;ts&quot;</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#C586C0;">  import</span><span style="color:#C586C0;"> type</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">PageData</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;./$types&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">  import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">repo</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;remult&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  let</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;"> }: { </span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">PageData</span><span style="color:#D4D4D4;"> } = $</span><span style="color:#DCDCAA;">props</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line diff remove"><span style="color:#6A9955;">  // let tasks = repo(Task).fromJson(data.tasks)</span></span>
<span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> tasks</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">tasks</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></code></pre></div></div></div><h2 id="extra-svelte-5-reactivity" tabindex="-1">Extra - Svelte 5 &amp; Reactivity <a class="header-anchor" href="#extra-svelte-5-reactivity" aria-label="Permalink to &quot;Extra - Svelte 5 &amp; Reactivity&quot;">​</a></h2><p>Remult is fully compatible with Svelte 5, Rune, and Reactivity.</p><p>To take full advantage of it, add this snippet:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-xHKuE" id="tab-z3-tm3K" checked><label for="tab-z3-tm3K">src/routes/+layout.svelte</label></div><div class="blocks"><div class="language-html active"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> lang</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;ts&quot;</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#C586C0;">  import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Remult</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult&#39;</span></span>
<span class="line"><span style="color:#C586C0;">  import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">createSubscriber</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;svelte/reactivity&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // To be done once in the application.</span></span>
<span class="line"><span style="color:#569CD6;">  function</span><span style="color:#DCDCAA;"> initRemultSvelteReactivity</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#9CDCFE;">    Remult</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">entityRefInit</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">      let</span><span style="color:#DCDCAA;"> update</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {}</span></span>
<span class="line"><span style="color:#569CD6;">      let</span><span style="color:#9CDCFE;"> s</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">createSubscriber</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">u</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">        update</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">u</span></span>
<span class="line"><span style="color:#D4D4D4;">      })</span></span>
<span class="line"><span style="color:#9CDCFE;">      x</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">subscribe</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#DCDCAA;">        reportObserved</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> s</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#DCDCAA;">        reportChanged</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> update</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">      })</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#DCDCAA;">  initRemultSvelteReactivity</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></code></pre></div></div></div><p>Then you can use <code>$state</code>, <code>$derived</code> like any other places</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-YAfyJ" id="tab-i4UhknI" checked><label for="tab-i4UhknI">src/routes/+page.svelte</label></div><div class="blocks"><div class="language-html active"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> lang</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;ts&quot;</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#6A9955;">  // Prepare a new task</span></span>
<span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> editingTask</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">$state</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">create</span><span style="color:#D4D4D4;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // Check if the form has empty fields</span></span>
<span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> formHasEmpty</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">$derived</span><span style="color:#D4D4D4;">(!</span><span style="color:#9CDCFE;">editingTask</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">editingTask</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">title</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> === </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // Clone the task to edit</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#DCDCAA;"> editTask</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Task</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    editingTask</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">getEntityRef</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">clone</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></code></pre></div></div></div>`,48),e=[p];function t(r,c,D,y,i,C){return n(),a("div",null,e)}const v=s(o,[["render",t]]);export{u as __pageData,v as default};
