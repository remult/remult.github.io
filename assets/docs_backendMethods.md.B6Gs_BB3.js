import{_ as i,c as t,o as a,L as e}from"./chunks/framework.DdPzwmCl.js";const c=JSON.parse('{"title":"Backend Methods","description":"","frontmatter":{},"headers":[],"relativePath":"docs/backendMethods.md","filePath":"docs/backendMethods.md","lastUpdated":1739657426000}'),n={name:"docs/backendMethods.md"};function h(l,s,k,p,r,o){return a(),t("div",null,s[0]||(s[0]=[e(`<h1 id="backend-methods" tabindex="-1">Backend Methods <a class="header-anchor" href="#backend-methods" aria-label="Permalink to &quot;Backend Methods&quot;">​</a></h1><p>Backend methods run on the backend and are used to improve performance, execute server-only code (e.g., sending emails), or perform operations not accessible through the API.</p><h2 id="static-backend-methods" tabindex="-1">Static Backend Methods <a class="header-anchor" href="#static-backend-methods" aria-label="Permalink to &quot;Static Backend Methods&quot;">​</a></h2><p>Static backend methods represent the most straightforward type, transmitting their parameters to the backend and delivering their outcome to the frontend.</p><ol><li><strong>Define the Backend Method:</strong></li></ol><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes tokyo-night github-light vp-code" style="--shiki-dark:#a9b1d6;--shiki-light:#24292e;--shiki-dark-bg:#1a1b26;--shiki-light-bg:#fff;" tabindex="0"><code><span class="line"><span style="--shiki-dark:#7DCFFF;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;"> { </span><span style="--shiki-dark:#0DB9D7;--shiki-light:#24292E;">BackendMethod</span><span style="--shiki-dark:#89DDFF;--shiki-light:#24292E;">,</span><span style="--shiki-dark:#0DB9D7;--shiki-light:#24292E;"> repo</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;"> }</span><span style="--shiki-dark:#7DCFFF;--shiki-light:#D73A49;"> from</span><span style="--shiki-dark:#89DDFF;--shiki-light:#032F62;"> &#39;</span><span style="--shiki-dark:#9ECE6A;--shiki-light:#032F62;">remult</span><span style="--shiki-dark:#89DDFF;--shiki-light:#032F62;">&#39;</span></span>
<span class="line"><span style="--shiki-dark:#7DCFFF;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;"> { </span><span style="--shiki-dark:#0DB9D7;--shiki-light:#24292E;">Task</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;"> }</span><span style="--shiki-dark:#7DCFFF;--shiki-light:#D73A49;"> from</span><span style="--shiki-dark:#89DDFF;--shiki-light:#032F62;"> &#39;</span><span style="--shiki-dark:#9ECE6A;--shiki-light:#032F62;">./Task</span><span style="--shiki-dark:#89DDFF;--shiki-light:#032F62;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7DCFFF;--shiki-light:#D73A49;">export</span><span style="--shiki-dark:#BB9AF7;--shiki-light:#D73A49;"> class</span><span style="--shiki-dark:#C0CAF5;--shiki-light:#6F42C1;"> TasksController</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-dark:#51597D;--shiki-dark-font-style:italic;--shiki-light:#6A737D;--shiki-light-font-style:inherit;">  /**</span></span>
<span class="line"><span style="--shiki-dark:#51597D;--shiki-dark-font-style:italic;--shiki-light:#6A737D;--shiki-light-font-style:inherit;">   * Sets the completion status of all tasks.</span></span>
<span class="line"><span style="--shiki-dark:#51597D;--shiki-dark-font-style:italic;--shiki-light:#6A737D;--shiki-light-font-style:inherit;">   * </span><span style="--shiki-dark:#646E9C;--shiki-dark-font-style:italic;--shiki-light:#D73A49;--shiki-light-font-style:inherit;">@param</span><span style="--shiki-dark:#51597D;--shiki-dark-font-style:italic;--shiki-light:#6F42C1;--shiki-light-font-style:inherit;"> {</span><span style="--shiki-dark:#646E9C;--shiki-dark-font-style:italic;--shiki-light:#6F42C1;--shiki-light-font-style:inherit;">boolean</span><span style="--shiki-dark:#51597D;--shiki-dark-font-style:italic;--shiki-light:#6F42C1;--shiki-light-font-style:inherit;">}</span><span style="--shiki-dark:#5A638C;--shiki-dark-font-style:italic;--shiki-light:#24292E;--shiki-light-font-style:inherit;"> completed</span><span style="--shiki-dark:#51597D;--shiki-dark-font-style:italic;--shiki-light:#6A737D;--shiki-light-font-style:inherit;"> - The completion status to set for all tasks.</span></span>
<span class="line"><span style="--shiki-dark:#51597D;--shiki-dark-font-style:italic;--shiki-light:#6A737D;--shiki-light-font-style:inherit;">   */</span></span>
<span class="line"><span style="--shiki-dark:#89DDFF;--shiki-light:#24292E;">  @</span><span style="--shiki-dark:#7AA2F7;--shiki-light:#6F42C1;">BackendMethod</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;">({</span><span style="--shiki-dark:#73DACA;--shiki-light:#24292E;"> allowed</span><span style="--shiki-dark:#89DDFF;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#FF9E64;--shiki-light:#005CC5;"> true</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;"> })</span></span>
<span class="line"><span style="--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic;--shiki-light:#D73A49;--shiki-light-font-style:inherit;">  static</span><span style="--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic;--shiki-light:#D73A49;--shiki-light-font-style:inherit;"> async</span><span style="--shiki-dark:#7AA2F7;--shiki-light:#6F42C1;"> setAll</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#E0AF68;--shiki-light:#E36209;">completed</span><span style="--shiki-dark:#89DDFF;--shiki-light:#D73A49;">:</span><span style="--shiki-dark:#0DB9D7;--shiki-light:#005CC5;"> boolean</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;">)</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic;--shiki-light:#D73A49;--shiki-light-font-style:inherit;">    const</span><span style="--shiki-dark:#BB9AF7;--shiki-light:#005CC5;"> taskRepo</span><span style="--shiki-dark:#89DDFF;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#7AA2F7;--shiki-light:#6F42C1;"> repo</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#C0CAF5;--shiki-light:#24292E;">Task</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#BB9AF7;--shiki-light:#D73A49;">    for</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;"> (</span><span style="--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic;--shiki-light:#D73A49;--shiki-light-font-style:inherit;">const</span><span style="--shiki-dark:#BB9AF7;--shiki-light:#005CC5;"> task</span><span style="--shiki-dark:#89DDFF;--shiki-light:#D73A49;"> of</span><span style="--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic;--shiki-light:#D73A49;--shiki-light-font-style:inherit;"> await</span><span style="--shiki-dark:#C0CAF5;--shiki-light:#24292E;"> taskRepo</span><span style="--shiki-dark:#89DDFF;--shiki-light:#24292E;">.</span><span style="--shiki-dark:#7AA2F7;--shiki-light:#6F42C1;">find</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;">()) {</span></span>
<span class="line"><span style="--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic;--shiki-light:#D73A49;--shiki-light-font-style:inherit;">      await</span><span style="--shiki-dark:#C0CAF5;--shiki-light:#24292E;"> taskRepo</span><span style="--shiki-dark:#89DDFF;--shiki-light:#24292E;">.</span><span style="--shiki-dark:#7AA2F7;--shiki-light:#6F42C1;">save</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;">({ </span><span style="--shiki-dark:#F7768E;--shiki-dark-font-weight:bold;--shiki-light:#D73A49;--shiki-light-font-weight:inherit;">...</span><span style="--shiki-dark:#C0CAF5;--shiki-light:#24292E;">task</span><span style="--shiki-dark:#89DDFF;--shiki-light:#24292E;">,</span><span style="--shiki-dark:#C0CAF5;--shiki-light:#24292E;"> completed</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;"> })</span></span>
<span class="line"><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;">    }</span></span>
<span class="line"><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;">  }</span></span>
<span class="line"><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;">}</span></span></code></pre></div><p>Each controller can house one or more backend methods, each serving distinct purposes tailored to your application&#39;s needs. In the provided example, the <code>TasksController</code> class contains a single backend method named <code>setAll</code>, responsible for setting the completion status of all tasks.</p><p>The method name, such as <code>setAll</code>, serves as the URL for the corresponding REST endpoint on the backend server. It&#39;s worth noting that you can configure a prefix for these endpoints using the <code>apiPrefix</code> option, providing flexibility in structuring your backend API routes.</p><p>The allowed: true parameter signifies that the backend method can be invoked by anyone. Alternatively, you can customize the authorization settings for finer control over who can access the method.</p><p>For instance, setting allow: Allow.authenticated restricts access to authenticated users only, ensuring that only logged-in users can utilize the method.</p><p>Similarly, specifying allow: &#39;admin&#39; limits access to users with administrative privileges, granting access exclusively to administrators.</p><p>These options offer granular control over authorization, allowing you to tailor access permissions based on your application&#39;s specific requirements and security considerations.</p><ol start="2"><li><strong>Register the Controller:</strong></li></ol><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes tokyo-night github-light vp-code" style="--shiki-dark:#a9b1d6;--shiki-light:#24292e;--shiki-dark-bg:#1a1b26;--shiki-light-bg:#fff;" tabindex="0"><code><span class="line"><span style="--shiki-dark:#51597D;--shiki-dark-font-style:italic;--shiki-light:#6A737D;--shiki-light-font-style:inherit;">// Register TasksController in the controllers array of the remultExpress options</span></span>
<span class="line"><span style="--shiki-dark:#7DCFFF;--shiki-light:#D73A49;">export</span><span style="--shiki-dark:#9D7CD8;--shiki-dark-font-style:italic;--shiki-light:#D73A49;--shiki-light-font-style:inherit;"> const</span><span style="--shiki-dark:#BB9AF7;--shiki-light:#005CC5;"> api</span><span style="--shiki-dark:#89DDFF;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#7AA2F7;--shiki-light:#6F42C1;"> remultExpress</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;">({</span></span>
<span class="line"><span style="--shiki-dark:#73DACA;--shiki-light:#24292E;">  entities</span><span style="--shiki-dark:#89DDFF;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;"> [</span><span style="--shiki-dark:#7DCFFF;--shiki-light:#24292E;">Task</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;">]</span><span style="--shiki-dark:#89DDFF;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#73DACA;--shiki-light:#24292E;">  controllers</span><span style="--shiki-dark:#89DDFF;--shiki-light:#24292E;">:</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;"> [</span><span style="--shiki-dark:#7DCFFF;--shiki-light:#24292E;">TasksController</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;">]</span><span style="--shiki-dark:#89DDFF;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;">})</span></span></code></pre></div><ol start="3"><li><strong>Call from the Frontend:</strong></li></ol><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes tokyo-night github-light vp-code" style="--shiki-dark:#a9b1d6;--shiki-light:#24292e;--shiki-dark-bg:#1a1b26;--shiki-light-bg:#fff;" tabindex="0"><code><span class="line"><span style="--shiki-dark:#BB9AF7;--shiki-dark-font-style:italic;--shiki-light:#D73A49;--shiki-light-font-style:inherit;">await</span><span style="--shiki-dark:#C0CAF5;--shiki-light:#24292E;"> TasksController</span><span style="--shiki-dark:#89DDFF;--shiki-light:#24292E;">.</span><span style="--shiki-dark:#7AA2F7;--shiki-light:#6F42C1;">setAll</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#FF9E64;--shiki-light:#005CC5;">true</span><span style="--shiki-dark:#9ABDF5;--shiki-light:#24292E;">)</span></span></code></pre></div><p>This example demonstrates how to define and use a static backend method, <code>setAll</code>, within the <code>TasksController</code> class. When called from the frontend, this method sets the completion status of all tasks to the specified value (<code>true</code> in this case). The method leverages Remult&#39;s <code>BackendMethod</code> decorator to handle the communication between the frontend and backend seamlessly.</p>`,17)]))}const g=i(n,[["render",h]]);export{c as __pageData,g as default};
