import{_ as s,c as a,o as n,a5 as p}from"./chunks/framework.ChN904aB.js";const d=JSON.parse('{"title":"Adding Graphql","description":"","frontmatter":{},"headers":[],"relativePath":"docs/adding-graphql.md","filePath":"docs/adding-graphql.md","lastUpdated":1715855157000}'),l={name:"docs/adding-graphql.md"},o=p(`<h1 id="adding-graphql" tabindex="-1">Adding Graphql <a class="header-anchor" href="#adding-graphql" aria-label="Permalink to &quot;Adding Graphql&quot;">​</a></h1><p>To add graphql to a <code>remult</code> application follow these steps:</p><ol><li>Install the <code>graphql-yoga</code> packages:<div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npm</span><span style="color:#CE9178;"> i</span><span style="color:#CE9178;"> graphql-yoga</span></span></code></pre></div></li></ol><h2 id="express" tabindex="-1">Express: <a class="header-anchor" href="#express" aria-label="Permalink to &quot;Express:&quot;">​</a></h2><p>In the <code>/src/server/index.ts</code> file add the following code:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> express</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;express&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">remultExpress</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult/remult-express&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line highlighted"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">createSchema</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">createYoga</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;graphql-yoga&#39;</span></span>
<span class="line highlighted"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">remultGraphql</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult/graphql&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> app</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">express</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> entities</span><span style="color:#D4D4D4;"> = [</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> api</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">remultExpress</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">   entities</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">use</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">api</span><span style="color:#D4D4D4;">);</span></span>
<span class="line highlighted"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">typeDefs</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">resolvers</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">remultGraphql</span><span style="color:#D4D4D4;">({</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">   entities</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">});</span></span>
<span class="line highlighted"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> yoga</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">createYoga</span><span style="color:#D4D4D4;">({</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">   graphqlEndpoint:</span><span style="color:#CE9178;"> &#39;/api/graphql&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">   schema:</span><span style="color:#D4D4D4;"> (</span><span style="color:#DCDCAA;">createSchema</span><span style="color:#D4D4D4;">({</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">      typeDefs</span><span style="color:#D4D4D4;">,</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">      resolvers</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">   }))</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">})</span></span>
<span class="line highlighted"><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">use</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">yoga</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">graphqlEndpoint</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">api</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">withRemult</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">yoga</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">listen</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">3002</span><span style="color:#D4D4D4;">, () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Server started&quot;</span><span style="color:#D4D4D4;">));</span></span></code></pre></div><h2 id="next-app-router" tabindex="-1">Next App Router <a class="header-anchor" href="#next-app-router" aria-label="Permalink to &quot;Next App Router&quot;">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Next.js Custom Route Handler: https://nextjs.org/docs/app/building-your-application/routing/router-handlers</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">createYoga</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">createSchema</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;graphql-yoga&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">remultGraphql</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult/graphql&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">api</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;../../../api&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;../../../shared/task&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">typeDefs</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">resolvers</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">remultGraphql</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  entities:</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> yoga</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">createYoga</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#6A9955;">  // While using Next.js file convention for routing, we need to configure Yoga to use the correct endpoint</span></span>
<span class="line"><span style="color:#9CDCFE;">  graphqlEndpoint:</span><span style="color:#CE9178;"> &#39;/api/graphql&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  schema:</span><span style="color:#DCDCAA;"> createSchema</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">    typeDefs</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    resolvers</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  }),</span></span>
<span class="line"><span style="color:#6A9955;">  // Yoga needs to know how to create a valid Next response</span></span>
<span class="line"><span style="color:#9CDCFE;">  fetchAPI:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Response</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> handleRequest</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">request</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">any</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">ctx</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">any</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span></span>
<span class="line"><span style="color:#9CDCFE;">  api</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">withRemult</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> yoga</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">handleRequest</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">request</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">ctx</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">handleRequest</span><span style="color:#C586C0;"> as</span><span style="color:#9CDCFE;"> GET</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">handleRequest</span><span style="color:#C586C0;"> as</span><span style="color:#9CDCFE;"> POST</span><span style="color:#D4D4D4;"> }</span></span></code></pre></div><h2 id="svelte" tabindex="-1">Svelte <a class="header-anchor" href="#svelte" aria-label="Permalink to &quot;Svelte&quot;">​</a></h2><p><code>src/routes/api/graphql/+server.ts</code></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#C586C0;"> type</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">RequestEvent</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;@sveltejs/kit&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">createSchema</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">createYoga</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;graphql-yoga&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">remultGraphql</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult/graphql&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;../../../shared/Task&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">typeDefs</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">resolvers</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">remultGraphql</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  entities:</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> yogaApp</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">createYoga</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">RequestEvent</span><span style="color:#D4D4D4;">&gt;({</span></span>
<span class="line"><span style="color:#9CDCFE;">  schema:</span><span style="color:#DCDCAA;"> createSchema</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">    typeDefs</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    resolvers</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  }),</span></span>
<span class="line"><span style="color:#6A9955;">  // While using Next.js file convention for routing, we need to configure Yoga to use the correct endpoint</span></span>
<span class="line"><span style="color:#9CDCFE;">  graphqlEndpoint:</span><span style="color:#CE9178;"> &#39;/api/graphql&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">  fetchAPI:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Response</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">yogaApp</span><span style="color:#C586C0;"> as</span><span style="color:#9CDCFE;"> GET</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">yogaApp</span><span style="color:#C586C0;"> as</span><span style="color:#9CDCFE;"> OPTIONS</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">yogaApp</span><span style="color:#C586C0;"> as</span><span style="color:#9CDCFE;"> POST</span><span style="color:#D4D4D4;"> }</span></span></code></pre></div>`,11),e=[o];function t(r,D,c,y,C,i){return n(),a("div",null,e)}const g=s(l,[["render",t]]);export{d as __pageData,g as default};
