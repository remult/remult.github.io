import{_ as a,c as t,o as n,a5 as e}from"./chunks/framework.QXCuR9m2.js";const g=JSON.parse('{"title":"Extending Existing Validations","description":"","frontmatter":{"type":"lesson","title":"Extending Existing Validations","focus":"/shared/Task.ts"},"headers":[],"relativePath":"interactive/src/content/tutorial/9-examples/1-validations/1-extending-existing-validation/content.md","filePath":"interactive/src/content/tutorial/9-examples/1-validations/1-extending-existing-validation/content.md","lastUpdated":1725298208000}'),s={name:"interactive/src/content/tutorial/9-examples/1-validations/1-extending-existing-validation/content.md"},i=e(`<h1 id="extending-existing-validations" tabindex="-1">Extending Existing Validations <a class="header-anchor" href="#extending-existing-validations" aria-label="Permalink to &quot;Extending Existing Validations&quot;">​</a></h1><p>In this lesson, you&#39;ll learn how to extend and customize existing validations in Remult. Validations in Remult are simply functions that you can call and combine as needed.</p><h3 id="example-unique-title-validation" tabindex="-1">Example: Unique Title Validation <a class="header-anchor" href="#example-unique-title-validation" aria-label="Permalink to &quot;Example: Unique Title Validation&quot;">​</a></h3><p>Let&#39;s extend the existing <code>unique</code> validation to check that no two tasks exist with the same title, as long as the title is not empty.</p><div class="language-solution:/shared/Task.ts"><button title="Copy Code" class="copy"></button><span class="lang">solution:/shared/Task.ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line highlighted"><span>\`\`\`</span></span>
<span class="line highlighted"><span></span></span>
<span class="line highlighted"><span>\`\`\`typescript title=&quot;shared/Task.ts&quot; add={6-8}</span></span>
<span class="line highlighted"><span>export class Task {</span></span>
<span class="line highlighted"><span>  @Fields.uuid()</span></span>
<span class="line"><span>  id = &#39;&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  @Fields.string&lt;Task&gt;({</span></span>
<span class="line"><span>    validate: (task, e) =&gt; {</span></span>
<span class="line"><span>      if (task.title != &#39;&#39;) Validators.unique(task, e)</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>  title = &#39;&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  //....</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="code-explanation" tabindex="-1">Code Explanation <a class="header-anchor" href="#code-explanation" aria-label="Permalink to &quot;Code Explanation&quot;">​</a></h3><ul><li>The <code>validate</code> function checks if the <code>title</code> is not empty.</li><li>If the <code>title</code> is not empty, the <code>Validators.unique</code> function is called to ensure that the task title is unique within the entity.</li><li>This approach allows you to combine and extend existing validations to suit your application&#39;s needs.</li></ul><h3 id="try-it-out" tabindex="-1">Try It Out <a class="header-anchor" href="#try-it-out" aria-label="Permalink to &quot;Try It Out&quot;">​</a></h3><p>Test this extended validation by trying to add tasks with duplicate titles. Notice that the validation prevents duplicates only when the title is not empty.</p>`,9),l=[i];function o(p,d,c,h,r,u){return n(),t("div",null,l)}const m=a(s,[["render",o]]);export{g as __pageData,m as default};
