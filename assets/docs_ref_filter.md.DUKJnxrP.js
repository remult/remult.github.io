import{_ as s,c as a,o as e,a5 as n}from"./chunks/framework.ChN904aB.js";const h=JSON.parse('{"title":"Filter","description":"","frontmatter":{},"headers":[],"relativePath":"docs/ref_filter.md","filePath":"docs/ref_filter.md","lastUpdated":1724738315000}'),t={name:"docs/ref_filter.md"},l=n(`<h1 id="filter" tabindex="-1">Filter <a class="header-anchor" href="#filter" aria-label="Permalink to &quot;Filter&quot;">​</a></h1><p>The <code>Filter</code> class is a helper class that focuses on filter-related concerns. It provides methods for creating and applying filters in queries.</p><h2 id="getprecisevalues" tabindex="-1">getPreciseValues <a class="header-anchor" href="#getprecisevalues" aria-label="Permalink to &quot;getPreciseValues&quot;">​</a></h2><p>Retrieves precise values for each property in a filter for an entity.</p><h4 id="returns" tabindex="-1">returns: <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;returns:&quot;">​</a></h4><p>A promise that resolves to a FilterPreciseValues object containing the precise values for each property.</p><h4 id="example" tabindex="-1">example: <a class="header-anchor" href="#example" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> preciseValues</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> Filter</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getPreciseValues</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">meta</span><span style="color:#D4D4D4;">, {</span></span>
<span class="line"><span style="color:#9CDCFE;">  status:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">$ne:</span><span style="color:#CE9178;"> &#39;active&#39;</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#9CDCFE;">  $or:</span><span style="color:#D4D4D4;"> [</span></span>
<span class="line"><span style="color:#D4D4D4;">    { </span><span style="color:#9CDCFE;">customerId:</span><span style="color:#D4D4D4;"> [</span><span style="color:#CE9178;">&quot;1&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;2&quot;</span><span style="color:#D4D4D4;">] },</span></span>
<span class="line"><span style="color:#D4D4D4;">    { </span><span style="color:#9CDCFE;">customerId:</span><span style="color:#CE9178;"> &quot;3&quot;</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#D4D4D4;">  ]</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">preciseValues</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;">// Output:</span></span>
<span class="line"><span style="color:#6A9955;">// {</span></span>
<span class="line"><span style="color:#6A9955;">//   &quot;customerId&quot;: [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;], // Precise values inferred from the filter</span></span>
<span class="line"><span style="color:#6A9955;">//   &quot;status&quot;: undefined,           // Cannot infer precise values for &#39;status&#39;</span></span>
<span class="line"><span style="color:#6A9955;">// }</span></span></code></pre></div><p>Arguments:</p><ul><li><strong>metadata</strong> - The metadata of the entity being filtered.</li><li><strong>filter</strong> - The filter to analyze.</li></ul><h2 id="getprecisevalues-1" tabindex="-1">getPreciseValues <a class="header-anchor" href="#getprecisevalues-1" aria-label="Permalink to &quot;getPreciseValues&quot;">​</a></h2><p>Retrieves precise values for each property in a filter for an entity.</p><h4 id="returns-1" tabindex="-1">returns: <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;returns:&quot;">​</a></h4><p>A promise that resolves to a FilterPreciseValues object containing the precise values for each property.</p><h4 id="example-1" tabindex="-1">example: <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> preciseValues</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> where</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getPreciseValues</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">preciseValues</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;">// Output:</span></span>
<span class="line"><span style="color:#6A9955;">// {</span></span>
<span class="line"><span style="color:#6A9955;">//   &quot;customerId&quot;: [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;], // Precise values inferred from the filter</span></span>
<span class="line"><span style="color:#6A9955;">//   &quot;status&quot;: undefined,           // Cannot infer precise values for &#39;status&#39;</span></span>
<span class="line"><span style="color:#6A9955;">// }</span></span></code></pre></div><h2 id="createcustom" tabindex="-1">createCustom <a class="header-anchor" href="#createcustom" aria-label="Permalink to &quot;createCustom&quot;">​</a></h2><p>Creates a custom filter. Custom filters are evaluated on the backend, ensuring security and efficiency. When the filter is used in the frontend, only its name is sent to the backend via the API, where the filter gets translated and applied in a safe manner.</p><h4 id="returns-2" tabindex="-1">returns: <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;returns:&quot;">​</a></h4><p>A function that returns an <code>EntityFilter</code> of type <code>entityType</code>.</p><h4 id="example-2" tabindex="-1">example: <a class="header-anchor" href="#example-2" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> Order</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;"> //...</span></span>
<span class="line"><span style="color:#569CD6;"> static</span><span style="color:#9CDCFE;"> activeOrdersFor</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Filter</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">createCustom</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Order</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">year</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> }&gt;(</span></span>
<span class="line"><span style="color:#569CD6;">   async</span><span style="color:#D4D4D4;"> ({ </span><span style="color:#9CDCFE;">year</span><span style="color:#D4D4D4;"> }) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">     return</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">       status:</span><span style="color:#D4D4D4;"> [</span><span style="color:#CE9178;">&#39;created&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;confirmed&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;pending&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;blocked&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;delayed&#39;</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#9CDCFE;">       createdAt:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">         $gte:</span><span style="color:#569CD6;"> new</span><span style="color:#DCDCAA;"> Date</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">year</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#9CDCFE;">         $lt:</span><span style="color:#569CD6;"> new</span><span style="color:#DCDCAA;"> Date</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">year</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">       },</span></span>
<span class="line"><span style="color:#D4D4D4;">     }</span></span>
<span class="line"><span style="color:#D4D4D4;">   },</span></span>
<span class="line"><span style="color:#D4D4D4;"> )</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#6A9955;">// Usage</span></span>
<span class="line"><span style="color:#C586C0;">await</span><span style="color:#DCDCAA;"> repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Order</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;"> where:</span><span style="color:#9CDCFE;"> Order</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">activeOrders</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">year</span><span style="color:#D4D4D4;"> }),</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre></div><h4 id="see" tabindex="-1">see: <a class="header-anchor" href="#see" aria-label="Permalink to &quot;see:&quot;">​</a></h4><p><a href="/docs/custom-filter.html">Sql filter and Custom filter</a><a href="/docs/filtering-and-relations.html">Filtering and Relations</a></p><p>Arguments:</p><ul><li><strong>translator</strong> - A function that returns an <code>EntityFilter</code>.</li><li><strong>key</strong> - An optional unique identifier for the custom filter.</li></ul><h2 id="entityfiltertojson" tabindex="-1">entityFilterToJson <a class="header-anchor" href="#entityfiltertojson" aria-label="Permalink to &quot;entityFilterToJson&quot;">​</a></h2><p>Translates an <code>EntityFilter</code> to a plain JSON object that can be stored or transported.</p><h4 id="returns-3" tabindex="-1">returns: <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;returns:&quot;">​</a></h4><p>A plain JSON object representing the <code>EntityFilter</code>.</p><h4 id="example-3" tabindex="-1">example: <a class="header-anchor" href="#example-3" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Assuming \`Task\` is an entity class</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> jsonFilter</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Filter</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">entityFilterToJson</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">completed:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;"> });</span></span>
<span class="line"><span style="color:#6A9955;">// \`jsonFilter\` can now be stored or transported as JSON</span></span></code></pre></div><p>Arguments:</p><ul><li><strong>entityDefs</strong> - The metadata of the entity associated with the filter.</li><li><strong>where</strong> - The <code>EntityFilter</code> to be translated.</li></ul><h2 id="entityfilterfromjson" tabindex="-1">entityFilterFromJson <a class="header-anchor" href="#entityfilterfromjson" aria-label="Permalink to &quot;entityFilterFromJson&quot;">​</a></h2><p>Translates a plain JSON object back into an <code>EntityFilter</code>.</p><h4 id="returns-4" tabindex="-1">returns: <a class="header-anchor" href="#returns-4" aria-label="Permalink to &quot;returns:&quot;">​</a></h4><p>The reconstructed <code>EntityFilter</code>.</p><h4 id="example-4" tabindex="-1">example: <a class="header-anchor" href="#example-4" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Assuming \`Task\` is an entity class and \`jsonFilter\` is a JSON object representing an EntityFilter</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> taskFilter</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Filter</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">entityFilterFromJson</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">jsonFilter</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;">// Using the reconstructed \`EntityFilter\` in a query</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> tasks</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> remult</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">where:</span><span style="color:#9CDCFE;"> taskFilter</span><span style="color:#D4D4D4;"> });</span></span>
<span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> task</span><span style="color:#569CD6;"> of</span><span style="color:#9CDCFE;"> tasks</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#6A9955;">  // Do something for each task based on the filter</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><p>Arguments:</p><ul><li><strong>entityDefs</strong> - The metadata of the entity associated with the filter.</li><li><strong>packed</strong> - The plain JSON object representing the <code>EntityFilter</code>.</li></ul><h2 id="fromentityfilter" tabindex="-1">fromEntityFilter <a class="header-anchor" href="#fromentityfilter" aria-label="Permalink to &quot;fromEntityFilter&quot;">​</a></h2><p>Converts an <code>EntityFilter</code> to a <code>Filter</code> that can be used by the <code>DataProvider</code>. This method is mainly used internally.</p><h4 id="returns-5" tabindex="-1">returns: <a class="header-anchor" href="#returns-5" aria-label="Permalink to &quot;returns:&quot;">​</a></h4><p>A <code>Filter</code> instance that can be used by the <code>DataProvider</code>.</p><h4 id="example-5" tabindex="-1">example: <a class="header-anchor" href="#example-5" aria-label="Permalink to &quot;example:&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Assuming \`Task\` is an entity class and \`taskFilter\` is an EntityFilter</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> filter</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Filter</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fromEntityFilter</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">taskFilter</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;">// \`filter\` can now be used with the DataProvider</span></span></code></pre></div><p>Arguments:</p><ul><li><strong>entity</strong> - The metadata of the entity associated with the filter.</li><li><strong>whereItem</strong> - The <code>EntityFilter</code> to be converted.</li></ul><h2 id="constructor" tabindex="-1">constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;constructor&quot;">​</a></h2><ul><li><strong>new Filter</strong></li></ul><p>Arguments:</p><ul><li><strong>apply</strong></li></ul><h2 id="resolve" tabindex="-1">resolve <a class="header-anchor" href="#resolve" aria-label="Permalink to &quot;resolve&quot;">​</a></h2><p>Resolves an entity filter.</p><p>This method takes a filter which can be either an instance of <code>EntityFilter</code> or a function that returns an instance of <code>EntityFilter</code> or a promise that resolves to an instance of <code>EntityFilter</code>. It then resolves the filter if it is a function and returns the resulting <code>EntityFilter</code>.</p><h4 id="returns-6" tabindex="-1">returns: <a class="header-anchor" href="#returns-6" aria-label="Permalink to &quot;returns:&quot;">​</a></h4><p>The resolved entity filter.</p><p>Arguments:</p><ul><li><strong>filter</strong> - The filter to resolve.</li></ul><h2 id="tojson" tabindex="-1">toJson <a class="header-anchor" href="#tojson" aria-label="Permalink to &quot;toJson&quot;">​</a></h2><ul><li><strong>toJson</strong></li></ul>`,63),o=[l];function r(p,c,i,D,y,d){return e(),a("div",null,o)}const C=s(t,[["render",r]]);export{h as __pageData,C as default};
