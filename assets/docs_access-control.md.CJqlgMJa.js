import{_ as s,c as a,o as n,a5 as l}from"./chunks/framework.QXCuR9m2.js";const u=JSON.parse('{"title":"Access Control","description":"","frontmatter":{},"headers":[],"relativePath":"docs/access-control.md","filePath":"docs/access-control.md","lastUpdated":1714368668000}'),o={name:"docs/access-control.md"},e=l(`<h1 id="access-control" tabindex="-1">Access Control <a class="header-anchor" href="#access-control" aria-label="Permalink to &quot;Access Control&quot;">​</a></h1><p>Access control is essential for ensuring that users can only access resources they are authorized to in web applications. This article explores the various layers of access control, focusing on a framework that provides a granular approach to securing your application.</p><h2 id="entity-level-authorization" tabindex="-1">Entity-Level Authorization <a class="header-anchor" href="#entity-level-authorization" aria-label="Permalink to &quot;Entity-Level Authorization&quot;">​</a></h2><p>Entity-level authorization governs CRUD (Create, Read, Update, Delete) operations at the entity level. Each entity can define permissions for these operations using the following options:</p><ul><li><code>allowApiRead</code>: Controls read access.</li><li><code>allowApiInsert</code>: Controls insert access.</li><li><code>allowApiUpdate</code>: Controls update access.</li><li><code>allowApiDelete</code>: Controls delete access.</li></ul><p>Each option can be set to a boolean, a string role, an array of string roles, or an arrow function:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Allows all CRUD operations</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">Entity</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;tasks&quot;</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">allowApiCrud:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Only users with the &#39;admin&#39; role can update</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">Entity</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;tasks&quot;</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">allowApiUpdate:</span><span style="color:#CE9178;"> &#39;admin&#39;</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Only users with &#39;admin&#39; or &#39;manager&#39; roles can delete</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">Entity</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;tasks&quot;</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">allowApiDelete:</span><span style="color:#D4D4D4;"> [</span><span style="color:#CE9178;">&#39;admin&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;manager&#39;</span><span style="color:#D4D4D4;">] })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Only the user &#39;Jane&#39; can read</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">Entity</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;tasks&quot;</span><span style="color:#D4D4D4;">, { </span><span style="color:#DCDCAA;">allowApiRead</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> remult</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> == </span><span style="color:#CE9178;">&#39;Jane&#39;</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Only authenticated users can perform CRUD operations</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">Entity</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;tasks&quot;</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">allowApiCrud:</span><span style="color:#9CDCFE;"> Allow</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">authenticated</span><span style="color:#D4D4D4;"> })</span></span></code></pre></div><h2 id="row-level-authorization" tabindex="-1">Row-Level Authorization <a class="header-anchor" href="#row-level-authorization" aria-label="Permalink to &quot;Row-Level Authorization&quot;">​</a></h2><p>Row-level authorization allows control over which rows a user can access or modify.</p><h3 id="authorization-on-specific-rows" tabindex="-1">Authorization on Specific Rows <a class="header-anchor" href="#authorization-on-specific-rows" aria-label="Permalink to &quot;Authorization on Specific Rows&quot;">​</a></h3><p>The <code>allowApiUpdate</code>, <code>allowApiDelete</code>, and <code>allowApiInsert</code> options can also accept a function that receives the specific item as the first parameter, allowing row-level authorization:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Users can only update tasks they own</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">Entity</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Task</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#CE9178;">&quot;tasks&quot;</span><span style="color:#D4D4D4;">, { </span><span style="color:#DCDCAA;">allowApiUpdate</span><span style="color:#9CDCFE;">:</span><span style="color:#9CDCFE;"> task</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#9CDCFE;"> task</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">owner</span><span style="color:#D4D4D4;"> == </span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;"> })</span></span></code></pre></div><h3 id="filtering-accessible-rows" tabindex="-1">Filtering Accessible Rows <a class="header-anchor" href="#filtering-accessible-rows" aria-label="Permalink to &quot;Filtering Accessible Rows&quot;">​</a></h3><p>To limit the rows a user has access to, use the <code>apiPrefilter</code> option:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">Entity</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Task</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#CE9178;">&quot;tasks&quot;</span><span style="color:#D4D4D4;">, {</span></span>
<span class="line"><span style="color:#DCDCAA;">  apiPrefilter</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">    // Admins can access all rows</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">isAllowed</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;admin&quot;</span><span style="color:#D4D4D4;">)) </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> {}</span></span>
<span class="line"><span style="color:#6A9955;">    // Non-admins can only access rows where they are the owner</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">owner:</span><span style="color:#9CDCFE;"> remult</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">!.</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre></div><p>The <code>apiPrefilter</code> adds a filter to all CRUD API requests, ensuring that only authorized data is accessible through the API.</p><h3 id="preprocessing-filters-for-api-requests" tabindex="-1">Preprocessing Filters for API Requests <a class="header-anchor" href="#preprocessing-filters-for-api-requests" aria-label="Permalink to &quot;Preprocessing Filters for API Requests&quot;">​</a></h3><p>For more complex scenarios, you can use <code>apiPreprocessFilter</code> to dynamically modify the filter based on the specific request and additional filter information:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">Entity</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Task</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#CE9178;">&quot;tasks&quot;</span><span style="color:#D4D4D4;">, {</span></span>
<span class="line"><span style="color:#DCDCAA;">  apiPreprocessFilter</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> async</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">filter</span><span style="color:#D4D4D4;">, {</span><span style="color:#9CDCFE;">getPreciseValues</span><span style="color:#D4D4D4;">}) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">    // Ensure that users can only query tasks for specific customers</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> preciseValues</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#DCDCAA;"> getPreciseValues</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">preciseValues</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">customerId</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">      throw</span><span style="color:#569CD6;"> new</span><span style="color:#DCDCAA;"> ForbiddenError</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;You must specify a valid customerId filter&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> filter</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre></div><p>In this example, <code>apiPreprocessFilter</code> uses the <code>getPreciseValues</code> method to ensure that users must specify a valid <code>customerId</code> filter when querying tasks, allowing for more granular control over the data that is accessible through the API.</p><p><strong>Note:</strong> The <code>preciseValues</code> object includes the actual values that are used in the filter. For example, in the code sample above, if the <code>customerId</code> filter specifies the values <code>&#39;1&#39;</code>, <code>&#39;2&#39;</code>, and <code>&#39;3&#39;</code>, then <code>preciseValues.customerId</code> will be an array containing these values. This allows you to check and enforce specific filter criteria in your preprocessing logic.</p><p>This added note explains the significance of the <code>preciseValues</code> property and how it includes the actual values used in the filter, providing an example for clarity.</p><h3 id="warning-api-filters-do-not-affect-backend-queries" tabindex="-1">Warning: API Filters Do Not Affect Backend Queries <a class="header-anchor" href="#warning-api-filters-do-not-affect-backend-queries" aria-label="Permalink to &quot;Warning: API Filters Do Not Affect Backend Queries&quot;">​</a></h3><p>It&#39;s important to note that <code>apiPrefilter</code> and <code>apiPreprocessFilter</code> only apply to API requests. They do not affect backend queries, such as those executed through backend methods or non-Remult routes.</p><p>For instance, in a sign-in scenario, a backend method might need to check all user records to verify a user&#39;s existence without exposing all user data through the API. Once authenticated, the user should only have access to their own record for updates.</p><h3 id="backend-filters-for-consistent-access-control" tabindex="-1">Backend Filters for Consistent Access Control <a class="header-anchor" href="#backend-filters-for-consistent-access-control" aria-label="Permalink to &quot;Backend Filters for Consistent Access Control&quot;">​</a></h3><p>To apply similar filtering logic to backend queries, you can use <code>backendPrefilter</code> and <code>backendPreprocessFilter</code>:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">Entity</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Task</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#CE9178;">&quot;tasks&quot;</span><span style="color:#D4D4D4;">, {</span></span>
<span class="line"><span style="color:#DCDCAA;">  backendPrefilter</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">    // Admins can access all rows</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">isAllowed</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;admin&quot;</span><span style="color:#D4D4D4;">)) </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> {}</span></span>
<span class="line"><span style="color:#6A9955;">    // Non-admins can only access rows where they are the owner</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">owner:</span><span style="color:#9CDCFE;"> remult</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">!.</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#DCDCAA;">  backendPreprocessFilter</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> async</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">filter</span><span style="color:#D4D4D4;">, {</span><span style="color:#9CDCFE;">getPreciseValues</span><span style="color:#D4D4D4;">}) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">    // Apply additional filtering logic for backend queries</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> preciseValues</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#DCDCAA;"> getPreciseValues</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">filter</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">preciseValues</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">owner</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">      throw</span><span style="color:#569CD6;"> new</span><span style="color:#DCDCAA;"> ForbiddenError</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;You must specify a valid owner filter&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> filter</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre></div><p>In this example, <code>backendPrefilter</code> and <code>backendPreprocessFilter</code> ensure that non-admin users can only access their own tasks in backend queries, providing consistent access control across both API and backend operations.</p><h2 id="field-level-authorization" tabindex="-1">Field-Level Authorization <a class="header-anchor" href="#field-level-authorization" aria-label="Permalink to &quot;Field-Level Authorization&quot;">​</a></h2><p>Field-level authorization allows control over individual fields within an entity:</p><ul><li><code>includeInApi</code>: Determines if the field is included in the API response.</li><li><code>allowApiUpdate</code>: Controls if a field can be updated. If false, any change to the field is ignored.</li></ul><p>Examples:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// This field will not be included in the API response</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#9CDCFE;">Fields</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">string</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">includeInApi:</span><span style="color:#569CD6;"> false</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line"><span style="color:#9CDCFE;">password</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Only users with the &#39;admin&#39; role can update this field</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#9CDCFE;">Fields</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">boolean</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">allowApiUpdate:</span><span style="color:#CE9178;"> &quot;admin&quot;</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line"><span style="color:#9CDCFE;">admin</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Titles can only be updated by the task owner</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#9CDCFE;">Fields</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">string</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Task</span><span style="color:#D4D4D4;">&gt;({ </span><span style="color:#DCDCAA;">allowApiUpdate</span><span style="color:#9CDCFE;">:</span><span style="color:#9CDCFE;"> task</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#9CDCFE;"> task</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">owner</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">!.</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line"><span style="color:#9CDCFE;">title</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// This field can only be updated when creating a new entity</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#9CDCFE;">Fields</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">string</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Category</span><span style="color:#D4D4D4;">&gt;({ </span><span style="color:#DCDCAA;">allowApiUpdate</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> getEntityRef</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">isNew</span><span style="color:#D4D4D4;">() })</span></span>
<span class="line"><span style="color:#9CDCFE;">Description</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;&quot;</span></span></code></pre></div><h3 id="field-masking" tabindex="-1">Field Masking <a class="header-anchor" href="#field-masking" aria-label="Permalink to &quot;Field Masking&quot;">​</a></h3><p>To mask a field, combine a non-API field with a <code>serverExpression</code> that returns the masked value:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// This field is not included in the API response</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#9CDCFE;">Fields</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">string</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">includeInApi:</span><span style="color:#569CD6;"> false</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line"><span style="color:#9CDCFE;">password</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// The field value is masked in the API response</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#9CDCFE;">Fields</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">string</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;">&gt;({</span></span>
<span class="line"><span style="color:#DCDCAA;">  serverExpression</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#CE9178;"> &quot;***&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#6A9955;">  // Update the real password field when the masked field is changed</span></span>
<span class="line"><span style="color:#DCDCAA;">  saving</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> async</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">fieldRef</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">fieldRef</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">valueChanged</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#9CDCFE;">      user</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">password</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> User</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">hash</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">updatePassword</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"><span style="color:#9CDCFE;">updatePassword</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;&quot;</span></span></code></pre></div><h2 id="backendmethod-authorization" tabindex="-1">BackendMethod Authorization <a class="header-anchor" href="#backendmethod-authorization" aria-label="Permalink to &quot;BackendMethod Authorization&quot;">​</a></h2><p>Backend methods use the <code>allowed</code> option to determine authorization:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Only authenticated users can execute this method</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#DCDCAA;">BackendMethod</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">allowed:</span><span style="color:#9CDCFE;"> Allow</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">authenticated</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line"><span style="color:#9CDCFE;">static</span><span style="color:#9CDCFE;"> async</span><span style="color:#DCDCAA;"> doSomething</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#6A9955;">  // something</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><p>The <code>allowed</code> option can receive a boolean, a string role, an array of role strings, or a function.</p><h2 id="reusing-access-control-definitions-in-the-frontend" tabindex="-1">Reusing Access Control Definitions in the Frontend <a class="header-anchor" href="#reusing-access-control-definitions-in-the-frontend" aria-label="Permalink to &quot;Reusing Access Control Definitions in the Frontend&quot;">​</a></h2><p>Access control definitions set in entities can be reused as a single source of truth in the frontend. This allows for consistent and centralized management of access control logic across your application. For example, in a React component, you can conditionally render UI elements based on the access control rules defined in the entity:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-8lWnI" id="tab-P8R5dd3" checked><label for="tab-P8R5dd3">React</label><input type="radio" name="group-8lWnI" id="tab-6rHtnQU"><label for="tab-6rHtnQU">Angular</label><input type="radio" name="group-8lWnI" id="tab-Ka1VSE_"><label for="tab-Ka1VSE_">Vue</label><input type="radio" name="group-8lWnI" id="tab-USy0ujF"><label for="tab-USy0ujF">Svelte</label></div><div class="blocks"><div class="language-tsx active"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> UserComponent</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;"> }: { </span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;"> }) {</span></span>
<span class="line"><span style="color:#6A9955;">  //...</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">tr</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">      &lt;</span><span style="color:#569CD6;">td</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">td</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#569CD6;">      {</span><span style="color:#6A9955;">/* Only show the admin field if the user is allowed to see it */</span><span style="color:#569CD6;">}</span></span>
<span class="line"><span style="color:#569CD6;">      {</span><span style="color:#9CDCFE;">userRepo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">fields</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">admin</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">includeInApi</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">) &amp;&amp; </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">td</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">admin</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">td</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">}</span></span>
<span class="line"><span style="color:#569CD6;">      {</span><span style="color:#6A9955;">/* Only show the delete button if the user is allowed to delete the admin */</span><span style="color:#569CD6;">}</span></span>
<span class="line"><span style="color:#569CD6;">      {</span><span style="color:#9CDCFE;">userRepo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">metadata</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">apiDeleteAllowed</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">) &amp;&amp; (</span></span>
<span class="line"><span style="color:#808080;">        &lt;</span><span style="color:#569CD6;">td</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">          &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> onClick</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">{</span><span style="color:#9CDCFE;">deleteUser</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Delete</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">        &lt;/</span><span style="color:#569CD6;">td</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">      )</span><span style="color:#569CD6;">}</span></span>
<span class="line"><span style="color:#808080;">    &lt;/</span><span style="color:#569CD6;">tr</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">  )</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">tr</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">td</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">{{user.name}}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">td</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#6A9955;">  &lt;!-- Only show the admin field if the user is allowed to see it --&gt;</span></span>
<span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">td</span><span style="color:#9CDCFE;"> *ngIf</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;userRepo.fields.admin.includeInApi(user)&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">{{user.admin}}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">td</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#6A9955;">  &lt;!-- Only show the delete button if the user is allowed to delete the admin--&gt;</span></span>
<span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">td</span><span style="color:#9CDCFE;"> *ngIf</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;userRepo.metadata.apiDeleteAllowed(user)&quot;</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">button</span><span style="color:#9CDCFE;"> (click)</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;deleteUser(user)&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Delete</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">td</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">tr</span><span style="color:#808080;">&gt;</span></span></code></pre></div><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">tr</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">  &lt;td&gt;{{user.name}}&lt;/td&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">  &lt;!-- Only show the admin field if the user is allowed to see it --&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">  &lt;td v-if=&quot;userRepo.fields.admin.includeInApi(user)&quot;&gt;{{user.admin}}&lt;/td&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">  &lt;!-- Only show the delete button if the user is allowed to delete the admin--&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">  &lt;td v-if=&quot;userRepo.metadata.apiDeleteAllowed(user)&quot;&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    &lt;button @click=&quot;deleteUser(user)&quot;&gt;Delete&lt;/button&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">  &lt;/td&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">tr</span><span style="color:#808080;">&gt;</span></span></code></pre></div><div class="language-svelte"><button title="Copy Code" class="copy"></button><span class="lang">svelte</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">tr</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">td</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">{user.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">}</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">td</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#6A9955;">  &lt;!-- Only show the admin field if the user is allowed to see it --&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">  {#</span><span style="color:#C586C0;">if</span><span style="color:#9CDCFE;"> userRepo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">fields</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">admin</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">includeInApi</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">)}</span></span>
<span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">td</span><span style="color:#808080;">&gt;</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">{user.</span><span style="color:#9CDCFE;">admin</span><span style="color:#D4D4D4;">}</span><span style="color:#569CD6;">}</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">td</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">  {/</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#6A9955;">  &lt;!-- Only show the delete button if the user is allowed to delete the admin--&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">  {#</span><span style="color:#C586C0;">if</span><span style="color:#9CDCFE;"> userRepo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">metadata</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">apiDeleteAllowed</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">)}</span></span>
<span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">td</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">    &lt;</span><span style="color:#569CD6;">button</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">click</span><span style="color:#D4D4D4;">)=&quot;</span><span style="color:#9CDCFE;">deleteUser</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">)&quot;</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Delete</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">button</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">  &lt;/</span><span style="color:#569CD6;">td</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">  {/</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">tr</span><span style="color:#808080;">&gt;</span></span></code></pre></div></div></div><h2 id="additional-resources" tabindex="-1">Additional Resources <a class="header-anchor" href="#additional-resources" aria-label="Permalink to &quot;Additional Resources&quot;">​</a></h2><p>Check out this informative <a href="https://www.youtube.com/watch?v=9lWQwAUcKEM" target="_blank" rel="noreferrer">YouTube video</a>. It discusses the concepts covered in this article and provides practical examples to help you understand how to implement robust access control in your applications.</p><hr><p>This article provides a comprehensive overview of the layers of access control in web applications, offering a granular approach to securing your application at the entity, row, field, and method levels.</p>`,48),p=[e];function t(c,r,D,i,y,d){return n(),a("div",null,p)}const h=s(o,[["render",t]]);export{u as __pageData,h as default};
