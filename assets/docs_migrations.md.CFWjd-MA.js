import{_ as s,c as a,o as n,a5 as e}from"./chunks/framework.QXCuR9m2.js";const u=JSON.parse('{"title":"Migrations","description":"","frontmatter":{},"headers":[],"relativePath":"docs/migrations.md","filePath":"docs/migrations.md","lastUpdated":1712211997000}'),o={name:"docs/migrations.md"},t=e(`<h1 id="migrations" tabindex="-1">Migrations <a class="header-anchor" href="#migrations" aria-label="Permalink to &quot;Migrations&quot;">​</a></h1><p>Managing database schemas is crucial in web development. Traditional migration approaches introduce complexity and risks. Remult, designed for data-driven web apps with TypeScript, offers a simpler method.</p><h2 id="you-don-t-necessarily-need-migrations" tabindex="-1">You Don&#39;t Necessarily Need Migrations <a class="header-anchor" href="#you-don-t-necessarily-need-migrations" aria-label="Permalink to &quot;You Don&#39;t Necessarily Need Migrations&quot;">​</a></h2><p>Migration files are standard but can complicate database schema management. They&#39;re prone to errors, potentially leading to conflicts or downtime. Remult proposes a streamlined alternative: automatic schema synchronization. This approach simplifies schema management by ensuring your database schema aligns with your application code without the manual overhead of traditional migrations.</p><h3 id="embracing-schema-synchronization-with-remult" tabindex="-1">Embracing Schema Synchronization with Remult <a class="header-anchor" href="#embracing-schema-synchronization-with-remult" aria-label="Permalink to &quot;Embracing Schema Synchronization with Remult&quot;">​</a></h3><p>Remult offers an alternative: automatic schema synchronization. <strong>By default, Remult checks for and synchronizes your database schema with the entity types</strong> provided in the <code>RemultServerOptions.entities</code> property when the server loads. This feature automatically adds any missing tables or columns, significantly simplifying schema management.</p><div class="tip custom-block"><p class="custom-block-title">No Data Loss with Remult&#39;s Safe Schema Updates</p><p><strong>Remult&#39;s schema synchronization</strong> ensures <strong>safe and automatic updates</strong> to your database schema. By only adding new tables or columns without altering existing ones, Remult prevents data loss. This design offers a secure way to evolve your application&#39;s database schema.</p></div><h4 id="disabling-automatic-schema-synchronization" tabindex="-1">Disabling Automatic Schema Synchronization <a class="header-anchor" href="#disabling-automatic-schema-synchronization" aria-label="Permalink to &quot;Disabling Automatic Schema Synchronization&quot;">​</a></h4><p>For manual control, Remult allows disabling automatic schema synchronization:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> api</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">remultExpress</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  entities:</span><span style="color:#D4D4D4;"> [], </span><span style="color:#6A9955;">// Your entities here</span></span>
<span class="line"><span style="color:#9CDCFE;">  ensureSchema:</span><span style="color:#569CD6;"> false</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// Disables automatic schema synchronization, Default: true</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre></div><h4 id="manually-triggering-schema-synchronization" tabindex="-1">Manually Triggering Schema Synchronization <a class="header-anchor" href="#manually-triggering-schema-synchronization" aria-label="Permalink to &quot;Manually Triggering Schema Synchronization&quot;">​</a></h4><p>In certain scenarios, you might want to manually trigger the <code>ensureSchema</code> function to ensure that your database schema is up-to-date with your entity definitions. Here&#39;s how you can do it:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">dataProvider</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">ensureSchema</span><span style="color:#D4D4D4;">!(</span><span style="color:#9CDCFE;">entities</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">map</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> remult</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">repo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">).</span><span style="color:#9CDCFE;">metadata</span><span style="color:#D4D4D4;">))</span></span></code></pre></div><h2 id="quick-start-introducing-migrations-to-your-application" tabindex="-1">Quick Start: Introducing Migrations to Your Application <a class="header-anchor" href="#quick-start-introducing-migrations-to-your-application" aria-label="Permalink to &quot;Quick Start: Introducing Migrations to Your Application&quot;">​</a></h2><p>Introducing migrations to your Remult application involves a few straightforward steps. The goal is to ensure that your migrations and API share the same data provider and entity definitions. Here&#39;s how you can do it:</p><h3 id="_1-refactor-your-configuration" tabindex="-1">1. Refactor Your Configuration <a class="header-anchor" href="#_1-refactor-your-configuration" aria-label="Permalink to &quot;1. Refactor Your Configuration&quot;">​</a></h3><p>Start by refactoring the <code>dataProvider</code> and <code>entities</code> definitions from the <code>api.ts</code> file to a new file named <code>src/server/config.ts</code>. This allows you to use the same configurations for both your API and migrations.</p><p>In your <code>src/server/config.ts</code> file, define your entities and data provider as follows:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">createPostgresDataProvider</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult/postgres&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Task</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;../shared/task&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> entities</span><span style="color:#D4D4D4;"> = [</span><span style="color:#9CDCFE;">Task</span><span style="color:#6A9955;"> /* ...other entities */</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> dataProvider</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">createPostgresDataProvider</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  connectionString:</span><span style="color:#CE9178;"> &#39;your connection string&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Using environment variables</p><p>In most cases, the connection string for your database will not be hard-coded but stored in an environment variable for security and flexibility. A common practice is to use a <code>.env</code> file to store environment variables in development and load them using the <code>dotenv</code> npm package. Here&#39;s how you can set it up:</p><ol><li><p>Install the <code>dotenv</code> package:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npm</span><span style="color:#CE9178;"> install</span><span style="color:#CE9178;"> dotenv</span></span></code></pre></div></li><li><p>Create a <code>.env</code> file in the root of your project and add your database connection string:</p><div class="language-env"><button title="Copy Code" class="copy"></button><span class="lang">env</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span>DATABASE_URL=your_connection_string</span></span></code></pre></div></li><li><p>At the beginning of your <code>src/server/config.ts</code> file, load the environment variables:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">config</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;dotenv&#39;</span></span>
<span class="line"><span style="color:#DCDCAA;">config</span><span style="color:#D4D4D4;">()</span></span></code></pre></div></li><li><p>Access the connection string using <code>process.env</code>:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> dataProvider</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">createPostgresDataProvider</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  connectionString:</span><span style="color:#9CDCFE;"> process</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">env</span><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">&#39;DATABASE_URL&#39;</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre></div></li></ol><p>By following these steps, you ensure that your application securely and flexibly manages the database connection string.</p></div><h3 id="_2-adjust-the-api-configuration" tabindex="-1">2. Adjust the API Configuration <a class="header-anchor" href="#_2-adjust-the-api-configuration" aria-label="Permalink to &quot;2. Adjust the API Configuration&quot;">​</a></h3><p>Next, adjust your <code>api.ts</code> file to use the configurations from the <code>config.ts</code> file, and disable the <code>ensureSchema</code> migrations:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">remultExpress</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult/remult-express&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">dataProvider</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">entities</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;./config&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> api</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">remultExpress</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  entities</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  dataProvider</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  ensureSchema:</span><span style="color:#569CD6;"> false</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre></div><h3 id="_3-generate-the-migration" tabindex="-1">3. Generate the migration <a class="header-anchor" href="#_3-generate-the-migration" aria-label="Permalink to &quot;3. Generate the migration&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Prettier</p><p>The migration generator uses <code>prettier</code> to format the generated code for better readability and consistency. If you don&#39;t already have <code>prettier</code> installed in your project, we recommend installing it as a development dependency using the following command:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npm</span><span style="color:#CE9178;"> i</span><span style="color:#569CD6;"> -D</span><span style="color:#CE9178;"> prettier</span></span></code></pre></div></div><p>To enable automatic generation of migration scripts, follow these steps:</p><ol><li><p><strong>Create the Migrations Folder:</strong> In your <code>src/server</code> directory, create a new folder named <code>migrations</code>. This folder will hold all your migration scripts.</p></li><li><p><strong>Create the Migration Generator File:</strong> Inside the <code>migrations</code> folder, create a file named <code>generate-migrations.ts</code>. This file will contain the script that generates migration scripts based on changes in your entities. Here&#39;s the revised section:</p></li><li><p><strong>Populate the Generator File:</strong> Add the following code to <code>generate-migrations.ts</code>:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">generateMigrations</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult/migrations&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">dataProvider</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">entities</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;../config&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">generateMigrations</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  dataProvider</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// The data provider for your database</span></span>
<span class="line"><span style="color:#9CDCFE;">  entities</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// Entity classes to include in the migration</span></span>
<span class="line"><span style="color:#9CDCFE;">  endConnection:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// Close the database connection after generating migrations (useful for standalone scripts)</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre></div><p>This script generates migration scripts based on changes in your entities. If you&#39;re calling this method on a server where the database connection should remain open, omit the <code>endConnection</code> parameter or set it to <code>false</code>.</p></li><li><p><strong>Generate Migrations:</strong> To generate the migration scripts, run the <code>generate-migrations.ts</code> script using the following command:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npx</span><span style="color:#CE9178;"> tsx</span><span style="color:#CE9178;"> src/server/migrations/generate-migrations.ts</span></span></code></pre></div><p>This command will create two important files:</p><ol><li><p><strong><code>migrations-snapshot.json</code></strong>: This file stores the last known state of your entities. It helps the migration generator understand what changes have been made since the last migration was generated.</p></li><li><p><strong><code>migrations.ts</code></strong>: This file contains the actual migration scripts that need to be run to update your database schema. The structure of this file is as follows:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#C586C0;"> type</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Migrations</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult/migrations&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> migrations</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Migrations</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#B5CEA8;">  0</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> async</span><span style="color:#D4D4D4;"> ({ </span><span style="color:#9CDCFE;">sql</span><span style="color:#D4D4D4;"> }) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">    await</span><span style="color:#DCDCAA;"> sql</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">\`--sql</span></span>
<span class="line"><span style="color:#CE9178;">      CREATE SCHEMA IF NOT EXISTS public;</span></span>
<span class="line"><span style="color:#CE9178;">      CREATE TABLE &quot;tasks&quot; (</span></span>
<span class="line"><span style="color:#CE9178;">        &quot;id&quot; VARCHAR DEFAULT &#39;&#39; NOT NULL PRIMARY KEY,</span></span>
<span class="line"><span style="color:#CE9178;">        &quot;title&quot; VARCHAR DEFAULT &#39;&#39; NOT NULL</span></span>
<span class="line"><span style="color:#CE9178;">      )\`</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><p>Each migration script is associated with a unique identifier (in this case, <code>0</code>) and contains the SQL commands necessary to update the database schema.</p><p>By running this script whenever you make changes to your entities, you can automatically generate the necessary migration scripts to keep your database schema in sync with your application&#39;s data model.</p><p>It&#39;s important to note that each migration can include any code that the developer wishes to include, not just SQL statements. The <code>sql</code> parameter is provided to facilitate running SQL commands, but you can also include other logic or code as needed. Additionally, developers are encouraged to add their own custom migrations to address specific requirements or changes that may not be covered by automatically generated migrations. This flexibility allows for a more tailored approach to managing database schema changes.</p></li></ol></li></ol><h3 id="_4-run-the-migrations" tabindex="-1">4. Run the Migrations <a class="header-anchor" href="#_4-run-the-migrations" aria-label="Permalink to &quot;4. Run the Migrations&quot;">​</a></h3><p>To apply the migrations to your database, you&#39;ll need to create a script that executes them.</p><h4 id="setting-up-the-migration-script" tabindex="-1">Setting Up the Migration Script <a class="header-anchor" href="#setting-up-the-migration-script" aria-label="Permalink to &quot;Setting Up the Migration Script&quot;">​</a></h4><ol><li><p><strong>Create the Migration Script:</strong> In the <code>src/server/migrations</code> folder, add a file named <code>migrate.ts</code>.</p></li><li><p><strong>Populate the Script:</strong> Add the following code to <code>migrate.ts</code>:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">migrate</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult/migrations&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">dataProvider</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;../config&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">migrations</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;./migrations&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">migrate</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  dataProvider</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  migrations</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  endConnection:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// Close the database connection after applying migrations</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre></div><p>This script sets up the migration process. The <code>migrate</code> function checks the last migration executed on the database and runs all subsequent migrations based on their index in the <code>migrations</code> file. The entire call to <code>migrate</code> is executed in a transaction, ensuring that either all required migration steps are executed or none at all, maintaining the integrity of your database schema.</p><div class="warning custom-block"><p class="custom-block-title">Warning: Database Transaction Support for Structural Changes</p><p>It&#39;s important to note that some databases, like MySQL, do not support rolling back structural changes as part of a transaction. This means that if you make changes to the database schema (such as adding or dropping tables or columns) and something goes wrong, those changes might not be automatically rolled back. Developers need to be aware of this limitation and plan their migrations accordingly to avoid leaving the database in an inconsistent state.</p><p>Always consult your database&#39;s documentation to understand the specifics of transaction support and plan your migrations accordingly.</p></div></li><li><p><strong>Execute the Script:</strong> Run the migration script using the following command:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npx</span><span style="color:#CE9178;"> tsx</span><span style="color:#CE9178;"> src/server/migrations/migrate.ts</span></span></code></pre></div></li></ol><h2 id="integrating-migrations-into-your-deployment-process" tabindex="-1">Integrating Migrations into Your Deployment Process <a class="header-anchor" href="#integrating-migrations-into-your-deployment-process" aria-label="Permalink to &quot;Integrating Migrations into Your Deployment Process&quot;">​</a></h2><p>You have a couple of options for when and how to run your migrations:</p><ul><li><p><strong>As Part of the Build Step:</strong> You can include the migration script as part of your build or deployment process. This way, if the migration fails, the deployment will also fail, preventing potential issues with an inconsistent database state.</p></li><li><p><strong>During Application Initialization:</strong> Alternatively, you can run the migrations when your application loads by using the <code>initApi</code> option in your <code>api.ts</code> file:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// src/server/api.ts</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">remultExpress</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult/remult-express&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">dataProvider</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">entities</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;./config&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">migrate</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult/migrations/migrate&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">migrations</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;./migrations/migrations&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">remult</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;remult&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#4FC1FF;"> api</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">remultExpress</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  entities</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  dataProvider</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#DCDCAA;">  initApi</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> async</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">    await</span><span style="color:#DCDCAA;"> migrate</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">      dataProvider:</span><span style="color:#9CDCFE;"> remult</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">dataProvider</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">      migrations</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">      endConnection:</span><span style="color:#569CD6;"> false</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">//it&#39;s the default :)</span></span>
<span class="line"><span style="color:#D4D4D4;">    })</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre></div><p>This approach ensures that the migrations are applied each time the API initializes. Note that the <code>migrate</code> and <code>generateMigrations</code> functions typically close the connection used by the <code>dataProvider</code> when they complete. In this code, we disable this behavior using the <code>endConnection: false</code> option, instructing the <code>migrate</code> function to keep the <code>dataProvider</code> connection open when it completes.</p></li></ul><p>Choose the approach that best fits your application&#39;s deployment and initialization process.</p><h3 id="migration-philosophy-embracing-backward-compatibility" tabindex="-1">Migration Philosophy: Embracing Backward Compatibility <a class="header-anchor" href="#migration-philosophy-embracing-backward-compatibility" aria-label="Permalink to &quot;Migration Philosophy: Embracing Backward Compatibility&quot;">​</a></h3><p>We believe in designing migrations with a backward compatibility mindset. This approach ensures that older versions of the code can operate smoothly with newer versions of the database. To achieve this, we recommend:</p><ul><li>Never dropping columns or tables.</li><li>Instead of altering a column, adding a new column and copying the data to it as part of the migration process.</li></ul><p>This philosophy minimizes disruptions and ensures a smoother transition during database schema updates.</p>`,39),l=[t];function p(i,r,c,d,y,D){return n(),a("div",null,l)}const g=s(o,[["render",p]]);export{u as __pageData,g as default};
